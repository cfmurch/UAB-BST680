---
title: "Data visualization tools"
date-modified: last-modified
format:
  html:
    code_folding: show
    df-print: paged
    fig-caption: true
    fig-height: 4
    fig-width: 7
    highlight: tango
    theme: cosmo
    toc: true
    toc-float: true
---
# Overview

The `supermarket` data are synthetic but realistic observations of customer interactions in various counties. The exercises in this document are based on a [tutorial](https://uc-r.github.io/cleveland-dot-plots) written on the UC Business Analytics blog

## Import

```{r}
#| echo: false
# Load packages 
library(tidyverse)  # includes dplyr - filter / select
library(gt)
library(readxl)
library(janitor)


supermarket <- read_excel(
  # the file location
  path = "data/Supermarket Transactions.xlsx",
  # the sheet name to pull data from
  # you can also use numeric order of sheets
  sheet = "Data"
) 

  
```

## Data dictionary

Review this briefly and use it as a reference to engage with the exercises below.

```{r}
#| echo: false
supermarket_descr <-
  c(
    "Transaction"        = "transaction number",
    "Purchase Date"      = "date of purchase",
    "Customer ID"        = "customer identification",
    "Gender"             = "--",
    "Marital Status"     = "--",
    "Homeowner"          = "--",
    "Children"           = "number of kids at home",
    "Annual Income"      = "income of customer",
    "City"               = "--",
    "State or Province"  = "--",
    "Country"            = "Canada, Mexico, or USA",
    "Product Family"     = "drink, food, or non-consumable",
    "Product Department" = "the item's department",
    "Product Category"   = "the item's type",
    "Units Sold"         = "number of items sold",
    "Revenue"            = "money generated by the transaction"
  )

# the enframe function transforms a vector into a tibble,
enframe(supermarket_descr) |> 
  gt(rowname_col = "name") |>
  tab_stubhead(label = 'Variable name') |> 
  cols_label(value = 'Variable description') |>
  cols_align('right') |>
  tab_header(title = 'Description of Super Market data')

```

# Exercise 1

Use the `janitor` package to clean your dataset's names. Then, 

- group your data by city and gender,

- compute the sum of revenue for each group

In the summarized data, 

- (hint: `fct_recode`) convert gender to a factor with categories

    + 'Male customers'
    
    + 'Female customers'
    
- (hint: `fct_reorder`) convert `city` to a factor with levels ordered by revenue.

- Don't forget to `ungroup` your data after summarizing!

```{r}

clean_data <- janitor::clean_names(supermarket, case = 'snake')

################################################################################

ex1 <- clean_data |>
  group_by(city, gender) |>
  summarise(revenue = sum(revenue, na.rm = TRUE)) |>
  ungroup() |> # can't be modified because it's a grouping variable
  mutate(
    gender = fct_recode(gender,
                        'Male customers' = "M", 
                        'Female customers' =  "F"),
    city = fct_reorder(city, revenue))

ex1

#saveRDS(ex1, "~/Desktop/BST680/Module6/solutions/01_solution.rds")

```

# Exercise 2

Using the summarized data from exercise 1, re-create the figure presented during lecture:

```{r}

plot2 <- ggplot(ex1, aes(x = revenue, 
                         y = city,
                         color = gender,
                         label = revenue,
                         group = city)) +
  geom_line(color = "black") +
  geom_point() +
  geom_text(size = 3) +
  guides(col = guide_legend(reverse = TRUE)) +
  theme(text = element_text(size = 16))
  
plot2


### Reorder the legend
  ## Change the order of the legend ( Female, Male -> Male, Female)
    # https://ggplot2.tidyverse.org/reference/guide_legend.html

#saveRDS(plot2, "~/Desktop/BST680/Module6/solutions/02_solution.rds") 
```

# Exercise 3

create two datasets: `left_label` and `right_label`:

- `left_label` should contain the rows of your summarized data from exercise 1 that are on the left hand side of the plot from exercise 2. 

- `right_label` should contain the rows of your summarized data from exercise 1 that are on the right hand side of the plot from exercise 2. 

```{r}

#### Method 1
left_label <- ex1 |> 
  group_by(city) |>
  filter(revenue == min(revenue))
left_label

right_label <- ex1 |> 
  group_by(city) |>
  filter(revenue == max(revenue))
right_label

#### Method 2
#ex1 |> 
#  group_by(city) |>
#  arrange(revenue) |>
#  slice(1)

#ex1 |> 
#  group_by(city) |>
#  arrange(revenue) |>
#  slice(2)

#ex3 <- list(left_label,right_label)
#saveRDS(ex3, "~/Desktop/BST680/Module6/solutions/03_solution.rds")
```

# Exercise 4

Add two text geometries to your figure from exercise 1. Use `nudge_x` to shift your text to the right and left of the points. 

```{r}

plot4 <- ggplot(ex1, aes(x = revenue, 
                         y = city,
                         label = revenue)) +
  geom_line(aes(group = city), 
            color = "black") +
  geom_point(aes(color = gender)) +
  geom_text(data=left_label,
            size=3.0,
            nudge_x =-700) +
  geom_text(data=right_label,
            size=3.0,
            nudge_x =700) +
  guides(col = guide_legend(reverse = TRUE)) +
  theme(text = element_text(size = 16))
  
plot4

#saveRDS(plot4, "~/Desktop/BST680/Module6/solutions/04_solution.rds")

```

# Exercise 5

- Create a dataset called `big_diff` that shows the absolute value of the difference in revenue generated between male customers and female customers in each city.

- Filter this dataset so that only cities with difference greater than \$750 are retained.

- Filter the `right_label` data from exercise 3 to retain only the rows where `city` is in `big_diff$city` values.

- Create a dataset called `highlight` that filters your summarized data from exercise 1 to retain only the rows where `city` is in `dig_diff$city`

```{r}

big_diff <- ex1 |> 
  group_by(city) |> 
  summarise(
    diff_abs=
      abs(revenue[gender=="Female customers"]-revenue[gender=="Male customers"])) |>
  filter(diff_abs>750)
big_diff

right_label <- 
  right_label |>
  filter(city %in% big_diff$city) |>
  left_join(big_diff,by="city") |>
  rename("diff"="diff_abs") |> 
  mutate(diff= paste0('+ $',round(diff,0)))
right_label

highlight <- 
  ex1 |>
  filter(city %in% big_diff$city)
highlight 

#ex5 <- list(big_diff,right_label, highlight)
#saveRDS(ex5, "~/Desktop/BST680/Module6/solutions/05_solution.rds")

```

# Exercise 6

Create a plot similar to that from exercise 4, but this time 

- make lines and points have `alpha` of 1/2. 

- color the lines `'grey'`

- use only the `right_label` data to add text to the plot

- Set `label` to be the difference in revenue rather than revenue. 

```{r}

plot6 <- ggplot(ex1, aes(x = revenue, 
                         y = city)) +
  geom_line(aes(group = city),
            color = "grey",
            alpha = 0.5) +
  geom_point(aes(color = gender),
             alpha = 0.5) +
  geom_text(data=right_label,
            aes(label = diff),
            size=3.0,
            nudge_x =700) +
  guides(col = guide_legend(reverse = TRUE)) +
  theme(text = element_text(size = 12))
  
plot6

#saveRDS(plot6, "~/Desktop/BST680/Module6/solutions/06_solution.rds")

```

# Exercise 7

- Add lines and points to the figure you created in exercise 6, using the `highlight` data you created in exercise 5.

- Use `scale_x_continuous`, setting `labels` to `scales::dollar` so that your x-axis will show dollar signs.

- Modify your x-axis and y-axis labels. 

```{r}

plot7 <- plot6 +
  geom_line(data=highlight,
            aes(group=city),
            linewidth=0.5,
            color="grey")+
  geom_point(data=highlight,
             aes(color=gender),
             size=3)+
  scale_x_continuous(labels = scales::dollar)+
  labs(x="Super market revenue",
       y=NULL)+
  theme(legend.title = element_blank())

plot7

#saveRDS(plot7, "~/Desktop/BST680/Module6/solutions/07_solution.rds")
```

# Exercise 8

Apply color palettes, theme elements, and legend manipulations to make your figure clear and concise. 

```{r}

plot8 <- plot7 + 
  theme_classic() +
  theme(
    text = element_text(size = 12, face = "bold"),
    panel.grid.major.x = element_blank(),
    panel.grid.major.y = element_line(linetype = "dashed"),
    legend.title = element_blank(),
    legend.position = "top",
    legend.justification = "left",
    axis.line = element_blank(),
    axis.ticks = element_blank()) +
  guides(color = guide_legend(override.aes = list(size = 10),
                              reverse = TRUE)) +
  scale_color_brewer(palette = "Dark2")

plot8

#saveRDS(plot8, "~/Desktop/BST680/Module6/solutions/08_solution.rds")
```
