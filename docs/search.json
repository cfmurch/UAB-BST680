[
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "BST680 2024",
    "section": "",
    "text": "This is the website for BST680 for 2024\nNavigation can be done from the navbar\nTo download exercise .R and .qmd files, go to the Downloads section"
  },
  {
    "objectID": "Lectures/06_Adv_Visual/index.html",
    "href": "Lectures/06_Adv_Visual/index.html",
    "title": "Advanced Visualization",
    "section": "",
    "text": "Data Reading\nggplot2 Review\nAdditional Geoms\nAdvanced Aesthetics\nLayering for Communication",
    "crumbs": [
      "Home",
      "Lecture HTML",
      "06 - Advanced Visualization"
    ]
  },
  {
    "objectID": "Lectures/06_Adv_Visual/index.html#agenda",
    "href": "Lectures/06_Adv_Visual/index.html#agenda",
    "title": "Advanced Visualization",
    "section": "",
    "text": "Data Reading\nggplot2 Review\nAdditional Geoms\nAdvanced Aesthetics\nLayering for Communication",
    "crumbs": [
      "Home",
      "Lecture HTML",
      "06 - Advanced Visualization"
    ]
  },
  {
    "objectID": "Lectures/06_Adv_Visual/index.html#data-reading---many-options",
    "href": "Lectures/06_Adv_Visual/index.html#data-reading---many-options",
    "title": "Advanced Visualization",
    "section": "Data Reading - Many Options",
    "text": "Data Reading - Many Options\n\nBase R can use read.table() and more specific variants like read.csv() and read.delim()\n\n\n\n\n\n\n\nImportant arguments are the header (take first row as column names) and the delimiter which defines how your columns are separated\nCommon delimiters are a space ( ), a tab (\\t), commas (,) and pipes (|)",
    "crumbs": [
      "Home",
      "Lecture HTML",
      "06 - Advanced Visualization"
    ]
  },
  {
    "objectID": "Lectures/06_Adv_Visual/index.html#data-reading---many-packages",
    "href": "Lectures/06_Adv_Visual/index.html#data-reading---many-packages",
    "title": "Advanced Visualization",
    "section": "Data Reading - Many Packages",
    "text": "Data Reading - Many Packages\n\nSeveral packages can be used to read other more specialized file types\n\nhaven for SAS, SPSS, and Stata files\nhttr2 for general API connections\ngooglesheets4 to interface with Google Sheets\njsonlite for JSON exchange files\nreadxl, xlsx, and openxlsx2 all engage with Excel workbooks\n\nWe focus on readxl as part of the tidyverse",
    "crumbs": [
      "Home",
      "Lecture HTML",
      "06 - Advanced Visualization"
    ]
  },
  {
    "objectID": "Lectures/06_Adv_Visual/index.html#data-reading---supermarket-transactions",
    "href": "Lectures/06_Adv_Visual/index.html#data-reading---supermarket-transactions",
    "title": "Advanced Visualization",
    "section": "Data Reading - Supermarket Transactions",
    "text": "Data Reading - Supermarket Transactions\n\nA widely used dataset in data science is called “Supermarket Transactions”\nOver 14,000 observations i.e. transations\nSixteen variables\nCan be found online as a .xlsx file\nUgly as sin but very realistic",
    "crumbs": [
      "Home",
      "Lecture HTML",
      "06 - Advanced Visualization"
    ]
  },
  {
    "objectID": "Lectures/06_Adv_Visual/index.html#data-reading---supermarket-start-point",
    "href": "Lectures/06_Adv_Visual/index.html#data-reading---supermarket-start-point",
    "title": "Advanced Visualization",
    "section": "Data Reading - Supermarket Start Point",
    "text": "Data Reading - Supermarket Start Point",
    "crumbs": [
      "Home",
      "Lecture HTML",
      "06 - Advanced Visualization"
    ]
  },
  {
    "objectID": "Lectures/06_Adv_Visual/index.html#data-reading---supermarket-goal",
    "href": "Lectures/06_Adv_Visual/index.html#data-reading---supermarket-goal",
    "title": "Advanced Visualization",
    "section": "Data Reading - Supermarket Goal",
    "text": "Data Reading - Supermarket Goal\n\nglimpse(supermarket, width = 100)\n\nRows: 14,059\nColumns: 16\n$ transaction        &lt;dbl&gt; 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, …\n$ purchase_date      &lt;dttm&gt; 2011-12-18, 2011-12-20, 2011-12-21, 2011-12-21, 2011-12-22, 2011-12-22…\n$ customer_id        &lt;dbl&gt; 7223, 7841, 8374, 9619, 1900, 6696, 9673, 354, 1293, 7938, 9357, 3097, …\n$ gender             &lt;chr&gt; \"F\", \"M\", \"F\", \"M\", \"F\", \"F\", \"M\", \"F\", \"M\", \"M\", \"F\", \"M\", \"M\", \"F\", \"…\n$ marital_status     &lt;chr&gt; \"S\", \"M\", \"M\", \"M\", \"S\", \"M\", \"S\", \"M\", \"M\", \"S\", \"M\", \"M\", \"S\", \"M\", \"…\n$ homeowner          &lt;chr&gt; \"Y\", \"Y\", \"N\", \"Y\", \"Y\", \"Y\", \"Y\", \"Y\", \"Y\", \"N\", \"N\", \"Y\", \"N\", \"N\", \"…\n$ children           &lt;dbl&gt; 2, 5, 2, 3, 3, 3, 2, 2, 3, 1, 0, 1, 3, 3, 0, 3, 1, 0, 2, 5, 1, 2, 2, 4,…\n$ annual_income      &lt;chr&gt; \"$30K - $50K\", \"$70K - $90K\", \"$50K - $70K\", \"$30K - $50K\", \"$130K - $1…\n$ city               &lt;chr&gt; \"Los Angeles\", \"Los Angeles\", \"Bremerton\", \"Portland\", \"Beverly Hills\",…\n$ state_or_province  &lt;chr&gt; \"CA\", \"CA\", \"WA\", \"OR\", \"CA\", \"CA\", \"OR\", \"WA\", \"WA\", \"CA\", \"CA\", \"CA\",…\n$ country            &lt;chr&gt; \"USA\", \"USA\", \"USA\", \"USA\", \"USA\", \"USA\", \"USA\", \"USA\", \"USA\", \"USA\", \"…\n$ product_family     &lt;chr&gt; \"Food\", \"Food\", \"Food\", \"Food\", \"Drink\", \"Food\", \"Food\", \"Food\", \"Non-C…\n$ product_department &lt;chr&gt; \"Snack Foods\", \"Produce\", \"Snack Foods\", \"Snacks\", \"Beverages\", \"Deli\",…\n$ product_category   &lt;chr&gt; \"Snack Foods\", \"Vegetables\", \"Snack Foods\", \"Candy\", \"Carbonated Bevera…\n$ units_sold         &lt;dbl&gt; 5, 5, 3, 4, 4, 3, 4, 6, 1, 2, 3, 5, 4, 4, 5, 5, 5, 3, 5, 5, 4, 5, 5, 4,…\n$ revenue            &lt;dbl&gt; 27.38, 14.90, 5.52, 4.44, 14.00, 4.37, 13.78, 7.34, 2.41, 8.96, 11.82, …",
    "crumbs": [
      "Home",
      "Lecture HTML",
      "06 - Advanced Visualization"
    ]
  },
  {
    "objectID": "Lectures/06_Adv_Visual/index.html#data-reading---import-with-readxl",
    "href": "Lectures/06_Adv_Visual/index.html#data-reading---import-with-readxl",
    "title": "Advanced Visualization",
    "section": "Data Reading - Import with readxl",
    "text": "Data Reading - Import with readxl\n\nreadxl::read_excel() can read specific sheets into R as tibbles\n\n\nsupermarket &lt;- readxl::read_excel(\n  path  = \"data/Supermarket Transactions.xlsx\",\n  sheet = \"Data\"\n)\n\nsupermarket[1:2, 1:3]\n\n# A tibble: 2 × 3\n  Transaction `Purchase Date`     `Customer ID`\n        &lt;dbl&gt; &lt;dttm&gt;                      &lt;dbl&gt;\n1           1 2011-12-18 00:00:00          7223\n2           2 2011-12-20 00:00:00          7841\n\n\n\nBut what do we notice about the first three columns names",
    "crumbs": [
      "Home",
      "Lecture HTML",
      "06 - Advanced Visualization"
    ]
  },
  {
    "objectID": "Lectures/06_Adv_Visual/index.html#data-reading---variable-names",
    "href": "Lectures/06_Adv_Visual/index.html#data-reading---variable-names",
    "title": "Advanced Visualization",
    "section": "Data Reading - Variable Names",
    "text": "Data Reading - Variable Names\n\nThe names are informative but a little too human friendly\nThe variable names have spaces and are written in Title Case\nNothing wrong with this per se but it makes workflows difficult\n\nNeed backticks like supermarket$`Purchase Date`\n\njanitor is an R package for examining and cleaning data\n\n\n\n\n\n\n\nTip\n\n\n\nRemember, write data for computers and code for humans",
    "crumbs": [
      "Home",
      "Lecture HTML",
      "06 - Advanced Visualization"
    ]
  },
  {
    "objectID": "Lectures/06_Adv_Visual/index.html#data-reading---always-thank-your-janitor",
    "href": "Lectures/06_Adv_Visual/index.html#data-reading---always-thank-your-janitor",
    "title": "Advanced Visualization",
    "section": "Data Reading - Always Thank Your janitor",
    "text": "Data Reading - Always Thank Your janitor\n\n\n\n\n\n\nhttps://allisonhorst.com/r-packages-functions",
    "crumbs": [
      "Home",
      "Lecture HTML",
      "06 - Advanced Visualization"
    ]
  },
  {
    "objectID": "Lectures/06_Adv_Visual/index.html#data-reading---clean-names",
    "href": "Lectures/06_Adv_Visual/index.html#data-reading---clean-names",
    "title": "Advanced Visualization",
    "section": "Data Reading - Clean Names",
    "text": "Data Reading - Clean Names\n\nMany options for case from clean_names()\n\n\nsnake_case\n\n\n\njanitor::clean_names(supermarket, case = 'snake')[1:2, 1:3]\n\n# A tibble: 2 × 3\n  transaction purchase_date       customer_id\n        &lt;dbl&gt; &lt;dttm&gt;                    &lt;dbl&gt;\n1           1 2011-12-18 00:00:00        7223\n2           2 2011-12-20 00:00:00        7841",
    "crumbs": [
      "Home",
      "Lecture HTML",
      "06 - Advanced Visualization"
    ]
  },
  {
    "objectID": "Lectures/06_Adv_Visual/index.html#data-reading---clean-names-1",
    "href": "Lectures/06_Adv_Visual/index.html#data-reading---clean-names-1",
    "title": "Advanced Visualization",
    "section": "Data Reading - Clean Names",
    "text": "Data Reading - Clean Names\n\nMany options for case from clean_names()\n\n\nlowerCamel\n\n\n\njanitor::clean_names(supermarket, case = 'lower_camel')[1:2, 1:3]\n\n# A tibble: 2 × 3\n  transaction purchaseDate        customerId\n        &lt;dbl&gt; &lt;dttm&gt;                   &lt;dbl&gt;\n1           1 2011-12-18 00:00:00       7223\n2           2 2011-12-20 00:00:00       7841",
    "crumbs": [
      "Home",
      "Lecture HTML",
      "06 - Advanced Visualization"
    ]
  },
  {
    "objectID": "Lectures/06_Adv_Visual/index.html#data-reading---clean-names-2",
    "href": "Lectures/06_Adv_Visual/index.html#data-reading---clean-names-2",
    "title": "Advanced Visualization",
    "section": "Data Reading - Clean Names",
    "text": "Data Reading - Clean Names\n\nMany options for case from clean_names()\n\n\nSCREAMING_SNAKE\n\n\n\njanitor::clean_names(supermarket, case = 'screaming_snake')[1:2, 1:3]\n\n# A tibble: 2 × 3\n  TRANSACTION PURCHASE_DATE       CUSTOMER_ID\n        &lt;dbl&gt; &lt;dttm&gt;                    &lt;dbl&gt;\n1           1 2011-12-18 00:00:00        7223\n2           2 2011-12-20 00:00:00        7841\n\n\n\nWriting to Excel and other I/O will be later, for now I like snake_case",
    "crumbs": [
      "Home",
      "Lecture HTML",
      "06 - Advanced Visualization"
    ]
  },
  {
    "objectID": "Lectures/06_Adv_Visual/index.html#review-of-ggplot2---the-main-components",
    "href": "Lectures/06_Adv_Visual/index.html#review-of-ggplot2---the-main-components",
    "title": "Advanced Visualization",
    "section": "Review of ggplot2 - The Main Components",
    "text": "Review of ggplot2 - The Main Components\n\nA data argument which indicates what dataset is being visualized\nAn aesthetics function using aes() which indicates how variables from the dataset are mapped to your plot\nFor example, you define what variables map to the x-axis and y-axis\nOne or more geoms which define the geometrical objects that graphically represent the data\n\n\nWe’ve also started to touch on other ggplot aspects that support communication like layers, scales, labels, and themes",
    "crumbs": [
      "Home",
      "Lecture HTML",
      "06 - Advanced Visualization"
    ]
  },
  {
    "objectID": "Lectures/06_Adv_Visual/index.html#review-of-ggplot2---working-with-gapminder",
    "href": "Lectures/06_Adv_Visual/index.html#review-of-ggplot2---working-with-gapminder",
    "title": "Advanced Visualization",
    "section": "Review of ggplot2 - Working with gapminder",
    "text": "Review of ggplot2 - Working with gapminder\n\n\n\nWith gapminder we made a layered scatterplot with a line of best fit, colored by continent, and a logarithmic scale x-axis\n\n\nggplot(gapminder, \n       aes(x = gdpPercap, y = lifeExp)) + \n  geom_point(aes(color = continent)) + \n  geom_smooth(se = FALSE) + \n  scale_x_log10(name = \"GDP per Capita\") + \n  labs(y = \"Life Expectancy (yrs)\") + \n  theme(legend.position = \"bottom\")\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nNow let’s play with the supermarket data",
    "crumbs": [
      "Home",
      "Lecture HTML",
      "06 - Advanced Visualization"
    ]
  },
  {
    "objectID": "Lectures/06_Adv_Visual/index.html#geoms---questions-of-interest",
    "href": "Lectures/06_Adv_Visual/index.html#geoms---questions-of-interest",
    "title": "Advanced Visualization",
    "section": "Geoms - Questions of Interest",
    "text": "Geoms - Questions of Interest\n\nLet’s try to visualize the following:\n\nMean and SD revenue by product family\nTotal revenue from supermarkets for each city\nNumber of transactions by children and annual income\n\nWe can get to all of these using dplyr and some new geoms",
    "crumbs": [
      "Home",
      "Lecture HTML",
      "06 - Advanced Visualization"
    ]
  },
  {
    "objectID": "Lectures/06_Adv_Visual/index.html#geoms---boxplots",
    "href": "Lectures/06_Adv_Visual/index.html#geoms---boxplots",
    "title": "Advanced Visualization",
    "section": "Geoms - Boxplots",
    "text": "Geoms - Boxplots\n\nBoxplots via geom_boxplot() provide mean, IQR, and outliers (1.5x past) the IQR; great for visualizing numeric data within categories\n\n\nggplot(data=supermarket) + \n  geom_boxplot(aes(x=product_family, y=revenue))",
    "crumbs": [
      "Home",
      "Lecture HTML",
      "06 - Advanced Visualization"
    ]
  },
  {
    "objectID": "Lectures/06_Adv_Visual/index.html#geoms---point-range-and-error-bars",
    "href": "Lectures/06_Adv_Visual/index.html#geoms---point-range-and-error-bars",
    "title": "Advanced Visualization",
    "section": "Geoms - Point Range and Error Bars",
    "text": "Geoms - Point Range and Error Bars\n\nPointrange plots give points plus ranges\nFirst, we use summarise() to get some output\n\n\nsupermarket_summary &lt;- supermarket|&gt;\n  group_by(product_family) |&gt;\n  summarise(revenue_mn = mean(revenue),\n            revenue_sd = sd(revenue))\nsupermarket_summary\n\n# A tibble: 3 × 3\n  product_family revenue_mn revenue_sd\n  &lt;chr&gt;               &lt;dbl&gt;      &lt;dbl&gt;\n1 Drink                12.7       8.39\n2 Food                 13.1       8.23\n3 Non-Consumable       12.9       8.07",
    "crumbs": [
      "Home",
      "Lecture HTML",
      "06 - Advanced Visualization"
    ]
  },
  {
    "objectID": "Lectures/06_Adv_Visual/index.html#geoms---point-range-and-error-bars-1",
    "href": "Lectures/06_Adv_Visual/index.html#geoms---point-range-and-error-bars-1",
    "title": "Advanced Visualization",
    "section": "Geoms - Point Range and Error Bars",
    "text": "Geoms - Point Range and Error Bars\n\nNow provide ymin and ymax aesthetics to geom_pointrange()\n\n\nggplot(data=supermarket_summary) + \n  geom_pointrange(aes(x=product_family, y=revenue_mn, \n                      ymin=revenue_mn - revenue_sd, ymax=revenue_mn + revenue_sd))",
    "crumbs": [
      "Home",
      "Lecture HTML",
      "06 - Advanced Visualization"
    ]
  },
  {
    "objectID": "Lectures/06_Adv_Visual/index.html#geoms---point-range-and-error-bars-2",
    "href": "Lectures/06_Adv_Visual/index.html#geoms---point-range-and-error-bars-2",
    "title": "Advanced Visualization",
    "section": "Geoms - Point Range and Error Bars",
    "text": "Geoms - Point Range and Error Bars\n\nYou can also use geom_errorbar() for more publish-ready figures\n\n\nggplot(data=supermarket_summary, aes(x=product_family)) + \n  geom_point(aes(y=revenue_mn), shape=\"-\", size=18) +\n  geom_errorbar(aes(ymin=revenue_mn - revenue_sd, ymax=revenue_mn + revenue_sd), width=0.2)",
    "crumbs": [
      "Home",
      "Lecture HTML",
      "06 - Advanced Visualization"
    ]
  },
  {
    "objectID": "Lectures/06_Adv_Visual/index.html#geoms---bar-charts",
    "href": "Lectures/06_Adv_Visual/index.html#geoms---bar-charts",
    "title": "Advanced Visualization",
    "section": "Geoms - Bar Charts",
    "text": "Geoms - Bar Charts\n\nLet’s use dplyr again to get total revenue by city\n\n\ncity_rev &lt;- supermarket |&gt;\n  group_by(city) |&gt;\n  summarise(revenue = sum(revenue, na.rm = TRUE)) \n\ncity_rev\n\n# A tibble: 23 × 2\n   city          revenue\n   &lt;chr&gt;           &lt;dbl&gt;\n 1 Acapulco        5161.\n 2 Bellingham       993.\n 3 Beverly Hills  10320.\n 4 Bremerton      10975.\n 5 Camacho         5797.\n 6 Guadalajara      523.\n 7 Hidalgo        11313.\n 8 Los Angeles    12296.\n 9 Merida          8740.\n10 Mexico City     2488.\n# ℹ 13 more rows",
    "crumbs": [
      "Home",
      "Lecture HTML",
      "06 - Advanced Visualization"
    ]
  },
  {
    "objectID": "Lectures/06_Adv_Visual/index.html#geoms---bar-charts-1",
    "href": "Lectures/06_Adv_Visual/index.html#geoms---bar-charts-1",
    "title": "Advanced Visualization",
    "section": "Geoms - Bar Charts",
    "text": "Geoms - Bar Charts\n\ngeom_col() gets us most of the way but needs some hygiene\n\n\nggplot(city_rev, aes(x = city, y = revenue)) +\n  geom_col()",
    "crumbs": [
      "Home",
      "Lecture HTML",
      "06 - Advanced Visualization"
    ]
  },
  {
    "objectID": "Lectures/06_Adv_Visual/index.html#geoms---bar-charts-2",
    "href": "Lectures/06_Adv_Visual/index.html#geoms---bar-charts-2",
    "title": "Advanced Visualization",
    "section": "Geoms - Bar Charts",
    "text": "Geoms - Bar Charts\n\nUse fct_reorder() to get a more intuitive order by revenue size\n\n\nggplot(city_rev) +\n  aes(x = fct_reorder(city, revenue), y = revenue) + #&lt;&lt;\n  geom_col()",
    "crumbs": [
      "Home",
      "Lecture HTML",
      "06 - Advanced Visualization"
    ]
  },
  {
    "objectID": "Lectures/06_Adv_Visual/index.html#geoms---bar-charts-3",
    "href": "Lectures/06_Adv_Visual/index.html#geoms---bar-charts-3",
    "title": "Advanced Visualization",
    "section": "Geoms - Bar Charts",
    "text": "Geoms - Bar Charts\n\nReorient the plot to get horizontal bars with coord_flip()\n\n\nggplot(city_rev) +\n  aes(x = fct_reorder(city, revenue), y = revenue) +\n  geom_col() + \n  coord_flip() #&lt;&lt;",
    "crumbs": [
      "Home",
      "Lecture HTML",
      "06 - Advanced Visualization"
    ]
  },
  {
    "objectID": "Lectures/06_Adv_Visual/index.html#geoms---bar-charts-4",
    "href": "Lectures/06_Adv_Visual/index.html#geoms---bar-charts-4",
    "title": "Advanced Visualization",
    "section": "Geoms - Bar Charts",
    "text": "Geoms - Bar Charts\n\nNote, geom_col() gives heights equal to the value in a row, good when using summarise(), while geom_bar() makes the height proportional to the number of instances of data\n\n\nggplot(supermarket) + \n  aes(x=interaction(homeowner, marital_status)) + \n  geom_bar()  #&lt;&lt;",
    "crumbs": [
      "Home",
      "Lecture HTML",
      "06 - Advanced Visualization"
    ]
  },
  {
    "objectID": "Lectures/06_Adv_Visual/index.html#geoms---tile-plots-and-heatmaps",
    "href": "Lectures/06_Adv_Visual/index.html#geoms---tile-plots-and-heatmaps",
    "title": "Advanced Visualization",
    "section": "Geoms - Tile Plots and Heatmaps",
    "text": "Geoms - Tile Plots and Heatmaps\n\nTile plots / heatmaps show counts when working with two categorical variables via geom_tile() or base R’s heatmap()\n\n\nsupermarket |&gt;\n  count(annual_income, children) |&gt;\n  ggplot(aes(x = annual_income, y = children)) +\n  geom_tile(aes(fill = n))",
    "crumbs": [
      "Home",
      "Lecture HTML",
      "06 - Advanced Visualization"
    ]
  },
  {
    "objectID": "Lectures/06_Adv_Visual/index.html#aesthetics---more-research-questions",
    "href": "Lectures/06_Adv_Visual/index.html#aesthetics---more-research-questions",
    "title": "Advanced Visualization",
    "section": "Aesthetics - More Research Questions",
    "text": "Aesthetics - More Research Questions\n\nWho generates more revenue for super markets, men or women?\n\n\ncity_rev_gender &lt;- supermarket |&gt;\n  group_by(city, gender) |&gt;\n  summarise(revenue = sum(revenue, na.rm = TRUE)) |&gt; \n  ungroup() |&gt; #&lt;&lt;\n  mutate(\n    gender = recode(gender, 'F' = 'Female', 'M' = 'Male'),\n    # re-order city in the data rather than the plot\n    # why would this fail if data were grouped?\n    city = fct_reorder(city, .x = revenue) #&lt;&lt;\n  )\n\ncity_rev_gender[1:3,]\n\n# A tibble: 3 × 3\n  city       gender revenue\n  &lt;fct&gt;      &lt;chr&gt;    &lt;dbl&gt;\n1 Acapulco   Female   2566.\n2 Acapulco   Male     2596.\n3 Bellingham Female    453.",
    "crumbs": [
      "Home",
      "Lecture HTML",
      "06 - Advanced Visualization"
    ]
  },
  {
    "objectID": "Lectures/06_Adv_Visual/index.html#aesthetics---fill-vs-color-in-bars",
    "href": "Lectures/06_Adv_Visual/index.html#aesthetics---fill-vs-color-in-bars",
    "title": "Advanced Visualization",
    "section": "Aesthetics - Fill vs Color in Bars",
    "text": "Aesthetics - Fill vs Color in Bars\nThe fill aesthetic applies inside of bars but color applies to their border\n\nggplot(city_rev_gender, aes(city, revenue, fill = gender)) + #&lt;&lt;\n  geom_col(color = 'purple') +\n  coord_flip()",
    "crumbs": [
      "Home",
      "Lecture HTML",
      "06 - Advanced Visualization"
    ]
  },
  {
    "objectID": "Lectures/06_Adv_Visual/index.html#aesthetics---stacked-vs-dodged",
    "href": "Lectures/06_Adv_Visual/index.html#aesthetics---stacked-vs-dodged",
    "title": "Advanced Visualization",
    "section": "Aesthetics - Stacked vs Dodged",
    "text": "Aesthetics - Stacked vs Dodged\n\nposition governs how the bars are placed, default is stacked while dodge places bars side-by-side\n\n\nggplot(city_rev_gender, aes(city, revenue, fill = gender)) +\n  geom_col(position = \"dodge\") + #&lt;&lt;\n  coord_flip()",
    "crumbs": [
      "Home",
      "Lecture HTML",
      "06 - Advanced Visualization"
    ]
  },
  {
    "objectID": "Lectures/06_Adv_Visual/index.html#aesthetics---faceting",
    "href": "Lectures/06_Adv_Visual/index.html#aesthetics---faceting",
    "title": "Advanced Visualization",
    "section": "Aesthetics - Faceting",
    "text": "Aesthetics - Faceting\n\nfacet_wrap() and facet_grid() give one plot per group\n\n\nggplot(city_rev_gender, aes(city, revenue, fill = gender)) +\n  geom_bar(stat = \"identity\", position = \"dodge\") +\n  coord_flip() +\n  facet_wrap( ~ gender) #&lt;&lt;",
    "crumbs": [
      "Home",
      "Lecture HTML",
      "06 - Advanced Visualization"
    ]
  },
  {
    "objectID": "Lectures/06_Adv_Visual/index.html#aesthetics---too-many-to-list",
    "href": "Lectures/06_Adv_Visual/index.html#aesthetics---too-many-to-list",
    "title": "Advanced Visualization",
    "section": "Aesthetics - Too Many to List",
    "text": "Aesthetics - Too Many to List\n\nDon’t forget the other aesthetics you can use via group_by() like color, size, shape, and alpha (transparency)\nUse these with groups within aes() or as geom arguments to use fixed values e.g. color=“black”\nImportantly, all aesthetics within an aes() can be controlled with scales like scale_color_manual() or scale_x_continuous()\nCheck the various help pages for the geom functions for info on other arguments like position\n\n\nAgain, make use of the reference manual",
    "crumbs": [
      "Home",
      "Lecture HTML",
      "06 - Advanced Visualization"
    ]
  },
  {
    "objectID": "Lectures/06_Adv_Visual/index.html#aesthetics---max-info-with-minimal-ink",
    "href": "Lectures/06_Adv_Visual/index.html#aesthetics---max-info-with-minimal-ink",
    "title": "Advanced Visualization",
    "section": "Aesthetics - Max Info with Minimal Ink",
    "text": "Aesthetics - Max Info with Minimal Ink\n\nGraphical excellence is that which gives to the viewer the greatest number of ideas in the shortest time with the least ink in the smallest space.\n\n— Edward R. Tufte\n\n\n\nHow can we make it easy to pick out the patterns across cities?\nCan we use less ink to communicate even more?",
    "crumbs": [
      "Home",
      "Lecture HTML",
      "06 - Advanced Visualization"
    ]
  },
  {
    "objectID": "Lectures/06_Adv_Visual/index.html#layering---points",
    "href": "Lectures/06_Adv_Visual/index.html#layering---points",
    "title": "Advanced Visualization",
    "section": "Layering - Points",
    "text": "Layering - Points\n\nInstead of bars, let’s use points\n\n\nggplot(city_rev_gender, aes(revenue, city)) +\n  geom_point(aes(color = gender))",
    "crumbs": [
      "Home",
      "Lecture HTML",
      "06 - Advanced Visualization"
    ]
  },
  {
    "objectID": "Lectures/06_Adv_Visual/index.html#layering---size",
    "href": "Lectures/06_Adv_Visual/index.html#layering---size",
    "title": "Advanced Visualization",
    "section": "Layering - Size",
    "text": "Layering - Size\n\nMake the points bigger and then use theme() to increase all text size\n\n\nggplot(city_rev_gender, aes(revenue, city)) +\n  geom_point(aes(color = gender), size = 3) + \n  theme(text = element_text(size = 16)) #&lt;&lt;",
    "crumbs": [
      "Home",
      "Lecture HTML",
      "06 - Advanced Visualization"
    ]
  },
  {
    "objectID": "Lectures/06_Adv_Visual/index.html#layering---aesthetic-inheritance",
    "href": "Lectures/06_Adv_Visual/index.html#layering---aesthetic-inheritance",
    "title": "Advanced Visualization",
    "section": "Layering - Aesthetic Inheritance",
    "text": "Layering - Aesthetic Inheritance\n\nggplot2 adds layers, one after the other, to a plot\nGeneral aesthetics for the whole graph can be set using aes() either…\n\nWithin the ggplot() function\nAs a stand-alone aes() function.\n\nThe aesthetics of the current geom can be set using an aes() inside the geom function.",
    "crumbs": [
      "Home",
      "Lecture HTML",
      "06 - Advanced Visualization"
    ]
  },
  {
    "objectID": "Lectures/06_Adv_Visual/index.html#layering---aesthetic-inheritance-1",
    "href": "Lectures/06_Adv_Visual/index.html#layering---aesthetic-inheritance-1",
    "title": "Advanced Visualization",
    "section": "Layering - Aesthetic Inheritance",
    "text": "Layering - Aesthetic Inheritance\n\nThe x and y aesthetics from the global aes() are inherited by both geom_point() and geom_line()\n\n\nggplot(city_rev_gender) +\n  aes(x = revenue, y = city) + #&lt;&lt; \n  geom_point(aes(color = gender), size = 3) +\n  theme(text = element_text(size = 16)) +\n  geom_line()  #Inherits x = revenue, y = city #&lt;&lt;\n\n\nThe color aesthetic in geom_point() is not inherited by geom_line()\n\n\nggplot(city_rev_gender) +\n  aes(x = revenue, y = city) + \n  geom_point(aes(color = gender), size = 3) + #&lt;&lt; \n  theme(text = element_text(size = 16)) +\n  geom_line()  #Inherits x = revenue, y = city",
    "crumbs": [
      "Home",
      "Lecture HTML",
      "06 - Advanced Visualization"
    ]
  },
  {
    "objectID": "Lectures/06_Adv_Visual/index.html#layering---lines",
    "href": "Lectures/06_Adv_Visual/index.html#layering---lines",
    "title": "Advanced Visualization",
    "section": "Layering - Lines",
    "text": "Layering - Lines\n\nWhen we group on gender for geom_line() we just ruin the plot\n\n\nggplot(city_rev_gender) +\n  aes(x = revenue, y = city) + \n  geom_point(aes(color = gender), size = 3) +\n  theme(text = element_text(size = 16)) +\n  geom_line(aes(group = gender))  #Disaster!",
    "crumbs": [
      "Home",
      "Lecture HTML",
      "06 - Advanced Visualization"
    ]
  },
  {
    "objectID": "Lectures/06_Adv_Visual/index.html#layering---lines-1",
    "href": "Lectures/06_Adv_Visual/index.html#layering---lines-1",
    "title": "Advanced Visualization",
    "section": "Layering - Lines",
    "text": "Layering - Lines\n\nInstead, group on city for a dot plot; good groupings should draw the eye to the relevant comparisons\n\n\nggplot(city_rev_gender) +\n  aes(x = revenue, y = city) + \n  geom_point(aes(color = gender), size = 3) + \n  theme(text = element_text(size = 16)) +\n  geom_line(aes(group = city))  #Success!",
    "crumbs": [
      "Home",
      "Lecture HTML",
      "06 - Advanced Visualization"
    ]
  },
  {
    "objectID": "Lectures/06_Adv_Visual/index.html#layering---order-matters",
    "href": "Lectures/06_Adv_Visual/index.html#layering---order-matters",
    "title": "Advanced Visualization",
    "section": "Layering - Order Matters",
    "text": "Layering - Order Matters\n\nIf we want points to appear on top of the lines, put the line layer down before the point layer.\n\n\nggplot(city_rev_gender) +\n  aes(x = revenue, y = city) + \n  geom_line(aes(group = city)) + #&lt;&lt;\n  geom_point(aes(color = gender), size = 3) + \n  theme(text = element_text(size = 16))",
    "crumbs": [
      "Home",
      "Lecture HTML",
      "06 - Advanced Visualization"
    ]
  },
  {
    "objectID": "Lectures/06_Adv_Visual/index.html#layering---using-text-annotation",
    "href": "Lectures/06_Adv_Visual/index.html#layering---using-text-annotation",
    "title": "Advanced Visualization",
    "section": "Layering - Using Text Annotation",
    "text": "Layering - Using Text Annotation\n\nAnnotation can help readers understand the most relevant parts of your data\n\nggplot2 uses geom_text() to add text layers\nThe main aesthetic for geom_text() is label\nggrepel, an extensions of ggplot2, has a lot of handy annotation helpers for proper positioning\nggforce has similar functionality but many other advanced options as well (reference manual here)",
    "crumbs": [
      "Home",
      "Lecture HTML",
      "06 - Advanced Visualization"
    ]
  },
  {
    "objectID": "Lectures/06_Adv_Visual/index.html#layering---using-text-annotation-1",
    "href": "Lectures/06_Adv_Visual/index.html#layering---using-text-annotation-1",
    "title": "Advanced Visualization",
    "section": "Layering - Using Text Annotation",
    "text": "Layering - Using Text Annotation\n\nWe still have some work ahead of us…in the exercises!\n\n\nggplot(city_rev_gender) +\n  aes(x = revenue, y = city, label = revenue) +  #&lt;&lt;\n  geom_line(aes(group = city)) +\n  geom_point(aes(color = gender), size = 3) + \n  geom_text(aes(color = gender)) + #&lt;&lt;\n  theme(text = element_text(size = 16))",
    "crumbs": [
      "Home",
      "Lecture HTML",
      "06 - Advanced Visualization"
    ]
  },
  {
    "objectID": "Lectures/06_Adv_Visual/index.html#layering---scales",
    "href": "Lectures/06_Adv_Visual/index.html#layering---scales",
    "title": "Advanced Visualization",
    "section": "Layering - Scales",
    "text": "Layering - Scales\n\nScales control aesthetics details, including x and y axes\n\n\nggplot(city_rev_gender) +\n  aes(x = revenue, y = city) + \n  geom_line(aes(group = city)) + \n  geom_point(aes(color = gender), size = 3) + \n  scale_color_manual(labels = c(\"M\", \"F\"), values = c(\"#00FF00\", \"Purple\"), name=\"Gender\") + #&lt;&lt;\n  scale_y_discrete(name = NULL) + scale_x_continuous(breaks = seq(0, 10000, 2000)) + #&lt;&lt;\n  theme(text = element_text(size = 16))",
    "crumbs": [
      "Home",
      "Lecture HTML",
      "06 - Advanced Visualization"
    ]
  },
  {
    "objectID": "Lectures/06_Adv_Visual/index.html#layering---themes",
    "href": "Lectures/06_Adv_Visual/index.html#layering---themes",
    "title": "Advanced Visualization",
    "section": "Layering - Themes",
    "text": "Layering - Themes\n\nThemes customize non-data elements both globally and by individually\n\n\nggplot(city_rev_gender) +\n  aes(x = revenue, y = city) + \n  geom_line(aes(group = city)) + \n  geom_point(aes(color = gender), size = 3) + \n  scale_color_manual(labels = c(\"M\", \"F\"), values = c(\"#00FF00\", \"Purple\"), name=\"Gender\") +\n  scale_y_discrete(name = NULL) + scale_x_continuous(breaks = seq(0, 10000, 2000)) +\n  theme_bw() + theme(text = element_text(size = 16)) #&lt;&lt;\n\n\n\n\n\n\n\n\n\nFor more themes check out the ggthemes package",
    "crumbs": [
      "Home",
      "Lecture HTML",
      "06 - Advanced Visualization"
    ]
  },
  {
    "objectID": "Lectures/06_Adv_Visual/index.html#additional-resources",
    "href": "Lectures/06_Adv_Visual/index.html#additional-resources",
    "title": "Advanced Visualization",
    "section": "Additional Resources",
    "text": "Additional Resources\n\nChapters 9-11 in R4DS\nggplot2: Elegant Graphics for Data Analysis by Hadley Wickham; a textbook resource dedicated solely to ggplot2\nR Graphics Cookbook by Winston Chang; a practical guide with over 150 different recipes for making plots in R\nThe ggplot2 extensions gallery; over 130 different extensions to ggplot2 with extensive utility\nThe R Graph Gallery; hundreds of examples of plots across 50 types with step-by-step guides",
    "crumbs": [
      "Home",
      "Lecture HTML",
      "06 - Advanced Visualization"
    ]
  },
  {
    "objectID": "Lectures/04_Isolation/index.html",
    "href": "Lectures/04_Isolation/index.html",
    "title": "Getting Started with dplyr",
    "section": "",
    "text": "Any questions on programming fundamentals from last time?\n\nFor review, see chapter 3 from R4DS\nFor recipes, you can check the fourth, fifth, and seventh recipes under Visualize Data on Posit Cloud\n\n\n\n\n\n\n\n\nTip\n\n\n\nAlthough challenging, these are the backbone of R and will get easier with practice",
    "crumbs": [
      "Home",
      "Lecture HTML",
      "04 - Data Isolation"
    ]
  },
  {
    "objectID": "Lectures/04_Isolation/index.html#from-last-time",
    "href": "Lectures/04_Isolation/index.html#from-last-time",
    "title": "Getting Started with dplyr",
    "section": "",
    "text": "Any questions on programming fundamentals from last time?\n\nFor review, see chapter 3 from R4DS\nFor recipes, you can check the fourth, fifth, and seventh recipes under Visualize Data on Posit Cloud\n\n\n\n\n\n\n\n\nTip\n\n\n\nAlthough challenging, these are the backbone of R and will get easier with practice",
    "crumbs": [
      "Home",
      "Lecture HTML",
      "04 - Data Isolation"
    ]
  },
  {
    "objectID": "Lectures/04_Isolation/index.html#from-last-time-1",
    "href": "Lectures/04_Isolation/index.html#from-last-time-1",
    "title": "Getting Started with dplyr",
    "section": "From Last Time",
    "text": "From Last Time\n\nAny questions on the reading / primer?\nWe’ve seen the R fundamentals on accession with vectors and functions; now let’s take the next step and work with data frames",
    "crumbs": [
      "Home",
      "Lecture HTML",
      "04 - Data Isolation"
    ]
  },
  {
    "objectID": "Lectures/04_Isolation/index.html#agenda",
    "href": "Lectures/04_Isolation/index.html#agenda",
    "title": "Getting Started with dplyr",
    "section": "Agenda",
    "text": "Agenda\n\n\n\nData frames\nAn introduction to the pipe |&gt;\nData isolation\nTidy evaluation and a teaser on data transformation",
    "crumbs": [
      "Home",
      "Lecture HTML",
      "04 - Data Isolation"
    ]
  },
  {
    "objectID": "Lectures/04_Isolation/index.html#data-frames---why-theyre-amazing",
    "href": "Lectures/04_Isolation/index.html#data-frames---why-theyre-amazing",
    "title": "Getting Started with dplyr",
    "section": "Data Frames - Why They’re Amazing",
    "text": "Data Frames - Why They’re Amazing\n\nData frames are the most widely used data storage object within R\nThey are amazing and useful for many reasons:\n\nThey are the default receptacle for any rectangular data\nMost functions in R will readily accept a data frame for their\ndata= argument\nConveniently package related variables together\nRecall, we think of them as vectors we’ve bound column-wise",
    "crumbs": [
      "Home",
      "Lecture HTML",
      "04 - Data Isolation"
    ]
  },
  {
    "objectID": "Lectures/04_Isolation/index.html#data-frames---why-theyre-amazing-1",
    "href": "Lectures/04_Isolation/index.html#data-frames---why-theyre-amazing-1",
    "title": "Getting Started with dplyr",
    "section": "Data Frames - Why They’re Amazing",
    "text": "Data Frames - Why They’re Amazing\n\nFunctions can be applied to data frames and their behavior will generally be consistent and uniform\nFiltering on rows will return all columns and vice versa\nColumns can hold vectors of different classes; this is very intuitive\n\nView data frames as having rows as observations and columns are many kind of variables\nOther data storage objects (e.g. matrices) only hold one class\n\nThe packages in the tidyverse extend this and prioritize engaging with data frames via the tibble",
    "crumbs": [
      "Home",
      "Lecture HTML",
      "04 - Data Isolation"
    ]
  },
  {
    "objectID": "Lectures/04_Isolation/index.html#data-frames---the-tibble",
    "href": "Lectures/04_Isolation/index.html#data-frames---the-tibble",
    "title": "Getting Started with dplyr",
    "section": "Data Frames - The Tibble",
    "text": "Data Frames - The Tibble\n\nTibbles are data frames, just a special “tidy” flavor\n\n\n\n\n\n\n\nPrimary distinction between the data frame’s data.frame classand the tibble’s tbl class is with respect to printing to console and when subsetting",
    "crumbs": [
      "Home",
      "Lecture HTML",
      "04 - Data Isolation"
    ]
  },
  {
    "objectID": "Lectures/04_Isolation/index.html#data-frames---the-nhanes-data-set",
    "href": "Lectures/04_Isolation/index.html#data-frames---the-nhanes-data-set",
    "title": "Getting Started with dplyr",
    "section": "Data Frames - The NHANES Data Set",
    "text": "Data Frames - The NHANES Data Set\n\n\n\n\n\n\nProgram of studies designed to assess health and nutritional status in children and adults nationally\nStarted in the 1960’s and became a continuous program in 1999\nIncludes demographic, socioeconmoic, dietary, and health-related questions\n\n\nWhat does all this mean?",
    "crumbs": [
      "Home",
      "Lecture HTML",
      "04 - Data Isolation"
    ]
  },
  {
    "objectID": "Lectures/04_Isolation/index.html#data-frames---nhanes-is-big-and-messy",
    "href": "Lectures/04_Isolation/index.html#data-frames---nhanes-is-big-and-messy",
    "title": "Getting Started with dplyr",
    "section": "Data Frames - NHANES is Big and Messy",
    "text": "Data Frames - NHANES is Big and Messy\n\n\n# A tibble: 101,316 × 27\n    seqn  exam   psu strata wts_mec_2yr exam_status          age age_group sex  \n * &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt;  &lt;dbl&gt;       &lt;dbl&gt; &lt;chr&gt;              &lt;dbl&gt; &lt;chr&gt;     &lt;chr&gt;\n 1     1  1999     1      5      10983. interview and exam     2 17 and b… Fema…\n 2     2  1999     3      1      28325. interview and exam    77 75 and a… Male \n 3     3  1999     2      7      46192. interview and exam    10 17 and b… Fema…\n 4     4  1999     1      2      10251. interview and exam     1 17 and b… Male \n 5     5  1999     2      8      99445. interview and exam    49 45 to 65  Male \n 6     6  1999     2      2      39657. interview and exam    19 18 to 45  Fema…\n 7     7  1999     2      4      25525. interview and exam    59 45 to 65  Fema…\n 8     8  1999     1      6      31511. interview and exam    13 17 and b… Male \n 9     9  1999     2      9       7576. interview and exam    11 17 and b… Fema…\n10    10  1999     1      7      22446. interview and exam    43 18 to 45  Male \n# ℹ 101,306 more rows\n# ℹ 18 more variables: race_ethnicity &lt;chr&gt;, education &lt;chr&gt;, income_hh &lt;chr&gt;,\n#   pregnant &lt;chr&gt;, bp_sys_mmhg &lt;dbl&gt;, bp_dia_mmhg &lt;dbl&gt;, n_msr_sbp &lt;dbl&gt;,\n#   n_msr_dbp &lt;dbl&gt;, bp_controlled &lt;chr&gt;, acr_mgg &lt;dbl&gt;, albuminuria &lt;chr&gt;,\n#   chol_hdl_mgdl &lt;dbl&gt;, chol_total_mgdl &lt;dbl&gt;, health_insurance &lt;chr&gt;,\n#   bp_high_aware &lt;chr&gt;, bp_meds &lt;chr&gt;, hc_usual_facility &lt;chr&gt;,\n#   hc_visit_1yr &lt;chr&gt;",
    "crumbs": [
      "Home",
      "Lecture HTML",
      "04 - Data Isolation"
    ]
  },
  {
    "objectID": "Lectures/04_Isolation/index.html#data-frames---nhanes-is-big-and-messy-1",
    "href": "Lectures/04_Isolation/index.html#data-frames---nhanes-is-big-and-messy-1",
    "title": "Getting Started with dplyr",
    "section": "Data Frames - NHANES is Big and Messy",
    "text": "Data Frames - NHANES is Big and Messy\n\n\n\nTrying to plot this data will probably work but you won’t be happy with the results\nMost stock summarization functions like mean() or sd() will almost certainly fail\nWe need to clean up the data set into something more tractable\n\n\nBut how?",
    "crumbs": [
      "Home",
      "Lecture HTML",
      "04 - Data Isolation"
    ]
  },
  {
    "objectID": "Lectures/04_Isolation/index.html#data-frames---well-use-dplyr",
    "href": "Lectures/04_Isolation/index.html#data-frames---well-use-dplyr",
    "title": "Getting Started with dplyr",
    "section": "Data Frames - We’ll Use dplyr",
    "text": "Data Frames - We’ll Use dplyr\n\n\n\n\n\n\nIgnore the bitter grumblings of your instructor",
    "crumbs": [
      "Home",
      "Lecture HTML",
      "04 - Data Isolation"
    ]
  },
  {
    "objectID": "Lectures/04_Isolation/index.html#data-frames---a-clean-nhanes",
    "href": "Lectures/04_Isolation/index.html#data-frames---a-clean-nhanes",
    "title": "Getting Started with dplyr",
    "section": "Data Frames - A Clean NHANES",
    "text": "Data Frames - A Clean NHANES\nAfter a bit of work with dplyr we can eventually get this\n\n\n# A tibble: 20 × 6\n    exam   age sex    bp_sys_mmhg n_msr_sbp bp_meds\n   &lt;dbl&gt; &lt;dbl&gt; &lt;chr&gt;        &lt;dbl&gt;     &lt;dbl&gt; &lt;chr&gt;  \n 1  1999    77 Male         101.          3 No     \n 2  1999    49 Male         122           3 Yes    \n 3  2001    39 Male         125.          3 No     \n 4  2001    23 Male         103.          3 No     \n 5  2003    16 Female        98.7         3 No     \n 6  2003    17 Male         103           2 No     \n 7  2005    44 Female       139.          3 Yes    \n 8  2005    70 Male         131.          3 Yes    \n 9  2007    62 Female       123.          3 Yes    \n10  2007    71 Male         145.          3 Yes    \n11  2009    34 Male         113.          3 No     \n12  2009    16 Male         110           3 No     \n13  2011    22 Male         111.          3 No     \n14  2011    44 Female       118           3 No     \n15  2013    69 Male         113.          3 No     \n16  2013    54 Male         157.          3 No     \n17  2015    62 Male         123.          3 No     \n18  2015    53 Male         140           3 No     \n19  2017    66 Female       200           2 Yes    \n20  2017    18 Male         111.          3 No",
    "crumbs": [
      "Home",
      "Lecture HTML",
      "04 - Data Isolation"
    ]
  },
  {
    "objectID": "Lectures/04_Isolation/index.html#workflows---program-a-story",
    "href": "Lectures/04_Isolation/index.html#workflows---program-a-story",
    "title": "Getting Started with dplyr",
    "section": "Workflows - Program a Story",
    "text": "Workflows - Program a Story\nHere is the legendary tale of Little Bunny Foo Foo\n\nLittle bunny Foo Foo  Went hopping through the forest  Scooping up the field mice  And bopping them on the head\n\n\nHow would we go about programming this in R?\n\n. . .\n\n# Assign little_bunny() to foo_foo\nfoo_foo &lt;- little_bunny()\n\n\nNow foo_foo can be modified…but how?",
    "crumbs": [
      "Home",
      "Lecture HTML",
      "04 - Data Isolation"
    ]
  },
  {
    "objectID": "Lectures/04_Isolation/index.html#workflows---making-new-objects",
    "href": "Lectures/04_Isolation/index.html#workflows---making-new-objects",
    "title": "Getting Started with dplyr",
    "section": "Workflows - Making New Objects",
    "text": "Workflows - Making New Objects\nWe could save each intermediate step as a new object:\n\n# Little bunny Foo Foo\nfoo_foo &lt;- little_bunny()\n\n# Went hopping through the forest\nfoo_foo_1 &lt;- hop(foo_foo, through = forest) \n\n# Scooping up the field mice\nfoo_foo_2 &lt;- scoop(foo_foo_1, up = field_mice) \n\n# And bopping them on the head\nfoo_foo_3 &lt;- bop(foo_foo_2, on = head) \n\n\nProblems:\n\nThe code is cluttered with unimportant names\nYou have to carefully increment the suffix on each line",
    "crumbs": [
      "Home",
      "Lecture HTML",
      "04 - Data Isolation"
    ]
  },
  {
    "objectID": "Lectures/04_Isolation/index.html#workflows---overwrite-the-original-object",
    "href": "Lectures/04_Isolation/index.html#workflows---overwrite-the-original-object",
    "title": "Getting Started with dplyr",
    "section": "Workflows - Overwrite the Original Object",
    "text": "Workflows - Overwrite the Original Object\nWe could overwrite the original object which can reduce typing errors:\n\n # Little bunny Foo Foo\nfoo_foo &lt;- little_bunny()\n\n# Went hopping through the forest\nfoo_foo &lt;- hop(foo_foo, through = forest) \n\n# Scooping up the field mice\nfoo_foo &lt;- scoop(foo_foo, up = field_mice) \n\n# And bopping them on the head\nfoo_foo &lt;- bop(foo_foo, on = head) \n\n\nDebugging is painful and tedious; the pipeline has to be done de novo\nRepetition (7 foo_foos) obfuscates the code making it hard to follow",
    "crumbs": [
      "Home",
      "Lecture HTML",
      "04 - Data Isolation"
    ]
  },
  {
    "objectID": "Lectures/04_Isolation/index.html#workflows---functional-composition-nests",
    "href": "Lectures/04_Isolation/index.html#workflows---functional-composition-nests",
    "title": "Getting Started with dplyr",
    "section": "Workflows - Functional Composition Nests",
    "text": "Workflows - Functional Composition Nests\nAbandon assignment operations and just nest the functions together:\n\nbop(\n  scoop(\n    hop(\n      little_bunny(), # Little bunny Foo Foo\n      through = forest # Went hopping through the forest\n    ),\n    up = field_mice # Scooping up the field mice\n  ), \n  on = head # And bopping them on the head\n)\n\nOr as I would type…\n\n#Make pre-goon foo_foo\nfoo_foo &lt;- bop(scoop(hop(little_bunny(), through=forest), up=field_mice), on=head)\n\nNo one likes to read or type this (except Chad)",
    "crumbs": [
      "Home",
      "Lecture HTML",
      "04 - Data Isolation"
    ]
  },
  {
    "objectID": "Lectures/04_Isolation/index.html#workflows---the-pipe",
    "href": "Lectures/04_Isolation/index.html#workflows---the-pipe",
    "title": "Getting Started with dplyr",
    "section": "Workflows - The Pipe |>",
    "text": "Workflows - The Pipe |&gt;\nLast, we could use the pipe operator |&gt;:\n\nfoo_foo &lt;-\n  little_bunny() |&gt;          # Little bunny Foo Foo\n  hop(through = forest) |&gt;   # Went hopping through the forest\n  scoop(up = field_mice) |&gt;  # Scooping up the field mice\n  bop(on = head)             # And bopping them on the head\n\n. . .\nPros\n\nFocuses on the function verbs and not the object nouns\nUnlike the nested composition, this flows as a series of imperative actions: Foo Foo hops, then scoops, then bops",
    "crumbs": [
      "Home",
      "Lecture HTML",
      "04 - Data Isolation"
    ]
  },
  {
    "objectID": "Lectures/04_Isolation/index.html#workflows---the-pipe-1",
    "href": "Lectures/04_Isolation/index.html#workflows---the-pipe-1",
    "title": "Getting Started with dplyr",
    "section": "Workflows - The Pipe |>",
    "text": "Workflows - The Pipe |&gt;\nLast, we could use the pipe operator |&gt;:\n\nfoo_foo &lt;-\n  little_bunny() |&gt;          # Little bunny Foo Foo\n  hop(through = forest) |&gt;   # Went hopping through the forest\n  scoop(up = field_mice) |&gt;  # Scooping up the field mice\n  bop(on = head)             # And bopping them on the head\n\nCons\n\nIf you’ve never seen |&gt; before, you’ll have no idea what this code does\n\nLuckily, its behavior is intuitive which makes it very easy to share and describe to others",
    "crumbs": [
      "Home",
      "Lecture HTML",
      "04 - Data Isolation"
    ]
  },
  {
    "objectID": "Lectures/04_Isolation/index.html#workflows---so-whats-a-pipe",
    "href": "Lectures/04_Isolation/index.html#workflows---so-whats-a-pipe",
    "title": "Getting Started with dplyr",
    "section": "Workflows - So What’s a Pipe?",
    "text": "Workflows - So What’s a Pipe?\n\nSimply, a pipe takes the object on the left hand side and makes it the first argument for the function on the right hand side\n\n\n# Create a series of numbers and assign it to x\nx &lt;- 1:10\n\n# Now take the mean of x\nmean(x)\n\n[1] 5.5\n\n# This is equivalent to the above code\nx |&gt; mean()\n\n[1] 5.5\n\n\n\nWe call |&gt; a “pipe” since it literally pipes whatever is on the left into the first argument on the right",
    "crumbs": [
      "Home",
      "Lecture HTML",
      "04 - Data Isolation"
    ]
  },
  {
    "objectID": "Lectures/04_Isolation/index.html#workflows---so-whats-a-pipe-1",
    "href": "Lectures/04_Isolation/index.html#workflows---so-whats-a-pipe-1",
    "title": "Getting Started with dplyr",
    "section": "Workflows - So What’s a Pipe?",
    "text": "Workflows - So What’s a Pipe?\n\nMore broadly, the pipe makes these two snippets equivalent\n\n\n# Use the function and specify all arguments\nnifty_function(main_arg = xx, other_arg = yy, last_arg = zz)\n\n# Start with xx and pipe it into main_arg before executing the function\nxx |&gt; \n  nifty_function(other_arg = yy, last_arg = zz)\n\n\nNow we don’t need to specify a value for the main_arg argument since |&gt; automatically passes xx for us",
    "crumbs": [
      "Home",
      "Lecture HTML",
      "04 - Data Isolation"
    ]
  },
  {
    "objectID": "Lectures/04_Isolation/index.html#workflows---the-strength-of-the-pipe",
    "href": "Lectures/04_Isolation/index.html#workflows---the-strength-of-the-pipe",
    "title": "Getting Started with dplyr",
    "section": "Workflows - The Strength of the Pipe",
    "text": "Workflows - The Strength of the Pipe\n\nThe value is in making written code more human readable as you apply a series of functions\n\n\n# Using the functions like they're a matryoshka doll\nanother_neat_one(\n  nifty_function(main_arg = xx, other_arg = yy, last_arg = zz),\n  another_arg = ww\n)\n\n\n# Start with xx and then apply the functions in series\nxx |&gt; \n  nifty_function(other_arg = yy, last_arg = zz) |&gt; \n  another_neat_one(another_arg = ww)\n\n# Stylistic tip: end lines at the |&gt; \n\n\nThus avoids clunky temporary objects and densely nested functions",
    "crumbs": [
      "Home",
      "Lecture HTML",
      "04 - Data Isolation"
    ]
  },
  {
    "objectID": "Lectures/04_Isolation/index.html#workflows---when-not-to-pipe",
    "href": "Lectures/04_Isolation/index.html#workflows---when-not-to-pipe",
    "title": "Getting Started with dplyr",
    "section": "Workflows - When Not to Pipe",
    "text": "Workflows - When Not to Pipe\n\nIf your pipes are longer than ~5 steps use intermediate R objects with meaningful names\n\nThis will make debugging easier as you can troubleshoot the intermediary objects\nYour code will be more understandable; variable names can help communicate intent",
    "crumbs": [
      "Home",
      "Lecture HTML",
      "04 - Data Isolation"
    ]
  },
  {
    "objectID": "Lectures/04_Isolation/index.html#workflows---when-not-to-pipe-1",
    "href": "Lectures/04_Isolation/index.html#workflows---when-not-to-pipe-1",
    "title": "Getting Started with dplyr",
    "section": "Workflows - When Not to Pipe",
    "text": "Workflows - When Not to Pipe\n\nIf your pipes are longer than ~5 steps use intermediate R objects with meaningful names\nYou have multiple inputs or outputs being manipulated\n\nIf multiple objects are being coalesced, it is better to have parallel workflows that meet at the end\n\n\n\n\n\n\n\n\nWarning\n\n\n\nPipes can only ever pass one essential from left to right",
    "crumbs": [
      "Home",
      "Lecture HTML",
      "04 - Data Isolation"
    ]
  },
  {
    "objectID": "Lectures/04_Isolation/index.html#workflows---when-not-to-pipe-2",
    "href": "Lectures/04_Isolation/index.html#workflows---when-not-to-pipe-2",
    "title": "Getting Started with dplyr",
    "section": "Workflows - When Not to Pipe",
    "text": "Workflows - When Not to Pipe\n\nIf your pipes are longer than ~5 steps use intermediate R objects with meaningful names\nYou have multiple inputs or outputs being manipulated\nYour workflow has a complex dependency structure\n\nPipes are fundamentally linear and expressing complex relationships with them is generally confusing\nThey can behave very poorly under iterative (repeating) processes",
    "crumbs": [
      "Home",
      "Lecture HTML",
      "04 - Data Isolation"
    ]
  },
  {
    "objectID": "Lectures/04_Isolation/index.html#workflows---there-are-two-pipes",
    "href": "Lectures/04_Isolation/index.html#workflows---there-are-two-pipes",
    "title": "Getting Started with dplyr",
    "section": "Workflows - There are Two Pipes",
    "text": "Workflows - There are Two Pipes\n\nR introduced |&gt; as a native operator installed with R 4.1 in 2021\nThis was designed to supplant the %&gt;% operator which has been part of the tidyverse since the end of 2013 in the magrittr package\n\n\n\n\nThey are largely functionally identical although |&gt; is more limited than %&gt;%\n%&gt;% is still used and you will almost certainly see it in code\nBoth have R version dependencies:%&gt;% R&gt;=3.5 and |&gt; R&gt;=4.1",
    "crumbs": [
      "Home",
      "Lecture HTML",
      "04 - Data Isolation"
    ]
  },
  {
    "objectID": "Lectures/04_Isolation/index.html#isolation---dplyr-functions",
    "href": "Lectures/04_Isolation/index.html#isolation---dplyr-functions",
    "title": "Getting Started with dplyr",
    "section": "Isolation - dplyr Functions",
    "text": "Isolation - dplyr Functions\n\ndplyr has several functions to make data frame isolation easier\n\nfilter() will subset a data frame by rows\nselect() instead subsets a data frame by columns\narrange() let’s you reorganize a data frame according to row\n\nImportantly, the row functions do not alter your columns and column functions do not alter rows\nAs part of the tidyverse, these dplyr functions will always return the same type of output as their original input e.g. start with a data frame and end with a data frame",
    "crumbs": [
      "Home",
      "Lecture HTML",
      "04 - Data Isolation"
    ]
  },
  {
    "objectID": "Lectures/04_Isolation/index.html#isolation---before-you-subset-your-data",
    "href": "Lectures/04_Isolation/index.html#isolation---before-you-subset-your-data",
    "title": "Getting Started with dplyr",
    "section": "Isolation - Before You Subset Your Data",
    "text": "Isolation - Before You Subset Your Data\n\n\n\n\n\n\n\nImportant\n\n\n\nWHEN SUBSETTING, ALWAYS MAKE A NEW OBJECT!!NEVER OVERWRITE YOUR SOURCE DATA!!\n\n\n\n\nLet’s try to work with the NHANES data set",
    "crumbs": [
      "Home",
      "Lecture HTML",
      "04 - Data Isolation"
    ]
  },
  {
    "objectID": "Lectures/04_Isolation/index.html#isolation---recall-the-reduced-nhanes-data",
    "href": "Lectures/04_Isolation/index.html#isolation---recall-the-reduced-nhanes-data",
    "title": "Getting Started with dplyr",
    "section": "Isolation - Recall the Reduced NHANES Data",
    "text": "Isolation - Recall the Reduced NHANES Data\n\n\n# A tibble: 20 × 6\n    exam   age sex    bp_sys_mmhg n_msr_sbp bp_meds\n   &lt;dbl&gt; &lt;dbl&gt; &lt;chr&gt;        &lt;dbl&gt;     &lt;dbl&gt; &lt;chr&gt;  \n 1  1999    77 Male         101.          3 No     \n 2  1999    49 Male         122           3 Yes    \n 3  2001    39 Male         125.          3 No     \n 4  2001    23 Male         103.          3 No     \n 5  2003    16 Female        98.7         3 No     \n 6  2003    17 Male         103           2 No     \n 7  2005    44 Female       139.          3 Yes    \n 8  2005    70 Male         131.          3 Yes    \n 9  2007    62 Female       123.          3 Yes    \n10  2007    71 Male         145.          3 Yes    \n11  2009    34 Male         113.          3 No     \n12  2009    16 Male         110           3 No     \n13  2011    22 Male         111.          3 No     \n14  2011    44 Female       118           3 No     \n15  2013    69 Male         113.          3 No     \n16  2013    54 Male         157.          3 No     \n17  2015    62 Male         123.          3 No     \n18  2015    53 Male         140           3 No     \n19  2017    66 Female       200           2 Yes    \n20  2017    18 Male         111.          3 No",
    "crumbs": [
      "Home",
      "Lecture HTML",
      "04 - Data Isolation"
    ]
  },
  {
    "objectID": "Lectures/04_Isolation/index.html#isolation---filter",
    "href": "Lectures/04_Isolation/index.html#isolation---filter",
    "title": "Getting Started with dplyr",
    "section": "Isolation - filter()",
    "text": "Isolation - filter()\n\nfilter() keeps rows that match specified conditions\nIt takes a data frame as the first argument followed by an expression that can resolve to a logical vector\nThe logical vector uses common operators like &lt;, &gt;, ==, and !=\nMultiple logical expressions on multiple columns can be used with set operators like &, |, and !\n\nQuestion:In NHANES, how many males were taking medications to lower blood pressure?",
    "crumbs": [
      "Home",
      "Lecture HTML",
      "04 - Data Isolation"
    ]
  },
  {
    "objectID": "Lectures/04_Isolation/index.html#isolation---filter-in-nhanes",
    "href": "Lectures/04_Isolation/index.html#isolation---filter-in-nhanes",
    "title": "Getting Started with dplyr",
    "section": "Isolation - filter() in NHANES",
    "text": "Isolation - filter() in NHANES\n\nFirst filter to only males\n\n\nmales &lt;- filter(nhanes, sex == 'Male') #&lt;&lt;\nmales_bp_meds &lt;- filter(males, bp_meds == 'Yes')\nanswer &lt;- nrow(males_bp_meds)\n\n\n\n# A tibble: 15 × 6\n    exam   age sex   bp_sys_mmhg n_msr_sbp bp_meds\n   &lt;dbl&gt; &lt;dbl&gt; &lt;chr&gt;       &lt;dbl&gt;     &lt;dbl&gt; &lt;chr&gt;  \n 1  1999    77 Male         101.         3 No     \n 2  1999    49 Male         122          3 Yes    \n 3  2001    39 Male         125.         3 No     \n 4  2001    23 Male         103.         3 No     \n 5  2003    17 Male         103          2 No     \n 6  2005    70 Male         131.         3 Yes    \n 7  2007    71 Male         145.         3 Yes    \n 8  2009    34 Male         113.         3 No     \n 9  2009    16 Male         110          3 No     \n10  2011    22 Male         111.         3 No     \n11  2013    69 Male         113.         3 No     \n12  2013    54 Male         157.         3 No     \n13  2015    62 Male         123.         3 No     \n14  2015    53 Male         140          3 No     \n15  2017    18 Male         111.         3 No",
    "crumbs": [
      "Home",
      "Lecture HTML",
      "04 - Data Isolation"
    ]
  },
  {
    "objectID": "Lectures/04_Isolation/index.html#isolation---filter-in-nhanes-1",
    "href": "Lectures/04_Isolation/index.html#isolation---filter-in-nhanes-1",
    "title": "Getting Started with dplyr",
    "section": "Isolation - filter() in NHANES",
    "text": "Isolation - filter() in NHANES\n\nThen only those males on BP medication\n\n\nmales &lt;- filter(nhanes, sex == 'Male') \nmales_bp_meds &lt;- filter(males, bp_meds == 'Yes') #&lt;&lt;\nanswer &lt;- nrow(males_bp_meds)\n\n\n\n# A tibble: 3 × 6\n   exam   age sex   bp_sys_mmhg n_msr_sbp bp_meds\n  &lt;dbl&gt; &lt;dbl&gt; &lt;chr&gt;       &lt;dbl&gt;     &lt;dbl&gt; &lt;chr&gt;  \n1  1999    49 Male         122          3 Yes    \n2  2005    70 Male         131.         3 Yes    \n3  2007    71 Male         145.         3 Yes",
    "crumbs": [
      "Home",
      "Lecture HTML",
      "04 - Data Isolation"
    ]
  },
  {
    "objectID": "Lectures/04_Isolation/index.html#isolation---filter-in-nhanes-2",
    "href": "Lectures/04_Isolation/index.html#isolation---filter-in-nhanes-2",
    "title": "Getting Started with dplyr",
    "section": "Isolation - filter() in NHANES",
    "text": "Isolation - filter() in NHANES\n\nUse nrow() to get the number of rows in the filtered set\n\n\nmales &lt;- filter(nhanes, sex == 'Male') \nmales_bp_meds &lt;- filter(males, bp_meds == 'Yes') \nanswer &lt;- nrow(males_bp_meds) #&lt;&lt;\n\n\n\nanswer\n\n[1] 3\n\n\n\nNow let’s clean up the workflow",
    "crumbs": [
      "Home",
      "Lecture HTML",
      "04 - Data Isolation"
    ]
  },
  {
    "objectID": "Lectures/04_Isolation/index.html#isolation---filter-with-a-pipe-solution",
    "href": "Lectures/04_Isolation/index.html#isolation---filter-with-a-pipe-solution",
    "title": "Getting Started with dplyr",
    "section": "Isolation - filter() with a Pipe Solution",
    "text": "Isolation - filter() with a Pipe Solution\n\nanswer &lt;- \n  nhanes |&gt; \n  filter(sex == 'Male' & bp_meds == 'Yes') |&gt; \n  nrow()\n\nanswer\n\n[1] 3\n\n\n\nTo create the answer,\n\nStart with nhanes, THEN\nFilter to contain only males on BP meds, THEN\nCount the number of rows which were left over",
    "crumbs": [
      "Home",
      "Lecture HTML",
      "04 - Data Isolation"
    ]
  },
  {
    "objectID": "Lectures/04_Isolation/index.html#isolation---other-dplyr-functions",
    "href": "Lectures/04_Isolation/index.html#isolation---other-dplyr-functions",
    "title": "Getting Started with dplyr",
    "section": "Isolation - Other dplyr functions",
    "text": "Isolation - Other dplyr functions\n\nselect() extracts columns from a data set; it’s like $ but much more versatile and consistent e.g. it won’t return a vector\narrange() will sort a data frame row-wise by a specified column / variable; can wrap the variable in desc() for descending order\nslice() and its relatives index rows by their location; again like [] but more consistent and versatile\nThe full list of dplyr functions can be found on the package’s help page\n\nNext question:In NHANES, what was the highest systolic blood pressure in males?",
    "crumbs": [
      "Home",
      "Lecture HTML",
      "04 - Data Isolation"
    ]
  },
  {
    "objectID": "Lectures/04_Isolation/index.html#isolation---nhanes-highest-bp-in-males",
    "href": "Lectures/04_Isolation/index.html#isolation---nhanes-highest-bp-in-males",
    "title": "Getting Started with dplyr",
    "section": "Isolation - NHANES Highest BP in Males",
    "text": "Isolation - NHANES Highest BP in Males\nStart with NHANES and begin piping |&gt;\n\nnhanes |&gt; #&lt;&lt;\n  filter(sex == 'Male') |&gt; \n  arrange(desc(bp_sys_mmhg)) |&gt; \n  select(bp_sys_mmhg) |&gt; \n  slice(1) |&gt; \n  as.numeric()\n\n\n\n# A tibble: 20 × 6\n    exam   age sex    bp_sys_mmhg n_msr_sbp bp_meds\n   &lt;dbl&gt; &lt;dbl&gt; &lt;chr&gt;        &lt;dbl&gt;     &lt;dbl&gt; &lt;chr&gt;  \n 1  1999    77 Male         101.          3 No     \n 2  1999    49 Male         122           3 Yes    \n 3  2001    39 Male         125.          3 No     \n 4  2001    23 Male         103.          3 No     \n 5  2003    16 Female        98.7         3 No     \n 6  2003    17 Male         103           2 No     \n 7  2005    44 Female       139.          3 Yes    \n 8  2005    70 Male         131.          3 Yes    \n 9  2007    62 Female       123.          3 Yes    \n10  2007    71 Male         145.          3 Yes    \n11  2009    34 Male         113.          3 No     \n12  2009    16 Male         110           3 No     \n13  2011    22 Male         111.          3 No     \n14  2011    44 Female       118           3 No     \n15  2013    69 Male         113.          3 No     \n16  2013    54 Male         157.          3 No     \n17  2015    62 Male         123.          3 No     \n18  2015    53 Male         140           3 No     \n19  2017    66 Female       200           2 Yes    \n20  2017    18 Male         111.          3 No",
    "crumbs": [
      "Home",
      "Lecture HTML",
      "04 - Data Isolation"
    ]
  },
  {
    "objectID": "Lectures/04_Isolation/index.html#isolation---nhanes-highest-bp-in-males-1",
    "href": "Lectures/04_Isolation/index.html#isolation---nhanes-highest-bp-in-males-1",
    "title": "Getting Started with dplyr",
    "section": "Isolation - NHANES Highest BP in Males",
    "text": "Isolation - NHANES Highest BP in Males\nApply filter() on the column sex to return only males\n\nnhanes |&gt; \n  filter(sex == 'Male') |&gt; #&lt;&lt;\n  arrange(desc(bp_sys_mmhg)) |&gt; \n  select(bp_sys_mmhg) |&gt; \n  slice(1) |&gt; \n  as.numeric()\n\n\n\n# A tibble: 15 × 6\n    exam   age sex   bp_sys_mmhg n_msr_sbp bp_meds\n   &lt;dbl&gt; &lt;dbl&gt; &lt;chr&gt;       &lt;dbl&gt;     &lt;dbl&gt; &lt;chr&gt;  \n 1  1999    77 Male         101.         3 No     \n 2  1999    49 Male         122          3 Yes    \n 3  2001    39 Male         125.         3 No     \n 4  2001    23 Male         103.         3 No     \n 5  2003    17 Male         103          2 No     \n 6  2005    70 Male         131.         3 Yes    \n 7  2007    71 Male         145.         3 Yes    \n 8  2009    34 Male         113.         3 No     \n 9  2009    16 Male         110          3 No     \n10  2011    22 Male         111.         3 No     \n11  2013    69 Male         113.         3 No     \n12  2013    54 Male         157.         3 No     \n13  2015    62 Male         123.         3 No     \n14  2015    53 Male         140          3 No     \n15  2017    18 Male         111.         3 No",
    "crumbs": [
      "Home",
      "Lecture HTML",
      "04 - Data Isolation"
    ]
  },
  {
    "objectID": "Lectures/04_Isolation/index.html#isolation---nhanes-highest-bp-in-males-2",
    "href": "Lectures/04_Isolation/index.html#isolation---nhanes-highest-bp-in-males-2",
    "title": "Getting Started with dplyr",
    "section": "Isolation - NHANES Highest BP in Males",
    "text": "Isolation - NHANES Highest BP in Males\nUse arrange() to sort the filtered set for descending by systolic BP\n\nnhanes |&gt; \n  filter(sex == 'Male') |&gt; \n  arrange(desc(bp_sys_mmhg)) |&gt; #&lt;&lt;\n  select(bp_sys_mmhg) |&gt; \n  slice(1) |&gt; \n  as.numeric()\n\n\n\n# A tibble: 15 × 6\n    exam   age sex   bp_sys_mmhg n_msr_sbp bp_meds\n   &lt;dbl&gt; &lt;dbl&gt; &lt;chr&gt;       &lt;dbl&gt;     &lt;dbl&gt; &lt;chr&gt;  \n 1  2013    54 Male         157.         3 No     \n 2  2007    71 Male         145.         3 Yes    \n 3  2015    53 Male         140          3 No     \n 4  2005    70 Male         131.         3 Yes    \n 5  2001    39 Male         125.         3 No     \n 6  2015    62 Male         123.         3 No     \n 7  1999    49 Male         122          3 Yes    \n 8  2009    34 Male         113.         3 No     \n 9  2013    69 Male         113.         3 No     \n10  2017    18 Male         111.         3 No     \n11  2011    22 Male         111.         3 No     \n12  2009    16 Male         110          3 No     \n13  2001    23 Male         103.         3 No     \n14  2003    17 Male         103          2 No     \n15  1999    77 Male         101.         3 No",
    "crumbs": [
      "Home",
      "Lecture HTML",
      "04 - Data Isolation"
    ]
  },
  {
    "objectID": "Lectures/04_Isolation/index.html#isolation---nhanes-highest-bp-in-males-3",
    "href": "Lectures/04_Isolation/index.html#isolation---nhanes-highest-bp-in-males-3",
    "title": "Getting Started with dplyr",
    "section": "Isolation - NHANES Highest BP in Males",
    "text": "Isolation - NHANES Highest BP in Males\nUse select() to extract the bp_sys_mmhg column of interest\n\nnhanes |&gt; \n  filter(sex == 'Male') |&gt; \n  arrange(desc(bp_sys_mmhg)) |&gt; \n  select(bp_sys_mmhg) |&gt; #&lt;&lt;\n  slice(1) |&gt; \n  as.numeric()\n\n\n\n# A tibble: 15 × 1\n   bp_sys_mmhg\n         &lt;dbl&gt;\n 1        157.\n 2        145.\n 3        140 \n 4        131.\n 5        125.\n 6        123.\n 7        122 \n 8        113.\n 9        113.\n10        111.\n11        111.\n12        110 \n13        103.\n14        103 \n15        101.",
    "crumbs": [
      "Home",
      "Lecture HTML",
      "04 - Data Isolation"
    ]
  },
  {
    "objectID": "Lectures/04_Isolation/index.html#isolation---nhanes-highest-bp-in-males-4",
    "href": "Lectures/04_Isolation/index.html#isolation---nhanes-highest-bp-in-males-4",
    "title": "Getting Started with dplyr",
    "section": "Isolation - NHANES Highest BP in Males",
    "text": "Isolation - NHANES Highest BP in Males\nWith slice() index out the 1st row which is the highest systolic BP\n\nnhanes |&gt; \n  filter(sex == 'Male') |&gt; \n  arrange(desc(bp_sys_mmhg)) |&gt; \n  select(bp_sys_mmhg) |&gt; \n  slice(1) |&gt; #&lt;&lt;\n  as.numeric()\n\n\n\n# A tibble: 1 × 1\n  bp_sys_mmhg\n        &lt;dbl&gt;\n1        157.",
    "crumbs": [
      "Home",
      "Lecture HTML",
      "04 - Data Isolation"
    ]
  },
  {
    "objectID": "Lectures/04_Isolation/index.html#isolation---nhanes-highest-bp-in-males-5",
    "href": "Lectures/04_Isolation/index.html#isolation---nhanes-highest-bp-in-males-5",
    "title": "Getting Started with dplyr",
    "section": "Isolation - NHANES Highest BP in Males",
    "text": "Isolation - NHANES Highest BP in Males\nSince the output has remained a consistent tibble, coerce it to numeric\n\nnhanes |&gt;\n  filter(sex == 'Male') |&gt; \n  arrange(desc(bp_sys_mmhg)) |&gt; \n  select(bp_sys_mmhg) |&gt; \n  slice(1) |&gt; \n  as.numeric() #&lt;&lt;\n\n\n\n[1] 157.3333",
    "crumbs": [
      "Home",
      "Lecture HTML",
      "04 - Data Isolation"
    ]
  },
  {
    "objectID": "Lectures/04_Isolation/index.html#isolation---common-logical-operators-in-r",
    "href": "Lectures/04_Isolation/index.html#isolation---common-logical-operators-in-r",
    "title": "Getting Started with dplyr",
    "section": "Isolation - Common Logical Operators in R",
    "text": "Isolation - Common Logical Operators in R\n\n\n\n\n\n\n\n\n\n\nOperator\nDefinition\nOperator\nDefinition\n\n\n\n\n&lt;\nless than\nx | y\nx OR y\n\n\n&lt;=\nless than or equal to\nis.na(x)\ntest if x is NA\n\n\n&gt;\ngreater than\n!is.na(x)\ntest if x is not NA\n\n\n&gt;=\ngreater than or equal to\nx %in% y\ntest if x is in y\n\n\n==\nexactly equal to\n!(x %in% y)\ntest if x is not in y\n\n\n!=\nnot equal to\n!x\nnot x\n\n\n&\nand\nx & y\nx AND y\n\n\n\n\n%in% is a new, but powerful, operator\nx == \"value1\" | x == \"value2\" is equivalent tox %in% c(\"value1\", \"value2\")",
    "crumbs": [
      "Home",
      "Lecture HTML",
      "04 - Data Isolation"
    ]
  },
  {
    "objectID": "Lectures/04_Isolation/index.html#tidy-evaluation-1",
    "href": "Lectures/04_Isolation/index.html#tidy-evaluation-1",
    "title": "Getting Started with dplyr",
    "section": "Tidy Evaluation",
    "text": "Tidy Evaluation\n\nThe tidyverse makes extensive use of tidy evaluation which dictates how most functions access variables within a data frame\nThere are two main variants, data masking and tidy selection\nWhen you check tidyverse function documentations you can look for &lt;data-masking&gt; or &lt;tidy-select&gt; to see which flavor you can use",
    "crumbs": [
      "Home",
      "Lecture HTML",
      "04 - Data Isolation"
    ]
  },
  {
    "objectID": "Lectures/04_Isolation/index.html#tidy-evaluation-2",
    "href": "Lectures/04_Isolation/index.html#tidy-evaluation-2",
    "title": "Getting Started with dplyr",
    "section": "Tidy Evaluation",
    "text": "Tidy Evaluation\n\nData masking - as seen with filter() and arrange(), you can use data frame variable as if they were variables in the global environment\n\nInstead of data_frame$my_var you can use my_var within tidyverse functions as is and without quotes\n\nTidy selection - so far only seen with select() but allows you to choose variables based on position, name, or type, for example…\n\nselect(df, 1) selects the first column (position/indexing)\nselect(df, c(a, b, c)) selects columns a, b, and c\nselect(df, where(is.numeric)) selects all numeric columns",
    "crumbs": [
      "Home",
      "Lecture HTML",
      "04 - Data Isolation"
    ]
  },
  {
    "objectID": "Lectures/04_Isolation/index.html#next-time---more-on-dplyr",
    "href": "Lectures/04_Isolation/index.html#next-time---more-on-dplyr",
    "title": "Getting Started with dplyr",
    "section": "Next Time - More on dplyr",
    "text": "Next Time - More on dplyr\n\nWorking with dplyr functions to organize, transform, summarize, and create new data\n\ngroup_by() to divide a data set into groups\nsummarize() for aggregated measures like sum, mean, etc\nmutate() to transform old columns into new ones\n\nContinuing to build workflows and comments on style and organization\nStill focused on chapter 3 in R4DS\nContinue to go through the recipes under Transform Tables onPosit Cloud",
    "crumbs": [
      "Home",
      "Lecture HTML",
      "04 - Data Isolation"
    ]
  },
  {
    "objectID": "Lectures/02_VizBasics/index.html",
    "href": "Lectures/02_VizBasics/index.html",
    "title": "Basics of Data Visualization",
    "section": "",
    "text": "Tips on getting help (reprex)\nData frames 101\nExploratory data analysis\nData visualization using ggplot2\nVisualizing Star Wars\nAesthetics\nUpcoming visualization topics",
    "crumbs": [
      "Home",
      "Lecture HTML",
      "02 - Visualization Basics"
    ]
  },
  {
    "objectID": "Lectures/02_VizBasics/index.html#agenda",
    "href": "Lectures/02_VizBasics/index.html#agenda",
    "title": "Basics of Data Visualization",
    "section": "",
    "text": "Tips on getting help (reprex)\nData frames 101\nExploratory data analysis\nData visualization using ggplot2\nVisualizing Star Wars\nAesthetics\nUpcoming visualization topics",
    "crumbs": [
      "Home",
      "Lecture HTML",
      "02 - Visualization Basics"
    ]
  },
  {
    "objectID": "Lectures/02_VizBasics/index.html#what-is-reprex",
    "href": "Lectures/02_VizBasics/index.html#what-is-reprex",
    "title": "Basics of Data Visualization",
    "section": "What is reprex?",
    "text": "What is reprex?\nreprex stands for reproducible example; The reprex R package helps create reproducible examples for posts on GitHub, StackOverflow, etc.\n. . .\n\n\nWhen seeking help for a programming problem…\n\nbreak the problem down to its essential components\nkeep the code minimal, not overwhelming\ndescribe issues concisely but clearly\n\n\n\n\n\n\n\n\n\n\nFor getting started check out the reprex site or the reprex_example in this project Posit cloud",
    "crumbs": [
      "Home",
      "Lecture HTML",
      "02 - Visualization Basics"
    ]
  },
  {
    "objectID": "Lectures/02_VizBasics/index.html#data-frames---the-basics",
    "href": "Lectures/02_VizBasics/index.html#data-frames---the-basics",
    "title": "Basics of Data Visualization",
    "section": "Data Frames - The Basics",
    "text": "Data Frames - The Basics\n\nLast time we talked about objects in R that store data\n\n. . .\n\nMost frequently we’ll be working with data frames\nSome standard data frame properties in R:\n\nPlace variables in columns\nHave observations as rows\nAre rectangular such that…\n\nall columns are equal length\nall rows are equal length",
    "crumbs": [
      "Home",
      "Lecture HTML",
      "02 - Visualization Basics"
    ]
  },
  {
    "objectID": "Lectures/02_VizBasics/index.html#data-frames---some-definitions",
    "href": "Lectures/02_VizBasics/index.html#data-frames---some-definitions",
    "title": "Basics of Data Visualization",
    "section": "Data Frames - Some Definitions",
    "text": "Data Frames - Some Definitions\n\nA variable is some sort of quality, quantity or property of the data\nVariables are comprised of values which are specific instances or measures of a variable\nAn observation is a set of measurements under similar conditions, it can be thought of as a unique set of values specific to those conditions\nTabular data takes a set of values each associated with a variable and an observation and gives a rectangular structure\nThe tidyverse calls this tabular data tidy when each value is its own cell, each variable is its own column, each observation is its own row",
    "crumbs": [
      "Home",
      "Lecture HTML",
      "02 - Visualization Basics"
    ]
  },
  {
    "objectID": "Lectures/02_VizBasics/index.html#data-frames---tidy-data-example",
    "href": "Lectures/02_VizBasics/index.html#data-frames---tidy-data-example",
    "title": "Basics of Data Visualization",
    "section": "Data Frames - Tidy Data Example",
    "text": "Data Frames - Tidy Data Example\n\n\n\n\n\n\n\n\n\n\n\nNote\n\n\n\nTidy data can allow for missing values, you’ll see these as NA or &lt;NA&gt;\n\n\nWe’ll talk about accessing this data next week",
    "crumbs": [
      "Home",
      "Lecture HTML",
      "02 - Visualization Basics"
    ]
  },
  {
    "objectID": "Lectures/02_VizBasics/index.html#eda---what-is-it",
    "href": "Lectures/02_VizBasics/index.html#eda---what-is-it",
    "title": "Basics of Data Visualization",
    "section": "EDA - What is it?",
    "text": "EDA - What is it?\n\nProcedures to initially investigate data by analyzing and focusing on its main characteristics\n\n. . .\n\nThe easiest point of entry is visualization, our focus of today\n\n. . .\n\nSummarization is another method but that will come later since it involves:\n\ndata isolation (coming soon)\ndata transformation (after isolation)\ndownstream data processing (after transformation)",
    "crumbs": [
      "Home",
      "Lecture HTML",
      "02 - Visualization Basics"
    ]
  },
  {
    "objectID": "Lectures/02_VizBasics/index.html#eda---what-collaborators-think-it-does",
    "href": "Lectures/02_VizBasics/index.html#eda---what-collaborators-think-it-does",
    "title": "Basics of Data Visualization",
    "section": "EDA - What Collaborators Think it Does",
    "text": "EDA - What Collaborators Think it Does",
    "crumbs": [
      "Home",
      "Lecture HTML",
      "02 - Visualization Basics"
    ]
  },
  {
    "objectID": "Lectures/02_VizBasics/index.html#eda---what-it-actually-does",
    "href": "Lectures/02_VizBasics/index.html#eda---what-it-actually-does",
    "title": "Basics of Data Visualization",
    "section": "EDA - What it Actually Does",
    "text": "EDA - What it Actually Does\nEDA should always be your first pass at data analysis\n\nGives a basic understanding of structure and organization\nHelps spot anomalies that are both real (outliers) or imaginary (errors)\nChecks basic assumptions that precede formal analysis\nDetermine missingness of key variables\nIt gets you familiar with your data which enhances communication\n\nVisualization is a great form of EDA",
    "crumbs": [
      "Home",
      "Lecture HTML",
      "02 - Visualization Basics"
    ]
  },
  {
    "objectID": "Lectures/02_VizBasics/index.html#data-visualization-1",
    "href": "Lectures/02_VizBasics/index.html#data-visualization-1",
    "title": "Basics of Data Visualization",
    "section": "Data Visualization",
    "text": "Data Visualization\n\n“The simple graph has brought more information to the data analyst’s mind than any other device” — John Tukey”\n\n\nData visualization is the creation and study of some sort of visual representation of data\nThere are many tools for visualizing data, including R\nWithin R there are many approaches/systems for making data visualizations, ggplot2 will be our system of choice",
    "crumbs": [
      "Home",
      "Lecture HTML",
      "02 - Visualization Basics"
    ]
  },
  {
    "objectID": "Lectures/02_VizBasics/index.html#about-ggplot2",
    "href": "Lectures/02_VizBasics/index.html#about-ggplot2",
    "title": "Basics of Data Visualization",
    "section": "About ggplot2",
    "text": "About ggplot2\n\nggplot2 is the name of the package and gets loaded with a library call to gain access to its functions\nThe gg in “ggplot2” stands for Grammar of Graphics\nInspired by the book Grammar of Graphics by Leland Wilkinson\nggplot() is the main backbone function in ggplot2 i.e. it gives your blank plot canvas\nGraphic specification and customization is layered in using the plus operator (+) followed by supporting ggplot2 functions",
    "crumbs": [
      "Home",
      "Lecture HTML",
      "02 - Visualization Basics"
    ]
  },
  {
    "objectID": "Lectures/02_VizBasics/index.html#getting-help-with-ggplot2",
    "href": "Lectures/02_VizBasics/index.html#getting-help-with-ggplot2",
    "title": "Basics of Data Visualization",
    "section": "Getting Help with ggplot2",
    "text": "Getting Help with ggplot2\n\n\n\n\n\n\nFor help with ggplot2, see http://ggplot2.tidyverse.org/\n\nA cheat sheet can be found right on the front page along with a reference guide\n\nIn R4DS this is covered in chapter 1 as an introduction followed by more in-depth customization in chapters 9 and 11",
    "crumbs": [
      "Home",
      "Lecture HTML",
      "02 - Visualization Basics"
    ]
  },
  {
    "objectID": "Lectures/02_VizBasics/index.html#data-visualization-with-ggplot2",
    "href": "Lectures/02_VizBasics/index.html#data-visualization-with-ggplot2",
    "title": "Basics of Data Visualization",
    "section": "Data Visualization with ggplot2",
    "text": "Data Visualization with ggplot2\nIn its simplest form, code for ggplot has three basic components:\n\n\nA data argument which indicates what dataset is being visualized\nAn aesthetics function using aes() which indicates how variables from the dataset are mapped to your plot\nFor example, you define what variables map to the x-axis and y-axis\nOne or more geoms which define the geometrical objects that graphically represent the data\n\n\n. . .\nAfterwards, additional customizations can be added in as desired\n. . .\nAgain, we add in additional customizations (or even extra geoms) using +",
    "crumbs": [
      "Home",
      "Lecture HTML",
      "02 - Visualization Basics"
    ]
  },
  {
    "objectID": "Lectures/02_VizBasics/index.html#data-visualization-with-ggplot2---the-code",
    "href": "Lectures/02_VizBasics/index.html#data-visualization-with-ggplot2---the-code",
    "title": "Basics of Data Visualization",
    "section": "Data Visualization with ggplot2 - The Code",
    "text": "Data Visualization with ggplot2 - The Code\nAltogether, this gives a basic code format that looks like this:\n. . .\n\n#Make a ggplot call and define your dataset\nggplot(data = dataset) +\n  #Define your aesthetics mapping\n  aes(x = x_variable, y = y_variable) +\n  #Define your graphical primitivies aka the geoms\n  geom_xxx() +\n  #Add other ggplot2 functionality as needed\n  other_functions()\n\n. . .\n\n\n\n\n\n\nTip\n\n\n\nThe aes() portion is often placed inside ggplot() or geom_xxx() calls via the mapping argument\n\nggplot2(data = dataset, mapping = aes(x = x_variable, y = y_variable))",
    "crumbs": [
      "Home",
      "Lecture HTML",
      "02 - Visualization Basics"
    ]
  },
  {
    "objectID": "Lectures/02_VizBasics/index.html#data-visualization-in-r4ds---palmer-penguins",
    "href": "Lectures/02_VizBasics/index.html#data-visualization-in-r4ds---palmer-penguins",
    "title": "Basics of Data Visualization",
    "section": "Data Visualization in R4DS - Palmer Penguins",
    "text": "Data Visualization in R4DS - Palmer Penguins\nR4DS gives an example ggplot2 build using Palmer Penguins\n\n#ggplot() call only\n\nggplot(\n  data = penguins\n  )\n\n\n\n\n\n\n\n\n\n1. Beginning with the “blank canvas” of the plot",
    "crumbs": [
      "Home",
      "Lecture HTML",
      "02 - Visualization Basics"
    ]
  },
  {
    "objectID": "Lectures/02_VizBasics/index.html#data-visualization-in-r4ds---palmer-penguins-1",
    "href": "Lectures/02_VizBasics/index.html#data-visualization-in-r4ds---palmer-penguins-1",
    "title": "Basics of Data Visualization",
    "section": "Data Visualization in R4DS - Palmer Penguins",
    "text": "Data Visualization in R4DS - Palmer Penguins\nR4DS gives an example ggplot2 build using Palmer Penguins\n\n#Define aes() mapping\n\nggplot(\n  data = penguins,\n  mapping = aes(\n    x = flipper_length_mm, \n    y = body_mass_g)\n  )\n\n\n\n\n\n\n\n\n\n2. Adding in the aesthetics mapping for the x and y-axis",
    "crumbs": [
      "Home",
      "Lecture HTML",
      "02 - Visualization Basics"
    ]
  },
  {
    "objectID": "Lectures/02_VizBasics/index.html#data-visualization-in-r4ds---palmer-penguins-2",
    "href": "Lectures/02_VizBasics/index.html#data-visualization-in-r4ds---palmer-penguins-2",
    "title": "Basics of Data Visualization",
    "section": "Data Visualization in R4DS - Palmer Penguins",
    "text": "Data Visualization in R4DS - Palmer Penguins\nR4DS gives an example ggplot2 build using Palmer Penguins\n\n#Add geom_point()\n\nggplot(\n  data = penguins,\n  mapping = aes(\n    x = flipper_length_mm, \n    y = body_mass_g)\n  ) +\n  geom_point()\n\n\n\n\n\n\n\n\n\n3. Finally defining points as the geometric objects to get a scatterplot",
    "crumbs": [
      "Home",
      "Lecture HTML",
      "02 - Visualization Basics"
    ]
  },
  {
    "objectID": "Lectures/02_VizBasics/index.html#eda-on-star-wars",
    "href": "Lectures/02_VizBasics/index.html#eda-on-star-wars",
    "title": "Basics of Data Visualization",
    "section": "EDA on Star Wars",
    "text": "EDA on Star Wars\n\nMany packages have datasets readily available; you can check what’s in base R with data()\nThe dplyr package has one dataset on Star Wars characters\nOnce we load dplyr we have he starwars tibble accessible in our environment",
    "crumbs": [
      "Home",
      "Lecture HTML",
      "02 - Visualization Basics"
    ]
  },
  {
    "objectID": "Lectures/02_VizBasics/index.html#star-wars---begin-by-looking-at-the-data",
    "href": "Lectures/02_VizBasics/index.html#star-wars---begin-by-looking-at-the-data",
    "title": "Basics of Data Visualization",
    "section": "Star Wars - Begin by Looking at the Data",
    "text": "Star Wars - Begin by Looking at the Data\n\n\nstarwars is a tibble, a special type of data frame that’s tidy\n\n\n\n#The object starwars is both a \"data.frame\" (data frame) and a \"tbl\" (tibble)\nclass(starwars)\n#&gt; [1] \"tbl_df\"     \"tbl\"        \"data.frame\"\n\n\n\nPrinting a tibble to the console gives expanded dataset information\n\n\n\n\n# A tibble: 87 × 14\n  name      height  mass hair_color skin_color eye_color birth_year sex   gender\n  &lt;chr&gt;      &lt;int&gt; &lt;dbl&gt; &lt;chr&gt;      &lt;chr&gt;      &lt;chr&gt;          &lt;dbl&gt; &lt;chr&gt; &lt;chr&gt; \n1 Luke Sky…    172    77 blond      fair       blue            19   male  mascu…\n2 C-3PO        167    75 &lt;NA&gt;       gold       yellow         112   none  mascu…\n3 R2-D2         96    32 &lt;NA&gt;       white, bl… red             33   none  mascu…\n4 Darth Va…    202   136 none       white      yellow          41.9 male  mascu…\n5 Leia Org…    150    49 brown      light      brown           19   fema… femin…\n# ℹ 82 more rows\n# ℹ 5 more variables: homeworld &lt;chr&gt;, species &lt;chr&gt;, films &lt;list&gt;,\n#   vehicles &lt;list&gt;, starships &lt;list&gt;",
    "crumbs": [
      "Home",
      "Lecture HTML",
      "02 - Visualization Basics"
    ]
  },
  {
    "objectID": "Lectures/02_VizBasics/index.html#star-wars---whats-in-the-data-set",
    "href": "Lectures/02_VizBasics/index.html#star-wars---whats-in-the-data-set",
    "title": "Basics of Data Visualization",
    "section": "Star Wars - What’s in the Data Set?",
    "text": "Star Wars - What’s in the Data Set?\n\n\n\n\n\n\n\nWhat does each row represent?   What does each column represent?",
    "crumbs": [
      "Home",
      "Lecture HTML",
      "02 - Visualization Basics"
    ]
  },
  {
    "objectID": "Lectures/02_VizBasics/index.html#star-wars---luke-skywalker-observation-1",
    "href": "Lectures/02_VizBasics/index.html#star-wars---luke-skywalker-observation-1",
    "title": "Basics of Data Visualization",
    "section": "Star Wars - Luke Skywalker, Observation 1",
    "text": "Star Wars - Luke Skywalker, Observation 1",
    "crumbs": [
      "Home",
      "Lecture HTML",
      "02 - Visualization Basics"
    ]
  },
  {
    "objectID": "Lectures/02_VizBasics/index.html#star-wars---other-ways-to-investigate",
    "href": "Lectures/02_VizBasics/index.html#star-wars---other-ways-to-investigate",
    "title": "Basics of Data Visualization",
    "section": "Star Wars - Other Ways to Investigate",
    "text": "Star Wars - Other Ways to Investigate\n\nThe dplyr package also has the glimpse() function\n\n\n\n\nRows: 87\nColumns: 14\n$ name       &lt;chr&gt; \"Luke Skywalker\", \"C-3PO\", \"R2-D2\", \"Darth Vader\", \"Leia Or…\n$ height     &lt;int&gt; 172, 167, 96, 202, 150, 178, 165, 97, 183, 182, 188, 180, 2…\n$ mass       &lt;dbl&gt; 77.0, 75.0, 32.0, 136.0, 49.0, 120.0, 75.0, 32.0, 84.0, 77.…\n$ hair_color &lt;chr&gt; \"blond\", NA, NA, \"none\", \"brown\", \"brown, grey\", \"brown\", N…\n$ skin_color &lt;chr&gt; \"fair\", \"gold\", \"white, blue\", \"white\", \"light\", \"light\", \"…\n$ eye_color  &lt;chr&gt; \"blue\", \"yellow\", \"red\", \"yellow\", \"brown\", \"blue\", \"blue\",…\n$ birth_year &lt;dbl&gt; 19.0, 112.0, 33.0, 41.9, 19.0, 52.0, 47.0, NA, 24.0, 57.0, …\n$ sex        &lt;chr&gt; \"male\", \"none\", \"none\", \"male\", \"female\", \"male\", \"female\",…\n$ gender     &lt;chr&gt; \"masculine\", \"masculine\", \"masculine\", \"masculine\", \"femini…\n$ homeworld  &lt;chr&gt; \"Tatooine\", \"Tatooine\", \"Naboo\", \"Tatooine\", \"Alderaan\", \"T…\n$ species    &lt;chr&gt; \"Human\", \"Droid\", \"Droid\", \"Human\", \"Human\", \"Human\", \"Huma…\n$ films      &lt;list&gt; &lt;\"A New Hope\", \"The Empire Strikes Back\", \"Return of the J…\n$ vehicles   &lt;list&gt; &lt;\"Snowspeeder\", \"Imperial Speeder Bike\"&gt;, &lt;&gt;, &lt;&gt;, &lt;&gt;, \"Imp…\n$ starships  &lt;list&gt; &lt;\"X-wing\", \"Imperial shuttle\"&gt;, &lt;&gt;, &lt;&gt;, \"TIE Advanced x1\",…",
    "crumbs": [
      "Home",
      "Lecture HTML",
      "02 - Visualization Basics"
    ]
  },
  {
    "objectID": "Lectures/02_VizBasics/index.html#star-wars---other-ways-to-investigate-1",
    "href": "Lectures/02_VizBasics/index.html#star-wars---other-ways-to-investigate-1",
    "title": "Basics of Data Visualization",
    "section": "Star Wars - Other Ways to Investigate",
    "text": "Star Wars - Other Ways to Investigate\n\n\nRun ?starwars in the Console to view the help documentation\n\n#Check the help for the starwars object\n?starwars\n\n#Search help for the term \"starwars\"\n??\"starwars\"\n\nQuestion: How many rows and columns does this dataset have?\nMake a prediction: What relationship do you expect to see between height and mass?",
    "crumbs": [
      "Home",
      "Lecture HTML",
      "02 - Visualization Basics"
    ]
  },
  {
    "objectID": "Lectures/02_VizBasics/index.html#star-wars---mass-vs.-height",
    "href": "Lectures/02_VizBasics/index.html#star-wars---mass-vs.-height",
    "title": "Basics of Data Visualization",
    "section": "Star Wars - Mass vs. Height",
    "text": "Star Wars - Mass vs. Height\n\nggplot(data = starwars) +\n  aes(x = height, y = mass) +\n  geom_point()\n\nWarning: Removed 28 rows containing missing values or values outside the scale range\n(`geom_point()`).",
    "crumbs": [
      "Home",
      "Lecture HTML",
      "02 - Visualization Basics"
    ]
  },
  {
    "objectID": "Lectures/02_VizBasics/index.html#star-wars---whats-that-warning",
    "href": "Lectures/02_VizBasics/index.html#star-wars---whats-that-warning",
    "title": "Basics of Data Visualization",
    "section": "Star Wars - What’s that Warning?",
    "text": "Star Wars - What’s that Warning?\n\nNot all characters have height and mass data, so 28 aren’t plotted\n\n\n## Warning: Removed 28 rows containing missing values (geom_point).\n\n\n\n# A tibble: 6 × 14\n  name      height  mass hair_color skin_color eye_color birth_year sex   gender\n  &lt;chr&gt;      &lt;int&gt; &lt;dbl&gt; &lt;chr&gt;      &lt;chr&gt;      &lt;chr&gt;          &lt;dbl&gt; &lt;chr&gt; &lt;chr&gt; \n1 Arvel Cr…     NA    NA brown      fair       brown             NA male  mascu…\n2 Finn          NA    NA black      dark       dark              NA male  mascu…\n3 Rey           NA    NA brown      light      hazel             NA fema… femin…\n4 Poe Dame…     NA    NA brown      light      brown             NA male  mascu…\n5 BB8           NA    NA none       none       black             NA none  mascu…\n6 Captain …     NA    NA none       none       unknown           NA fema… femin…\n# ℹ 5 more variables: homeworld &lt;chr&gt;, species &lt;chr&gt;, films &lt;list&gt;,\n#   vehicles &lt;list&gt;, starships &lt;list&gt;\n\n\n\n\n\n\n\n\nImportant\n\n\n\nWe’ll suppress the warning to save room but take note ggplot2 is telling you about missingness",
    "crumbs": [
      "Home",
      "Lecture HTML",
      "02 - Visualization Basics"
    ]
  },
  {
    "objectID": "Lectures/02_VizBasics/index.html#star-wars---mass-vs.-height---data-anomalies",
    "href": "Lectures/02_VizBasics/index.html#star-wars---mass-vs.-height---data-anomalies",
    "title": "Basics of Data Visualization",
    "section": "Star Wars - Mass vs. Height - Data Anomalies",
    "text": "Star Wars - Mass vs. Height - Data Anomalies\n\nHow would you describe this relationship?\nWho is the not so tall but really chonky character?",
    "crumbs": [
      "Home",
      "Lecture HTML",
      "02 - Visualization Basics"
    ]
  },
  {
    "objectID": "Lectures/02_VizBasics/index.html#star-wars---jabba-the-plott",
    "href": "Lectures/02_VizBasics/index.html#star-wars---jabba-the-plott",
    "title": "Basics of Data Visualization",
    "section": "Star Wars - Jabba the Plott",
    "text": "Star Wars - Jabba the Plott",
    "crumbs": [
      "Home",
      "Lecture HTML",
      "02 - Visualization Basics"
    ]
  },
  {
    "objectID": "Lectures/02_VizBasics/index.html#aesthetics-options",
    "href": "Lectures/02_VizBasics/index.html#aesthetics-options",
    "title": "Basics of Data Visualization",
    "section": "Aesthetics Options",
    "text": "Aesthetics Options\nWe’ve already seen aesthetics with x-axis and y-axis mapping\nAesthetics are visual characteristics that can be mapped to data to aid understanding\nThese are geom specific, examples from geom_point()\n\ncolor\nsize\nshape\nalpha (transparency)",
    "crumbs": [
      "Home",
      "Lecture HTML",
      "02 - Visualization Basics"
    ]
  },
  {
    "objectID": "Lectures/02_VizBasics/index.html#aesthetics---adding-gender-to-mass-vs.-height",
    "href": "Lectures/02_VizBasics/index.html#aesthetics---adding-gender-to-mass-vs.-height",
    "title": "Basics of Data Visualization",
    "section": "Aesthetics - Adding Gender to Mass vs. Height",
    "text": "Aesthetics - Adding Gender to Mass vs. Height",
    "crumbs": [
      "Home",
      "Lecture HTML",
      "02 - Visualization Basics"
    ]
  },
  {
    "objectID": "Lectures/02_VizBasics/index.html#aesthetics---some-aesthetics-of-other-geoms",
    "href": "Lectures/02_VizBasics/index.html#aesthetics---some-aesthetics-of-other-geoms",
    "title": "Basics of Data Visualization",
    "section": "Aesthetics - Some Aesthetics of Other Geoms",
    "text": "Aesthetics - Some Aesthetics of Other Geoms\n\ngeom_line() also has “linetype” for solid or dashed lines\ngeom_bar() uses “fill” for the body of the bar instead of “color”",
    "crumbs": [
      "Home",
      "Lecture HTML",
      "02 - Visualization Basics"
    ]
  },
  {
    "objectID": "Lectures/02_VizBasics/index.html#aesthetics---mappings-are-data-type-dependent",
    "href": "Lectures/02_VizBasics/index.html#aesthetics---mappings-are-data-type-dependent",
    "title": "Basics of Data Visualization",
    "section": "Aesthetics - Mappings Are Data Type Dependent",
    "text": "Aesthetics - Mappings Are Data Type Dependent\n\nCategorical variables are measured (often counted) on a discrete scale\n\n\n\n\n\n\n\n\n\nAesthetics\nDiscrete\n\n\n\n\ncolor\ndifferent color for each category\n\n\nsize\ndiscrete steps in sizes\n\n\nshape\ndifferent shapes for each category\n\n\n\n\n\n\n\n\nContinuous variable are measured on a continuous scale\n\n\n\n\n\n\n\n\n\nAesthetics\nContinuous\n\n\n\n\ncolor\ncolor gradient\n\n\nsize\nlinear mapping between radius and value\n\n\nshape\nshouldn't (and doesn't) work",
    "crumbs": [
      "Home",
      "Lecture HTML",
      "02 - Visualization Basics"
    ]
  },
  {
    "objectID": "Lectures/02_VizBasics/index.html#looking-ahead---further-customization",
    "href": "Lectures/02_VizBasics/index.html#looking-ahead---further-customization",
    "title": "Basics of Data Visualization",
    "section": "Looking Ahead - Further Customization",
    "text": "Looking Ahead - Further Customization\nWhen we return to plotting in a couple of weeks we’ll discuss:\n\nPlotting with other geoms for line charts, box plots, histograms / density plots, tile plots, and many more\nAdvanced aesthetics and greater customization control\nPlotting summary values e.g. means and error bars\nLabelling and emphasizing datapoints of interest",
    "crumbs": [
      "Home",
      "Lecture HTML",
      "02 - Visualization Basics"
    ]
  },
  {
    "objectID": "Lectures/02_VizBasics/index.html#looking-ahead---todays-exercise",
    "href": "Lectures/02_VizBasics/index.html#looking-ahead---todays-exercise",
    "title": "Basics of Data Visualization",
    "section": "Looking Ahead - Today’s Exercise",
    "text": "Looking Ahead - Today’s Exercise\nFor the exercise today we’ll be working with the gapminder dataset and adding in some additional concepts\n\nMultiple geoms - line of fit over scatterplots\nWorking with x-axis and y-axis scales e.g. log transformations\nLabelling axis and titles\n\nThis is also going to force you to start to work with the help menu, cheat sheets, and Posit Cloud recipes to start to answer your own questions\nRachel and I are here to help but also ask each other!",
    "crumbs": [
      "Home",
      "Lecture HTML",
      "02 - Visualization Basics"
    ]
  },
  {
    "objectID": "html_files/06_Adv_Visual/exercise_solutions.html",
    "href": "html_files/06_Adv_Visual/exercise_solutions.html",
    "title": "Data visualization tools",
    "section": "",
    "text": "The supermarket data are synthetic but realistic observations of customer interactions in various counties. The exercises in this document are based on a tutorial written on the UC Business Analytics blog\n\n\n\n\n── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ──\n✔ dplyr     1.1.4     ✔ readr     2.1.5\n✔ forcats   1.0.0     ✔ stringr   1.5.1\n✔ ggplot2   3.5.1     ✔ tibble    3.2.1\n✔ lubridate 1.9.3     ✔ tidyr     1.3.1\n✔ purrr     1.0.2     \n── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──\n✖ dplyr::filter() masks stats::filter()\n✖ dplyr::lag()    masks stats::lag()\nℹ Use the conflicted package (&lt;http://conflicted.r-lib.org/&gt;) to force all conflicts to become errors\n\nAttaching package: 'janitor'\n\n\nThe following objects are masked from 'package:stats':\n\n    chisq.test, fisher.test\n\n\n\n\n\nReview this briefly and use it as a reference to engage with the exercises below.\n\n\n\n\n\n\n\n\nDescription of Super Market data\n\n\nVariable name\nVariable description\n\n\n\n\nTransaction\ntransaction number\n\n\nPurchase Date\ndate of purchase\n\n\nCustomer ID\ncustomer identification\n\n\nGender\n--\n\n\nMarital Status\n--\n\n\nHomeowner\n--\n\n\nChildren\nnumber of kids at home\n\n\nAnnual Income\nincome of customer\n\n\nCity\n--\n\n\nState or Province\n--\n\n\nCountry\nCanada, Mexico, or USA\n\n\nProduct Family\ndrink, food, or non-consumable\n\n\nProduct Department\nthe item's department\n\n\nProduct Category\nthe item's type\n\n\nUnits Sold\nnumber of items sold\n\n\nRevenue\nmoney generated by the transaction",
    "crumbs": [
      "Home",
      "Assignment Solutions",
      "06 - Advanced Visualization"
    ]
  },
  {
    "objectID": "html_files/06_Adv_Visual/exercise_solutions.html#import",
    "href": "html_files/06_Adv_Visual/exercise_solutions.html#import",
    "title": "Data visualization tools",
    "section": "",
    "text": "── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ──\n✔ dplyr     1.1.4     ✔ readr     2.1.5\n✔ forcats   1.0.0     ✔ stringr   1.5.1\n✔ ggplot2   3.5.1     ✔ tibble    3.2.1\n✔ lubridate 1.9.3     ✔ tidyr     1.3.1\n✔ purrr     1.0.2     \n── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──\n✖ dplyr::filter() masks stats::filter()\n✖ dplyr::lag()    masks stats::lag()\nℹ Use the conflicted package (&lt;http://conflicted.r-lib.org/&gt;) to force all conflicts to become errors\n\nAttaching package: 'janitor'\n\n\nThe following objects are masked from 'package:stats':\n\n    chisq.test, fisher.test",
    "crumbs": [
      "Home",
      "Assignment Solutions",
      "06 - Advanced Visualization"
    ]
  },
  {
    "objectID": "html_files/06_Adv_Visual/exercise_solutions.html#data-dictionary",
    "href": "html_files/06_Adv_Visual/exercise_solutions.html#data-dictionary",
    "title": "Data visualization tools",
    "section": "",
    "text": "Review this briefly and use it as a reference to engage with the exercises below.\n\n\n\n\n\n\n\n\nDescription of Super Market data\n\n\nVariable name\nVariable description\n\n\n\n\nTransaction\ntransaction number\n\n\nPurchase Date\ndate of purchase\n\n\nCustomer ID\ncustomer identification\n\n\nGender\n--\n\n\nMarital Status\n--\n\n\nHomeowner\n--\n\n\nChildren\nnumber of kids at home\n\n\nAnnual Income\nincome of customer\n\n\nCity\n--\n\n\nState or Province\n--\n\n\nCountry\nCanada, Mexico, or USA\n\n\nProduct Family\ndrink, food, or non-consumable\n\n\nProduct Department\nthe item's department\n\n\nProduct Category\nthe item's type\n\n\nUnits Sold\nnumber of items sold\n\n\nRevenue\nmoney generated by the transaction",
    "crumbs": [
      "Home",
      "Assignment Solutions",
      "06 - Advanced Visualization"
    ]
  },
  {
    "objectID": "html_files/05_Transform/exercise_solutions.html",
    "href": "html_files/05_Transform/exercise_solutions.html",
    "title": "Derive information with dplyr",
    "section": "",
    "text": "NHANES (The National Health and Nutrition Examination Survey) was designed to assess the health and nutritional status of the US population and is conducted by the National Center for Health Statistics of the Centers for Disease Control and Prevention. Since 1999-2000, NHANES has been conducted in two-year cycles. For each cycle, potential participants are identified through stratified, multistage probability sampling of the non-institutionalized US population. In this set of exercises, we will use the ten cycles conducted from 1999-2000 through 2017-2018.\n\n\n\n\n── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ──\n✔ dplyr     1.1.4     ✔ readr     2.1.5\n✔ forcats   1.0.0     ✔ stringr   1.5.1\n✔ ggplot2   3.5.1     ✔ tibble    3.2.1\n✔ lubridate 1.9.3     ✔ tidyr     1.3.1\n✔ purrr     1.0.2     \n── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──\n✖ dplyr::filter() masks stats::filter()\n✖ dplyr::lag()    masks stats::lag()\nℹ Use the conflicted package (&lt;http://conflicted.r-lib.org/&gt;) to force all conflicts to become errors\n\n\n\n  \n\n\n\n\n\n\nReview this briefly and use it as a reference to engage with the exercises below.\n\n\n\n\n\n\n\n\nDescription of NHANES data\n\n\nVariable name\nVariable description\n\n\n\n\nseqn\nSP identifier\n\n\nexam\nNHANES exam year\n\n\npsu\nprimary sampling unit\n\n\nstrata\nsurvey strata\n\n\nwts_mec_2yr\nsurvey weights\n\n\nage\nSP age, years\n\n\nage_group\nSP age group, years\n\n\nsex\nSP sex\n\n\nrace_ethnicity\nSP race and/or ethnicity\n\n\neducation\nSP education\n\n\nincome_hh\nSP household income\n\n\nbp_sys_mmhg\nSP systolic blood pressure, mm Hg\n\n\nbp_dia_mmhg\nSP diastolic blood pressure, mm Hg\n\n\nbp_controlled\nDid SP have controlled BP? (&lt;140/90 mm Hg)\n\n\nacr_mgg\nSP albumin-to-creatinine ratio, mg/g\n\n\nalbuminuria\nDid SP have albuminuria? (ACR &gt; 30 mg/g)\n\n\nchol_hdl_mgdl\nSP HDL-cholesterol, mg/dl\n\n\nchol_total_mgdl\nSP total cholesterol, mg/dl\n\n\nhealth_insurance\nSP health insurance status\n\n\nbp_high_aware\nSP ever told by Dr: 'you have high blood pressure'?\n\n\nbp_meds\nSP currently using antihypertensive medication?\n\n\nhc_usual_facility\nSP has a usual healthcare facility?\n\n\nhc_visit_1yr\nSP visited their healthcare facility last year?\n\n\n\nSP = survey participant; BP = blood pressure; HDL = high density lipoprotein",
    "crumbs": [
      "Home",
      "Assignment Solutions",
      "05 - Data Transformation"
    ]
  },
  {
    "objectID": "html_files/05_Transform/exercise_solutions.html#import",
    "href": "html_files/05_Transform/exercise_solutions.html#import",
    "title": "Derive information with dplyr",
    "section": "",
    "text": "── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ──\n✔ dplyr     1.1.4     ✔ readr     2.1.5\n✔ forcats   1.0.0     ✔ stringr   1.5.1\n✔ ggplot2   3.5.1     ✔ tibble    3.2.1\n✔ lubridate 1.9.3     ✔ tidyr     1.3.1\n✔ purrr     1.0.2     \n── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──\n✖ dplyr::filter() masks stats::filter()\n✖ dplyr::lag()    masks stats::lag()\nℹ Use the conflicted package (&lt;http://conflicted.r-lib.org/&gt;) to force all conflicts to become errors",
    "crumbs": [
      "Home",
      "Assignment Solutions",
      "05 - Data Transformation"
    ]
  },
  {
    "objectID": "html_files/05_Transform/exercise_solutions.html#data-dictionary",
    "href": "html_files/05_Transform/exercise_solutions.html#data-dictionary",
    "title": "Derive information with dplyr",
    "section": "",
    "text": "Review this briefly and use it as a reference to engage with the exercises below.\n\n\n\n\n\n\n\n\nDescription of NHANES data\n\n\nVariable name\nVariable description\n\n\n\n\nseqn\nSP identifier\n\n\nexam\nNHANES exam year\n\n\npsu\nprimary sampling unit\n\n\nstrata\nsurvey strata\n\n\nwts_mec_2yr\nsurvey weights\n\n\nage\nSP age, years\n\n\nage_group\nSP age group, years\n\n\nsex\nSP sex\n\n\nrace_ethnicity\nSP race and/or ethnicity\n\n\neducation\nSP education\n\n\nincome_hh\nSP household income\n\n\nbp_sys_mmhg\nSP systolic blood pressure, mm Hg\n\n\nbp_dia_mmhg\nSP diastolic blood pressure, mm Hg\n\n\nbp_controlled\nDid SP have controlled BP? (&lt;140/90 mm Hg)\n\n\nacr_mgg\nSP albumin-to-creatinine ratio, mg/g\n\n\nalbuminuria\nDid SP have albuminuria? (ACR &gt; 30 mg/g)\n\n\nchol_hdl_mgdl\nSP HDL-cholesterol, mg/dl\n\n\nchol_total_mgdl\nSP total cholesterol, mg/dl\n\n\nhealth_insurance\nSP health insurance status\n\n\nbp_high_aware\nSP ever told by Dr: 'you have high blood pressure'?\n\n\nbp_meds\nSP currently using antihypertensive medication?\n\n\nhc_usual_facility\nSP has a usual healthcare facility?\n\n\nhc_visit_1yr\nSP visited their healthcare facility last year?\n\n\n\nSP = survey participant; BP = blood pressure; HDL = high density lipoprotein",
    "crumbs": [
      "Home",
      "Assignment Solutions",
      "05 - Data Transformation"
    ]
  },
  {
    "objectID": "html_files/06_Adv_Visual/class_exercises.html",
    "href": "html_files/06_Adv_Visual/class_exercises.html",
    "title": "Data visualization tools",
    "section": "",
    "text": "The supermarket data are synthetic but realistic observations of customer interactions in various counties. The exercises in this document are based on a tutorial written on the UC Business Analytics blog\n\n\n\n\n── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ──\n✔ dplyr     1.1.4     ✔ readr     2.1.5\n✔ forcats   1.0.0     ✔ stringr   1.5.1\n✔ ggplot2   3.5.1     ✔ tibble    3.2.1\n✔ lubridate 1.9.3     ✔ tidyr     1.3.1\n✔ purrr     1.0.2     \n── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──\n✖ dplyr::filter() masks stats::filter()\n✖ dplyr::lag()    masks stats::lag()\nℹ Use the conflicted package (&lt;http://conflicted.r-lib.org/&gt;) to force all conflicts to become errors\n\nAttaching package: 'janitor'\n\n\nThe following objects are masked from 'package:stats':\n\n    chisq.test, fisher.test\n\n\n\n\n\nReview this briefly and use it as a reference to engage with the exercises below.\n\nsupermarket_descr &lt;-\n  c(\n    \"Transaction\"        = \"transaction number\",\n    \"Purchase Date\"      = \"date of purchase\",\n    \"Customer ID\"        = \"customer identification\",\n    \"Gender\"             = \"--\",\n    \"Marital Status\"     = \"--\",\n    \"Homeowner\"          = \"--\",\n    \"Children\"           = \"number of kids at home\",\n    \"Annual Income\"      = \"income of customer\",\n    \"City\"               = \"--\",\n    \"State or Province\"  = \"--\",\n    \"Country\"            = \"Canada, Mexico, or USA\",\n    \"Product Family\"     = \"drink, food, or non-consumable\",\n    \"Product Department\" = \"the item's department\",\n    \"Product Category\"   = \"the item's type\",\n    \"Units Sold\"         = \"number of items sold\",\n    \"Revenue\"            = \"money generated by the transaction\"\n  )\n\n# the enframe function transforms a vector into a tibble,\nenframe(supermarket_descr) |&gt; \n  gt(rowname_col = \"name\") |&gt;\n  tab_stubhead(label = 'Variable name') |&gt; \n  cols_label(value = 'Variable description') |&gt;\n  cols_align('right') |&gt;\n  tab_header(title = 'Description of Super Market data')\n\n\n\n\n\n\n\nDescription of Super Market data\n\n\nVariable name\nVariable description\n\n\n\n\nTransaction\ntransaction number\n\n\nPurchase Date\ndate of purchase\n\n\nCustomer ID\ncustomer identification\n\n\nGender\n--\n\n\nMarital Status\n--\n\n\nHomeowner\n--\n\n\nChildren\nnumber of kids at home\n\n\nAnnual Income\nincome of customer\n\n\nCity\n--\n\n\nState or Province\n--\n\n\nCountry\nCanada, Mexico, or USA\n\n\nProduct Family\ndrink, food, or non-consumable\n\n\nProduct Department\nthe item's department\n\n\nProduct Category\nthe item's type\n\n\nUnits Sold\nnumber of items sold\n\n\nRevenue\nmoney generated by the transaction",
    "crumbs": [
      "Home",
      "Assignments",
      "06 - Advanced Visualization"
    ]
  },
  {
    "objectID": "html_files/06_Adv_Visual/class_exercises.html#import",
    "href": "html_files/06_Adv_Visual/class_exercises.html#import",
    "title": "Data visualization tools",
    "section": "",
    "text": "── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ──\n✔ dplyr     1.1.4     ✔ readr     2.1.5\n✔ forcats   1.0.0     ✔ stringr   1.5.1\n✔ ggplot2   3.5.1     ✔ tibble    3.2.1\n✔ lubridate 1.9.3     ✔ tidyr     1.3.1\n✔ purrr     1.0.2     \n── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──\n✖ dplyr::filter() masks stats::filter()\n✖ dplyr::lag()    masks stats::lag()\nℹ Use the conflicted package (&lt;http://conflicted.r-lib.org/&gt;) to force all conflicts to become errors\n\nAttaching package: 'janitor'\n\n\nThe following objects are masked from 'package:stats':\n\n    chisq.test, fisher.test",
    "crumbs": [
      "Home",
      "Assignments",
      "06 - Advanced Visualization"
    ]
  },
  {
    "objectID": "html_files/06_Adv_Visual/class_exercises.html#data-dictionary",
    "href": "html_files/06_Adv_Visual/class_exercises.html#data-dictionary",
    "title": "Data visualization tools",
    "section": "",
    "text": "Review this briefly and use it as a reference to engage with the exercises below.\n\nsupermarket_descr &lt;-\n  c(\n    \"Transaction\"        = \"transaction number\",\n    \"Purchase Date\"      = \"date of purchase\",\n    \"Customer ID\"        = \"customer identification\",\n    \"Gender\"             = \"--\",\n    \"Marital Status\"     = \"--\",\n    \"Homeowner\"          = \"--\",\n    \"Children\"           = \"number of kids at home\",\n    \"Annual Income\"      = \"income of customer\",\n    \"City\"               = \"--\",\n    \"State or Province\"  = \"--\",\n    \"Country\"            = \"Canada, Mexico, or USA\",\n    \"Product Family\"     = \"drink, food, or non-consumable\",\n    \"Product Department\" = \"the item's department\",\n    \"Product Category\"   = \"the item's type\",\n    \"Units Sold\"         = \"number of items sold\",\n    \"Revenue\"            = \"money generated by the transaction\"\n  )\n\n# the enframe function transforms a vector into a tibble,\nenframe(supermarket_descr) |&gt; \n  gt(rowname_col = \"name\") |&gt;\n  tab_stubhead(label = 'Variable name') |&gt; \n  cols_label(value = 'Variable description') |&gt;\n  cols_align('right') |&gt;\n  tab_header(title = 'Description of Super Market data')\n\n\n\n\n\n\n\nDescription of Super Market data\n\n\nVariable name\nVariable description\n\n\n\n\nTransaction\ntransaction number\n\n\nPurchase Date\ndate of purchase\n\n\nCustomer ID\ncustomer identification\n\n\nGender\n--\n\n\nMarital Status\n--\n\n\nHomeowner\n--\n\n\nChildren\nnumber of kids at home\n\n\nAnnual Income\nincome of customer\n\n\nCity\n--\n\n\nState or Province\n--\n\n\nCountry\nCanada, Mexico, or USA\n\n\nProduct Family\ndrink, food, or non-consumable\n\n\nProduct Department\nthe item's department\n\n\nProduct Category\nthe item's type\n\n\nUnits Sold\nnumber of items sold\n\n\nRevenue\nmoney generated by the transaction",
    "crumbs": [
      "Home",
      "Assignments",
      "06 - Advanced Visualization"
    ]
  },
  {
    "objectID": "Lectures/01_Tools/index.html",
    "href": "Lectures/01_Tools/index.html",
    "title": "Introducing your Tools",
    "section": "",
    "text": "Introductions\nA brief introduction to R\nRStudio Desktop and Posit Cloud\nWorking with Quarto and R Markdown\nVersion control and collaboration with git and GitHub",
    "crumbs": [
      "Home",
      "Lecture HTML",
      "01 - Introducing Your Tools"
    ]
  },
  {
    "objectID": "Lectures/01_Tools/index.html#agenda",
    "href": "Lectures/01_Tools/index.html#agenda",
    "title": "Introducing your Tools",
    "section": "",
    "text": "Introductions\nA brief introduction to R\nRStudio Desktop and Posit Cloud\nWorking with Quarto and R Markdown\nVersion control and collaboration with git and GitHub",
    "crumbs": [
      "Home",
      "Lecture HTML",
      "01 - Introducing Your Tools"
    ]
  },
  {
    "objectID": "Lectures/01_Tools/index.html#bst-680",
    "href": "Lectures/01_Tools/index.html#bst-680",
    "title": "Introducing your Tools",
    "section": "BST 680",
    "text": "BST 680\n\nThe goal of this course is to familiarize you with using R for data engagements\n\nHow R is structured in vectors, dataframes, and lists\nWorking with different classes of data in R like logicals, characters, and dates\nBasics of visualization with ggplot2 (which we’ll just call ggplot)\nData wrangling with the tidyverse\nSome basics on functional programming and iteration",
    "crumbs": [
      "Home",
      "Lecture HTML",
      "01 - Introducing Your Tools"
    ]
  },
  {
    "objectID": "Lectures/01_Tools/index.html#bst-680-1",
    "href": "Lectures/01_Tools/index.html#bst-680-1",
    "title": "Introducing your Tools",
    "section": "BST 680",
    "text": "BST 680\n\nWe will do this using RStudio Desktop and Posit Cloud\n\nHow the RStudio IDE is organized\nChanging options and layouts to support your needs\nWorking with Projects and building your own workflows and coding styles\nUsing markdown languages to unify code, results and output for sharing\nUsing other tools to support reproducibility and sharing\n\n\nWhat this course will NOT do is use any statistical testing",
    "crumbs": [
      "Home",
      "Lecture HTML",
      "01 - Introducing Your Tools"
    ]
  },
  {
    "objectID": "Lectures/01_Tools/index.html#by-now-you-should-have",
    "href": "Lectures/01_Tools/index.html#by-now-you-should-have",
    "title": "Introducing your Tools",
    "section": "By now you should have",
    "text": "By now you should have\n\n\n\nSigned up for a Posit Cloud account\nInstalled R and RStudio Desktop locally\nStarted a GitHub account (this will come into play later)\nGotten a copy of R for Data Science (2e)",
    "crumbs": [
      "Home",
      "Lecture HTML",
      "01 - Introducing Your Tools"
    ]
  },
  {
    "objectID": "Lectures/01_Tools/index.html#introductions",
    "href": "Lectures/01_Tools/index.html#introductions",
    "title": "Introducing your Tools",
    "section": "Introductions",
    "text": "Introductions\n\n\n\nName\nDepartment\nDegree program\nHow did you most recently use statistical software for work or pleasure (R, Python, SAS, Prism, Excel, etc)",
    "crumbs": [
      "Home",
      "Lecture HTML",
      "01 - Introducing Your Tools"
    ]
  },
  {
    "objectID": "Lectures/01_Tools/index.html#working-with-r",
    "href": "Lectures/01_Tools/index.html#working-with-r",
    "title": "Introducing your Tools",
    "section": "Working with R",
    "text": "Working with R\n\nWho here…\n\n\nhas used R in any capacity?\nmade a plot using the ggplot2 “grammar of graphics”?\nmade a formatted table using a package like gt, kable, or something similar?\nknows how to use the tidyverse for data wrangling? (e.g. how does tidyr differ from dplyr)\nhas written their own function in R?\nknows why NA == NA does not return TRUE?",
    "crumbs": [
      "Home",
      "Lecture HTML",
      "01 - Introducing Your Tools"
    ]
  },
  {
    "objectID": "Lectures/01_Tools/index.html#rstudio-and-its-extensions",
    "href": "Lectures/01_Tools/index.html#rstudio-and-its-extensions",
    "title": "Introducing your Tools",
    "section": "RStudio and its extensions",
    "text": "RStudio and its extensions\n\nWho here…\n\n\nknows why it’s important to use Projects in RStudio?\ncan describe the difference between a .rds file and a .RData file?\nhas used markdown (R, Quarto, or otherwise) to make a sharable document?\ndeveloped a Shiny application in R?\nhas contributed to a third-party GitHub repository?\nknows why enquosures often fail inside of datamasks?",
    "crumbs": [
      "Home",
      "Lecture HTML",
      "01 - Introducing Your Tools"
    ]
  },
  {
    "objectID": "Lectures/01_Tools/index.html#an-overview-of-the-model",
    "href": "Lectures/01_Tools/index.html#an-overview-of-the-model",
    "title": "Introducing your Tools",
    "section": "An Overview of the Model",
    "text": "An Overview of the Model\nThe workflow as described by Wickham et. al. in R4DS\n\n\nWickham H, Cetinkaya-Rundel M, Grolemund G. (2023) R for Data Science, 2nd Edition. Sebastopol, CA: O’Reilly Media.",
    "crumbs": [
      "Home",
      "Lecture HTML",
      "01 - Introducing Your Tools"
    ]
  },
  {
    "objectID": "Lectures/01_Tools/index.html#an-overview-of-the-model-1",
    "href": "Lectures/01_Tools/index.html#an-overview-of-the-model-1",
    "title": "Introducing your Tools",
    "section": "An Overview of the Model",
    "text": "An Overview of the Model\n\nImporting - loading data into R (API, direct load, etc)\nTidying - getting your data into a consistent state for downstream use\nWrangling - modifying tidy data for better engagement e.g. new variable, summarizations, filtering\nVisualizing / Tabulation - organizing wrangled data into a format to assist understanding\nModelling - evaluating how aspects of the data relate to each other\nCommunication - letting others know about your results",
    "crumbs": [
      "Home",
      "Lecture HTML",
      "01 - Introducing Your Tools"
    ]
  },
  {
    "objectID": "Lectures/01_Tools/index.html#our-toolkit",
    "href": "Lectures/01_Tools/index.html#our-toolkit",
    "title": "Introducing your Tools",
    "section": "Our Toolkit",
    "text": "Our Toolkit\n\n\n\n\n\nR \\(\\rightarrow\\) Pure scriptability for data engagement\nRStudio/Posit \\(\\rightarrow\\) Cohesive wrangling of code bases\nQuarto \\(\\rightarrow\\) Literate scripts combining code, narrative, and output in one\nGit / GitHub / renv \\(\\rightarrow\\) Version and environmental control for reproducible consistency",
    "crumbs": [
      "Home",
      "Lecture HTML",
      "01 - Introducing Your Tools"
    ]
  },
  {
    "objectID": "Lectures/01_Tools/index.html#so-what-is-r",
    "href": "Lectures/01_Tools/index.html#so-what-is-r",
    "title": "Introducing your Tools",
    "section": "So what is R?",
    "text": "So what is R?\n\nA (functional) programming language\nThe environment in which the programming language is run\nDomain-specific language emphasizing data management and statistical analysis\nIt is NOT a general purpose language (although you can con it into behaving like one)",
    "crumbs": [
      "Home",
      "Lecture HTML",
      "01 - Introducing Your Tools"
    ]
  },
  {
    "objectID": "Lectures/01_Tools/index.html#r-essentials---a-very-short-list",
    "href": "Lectures/01_Tools/index.html#r-essentials---a-very-short-list",
    "title": "Introducing your Tools",
    "section": "R essentials - A VERY Short List",
    "text": "R essentials - A VERY Short List\n\nR begins with objects which store some sort of information, a string, series of numbers, complex data structure, etc.; these are the “nouns of the language\nFor storing data, we’ll often think of vectors, data frames, and lists\n\n. . .\n\n#A vector\nc(vector_item1, vector_item2, vector_item3)\n\n#A dataframe, specficially having a column being accessed\ndata_frame$vcol_name\n\n#Accessing the element of a list\nsome_list[[list_entry]]",
    "crumbs": [
      "Home",
      "Lecture HTML",
      "01 - Introducing Your Tools"
    ]
  },
  {
    "objectID": "Lectures/01_Tools/index.html#r-essentials---a-very-short-list-1",
    "href": "Lectures/01_Tools/index.html#r-essentials---a-very-short-list-1",
    "title": "Introducing your Tools",
    "section": "R essentials - A VERY Short List",
    "text": "R essentials - A VERY Short List\n\nR does its heavy lifting via functions which are the “verbs” is the language\nThese are comprised of the function() followed by a series of arguments which the function is applied to\n\n. . .\n\n#Using the do_this() function to make something_new\nsomething_new &lt;- do_this(to_this)\n\n#Then using do_that() on something_new with some argumentns\ndo_that(something_new, also_that, using_these)",
    "crumbs": [
      "Home",
      "Lecture HTML",
      "01 - Introducing Your Tools"
    ]
  },
  {
    "objectID": "Lectures/01_Tools/index.html#r-essentials---a-very-short-list-2",
    "href": "Lectures/01_Tools/index.html#r-essentials---a-very-short-list-2",
    "title": "Introducing your Tools",
    "section": "R essentials - A VERY Short List",
    "text": "R essentials - A VERY Short List\n\nBut base R only has so many functions; thus most support comes from community-developed packages\nThose approved and hosted by CRAN can be installed using install.packages()\nOther options include BioConductor which focuses on Omics and other large datasets or GitHub for more developmental packages\nAll packages get loaded via the library() command to gain access to their functions but only once per session\n\n. . .\n\n#Installing and loading the package_name library\ninstall.packages(\"package_name\")\nlibrary(package_name)",
    "crumbs": [
      "Home",
      "Lecture HTML",
      "01 - Introducing Your Tools"
    ]
  },
  {
    "objectID": "Lectures/01_Tools/index.html#the-r-console",
    "href": "Lectures/01_Tools/index.html#the-r-console",
    "title": "Introducing your Tools",
    "section": "The R Console",
    "text": "The R Console\n\nWe start with the R console but we will never use it directly (ever)\n\n\n\n\n\n\n\nOnly use this is you want to punish yourself",
    "crumbs": [
      "Home",
      "Lecture HTML",
      "01 - Introducing Your Tools"
    ]
  },
  {
    "objectID": "Lectures/01_Tools/index.html#rstudio",
    "href": "Lectures/01_Tools/index.html#rstudio",
    "title": "Introducing your Tools",
    "section": "RStudio",
    "text": "RStudio\n\nInstead, we use the RStudio (more formally the RStudio Desktop) which is an IDE (Integrated Development Environment)\n\nUnifies the R console with code, environment, and viewing\nOrganizes code files, saved R objects, and external data into Projects\nMany other quality-of-life features will get into\n\nThis is common practice for ANY programming language\nOther examples would be Jupyter or IDLE (frequently used for Python) or Google Collab Notebooks",
    "crumbs": [
      "Home",
      "Lecture HTML",
      "01 - Introducing Your Tools"
    ]
  },
  {
    "objectID": "Lectures/01_Tools/index.html#whats-a-posit",
    "href": "Lectures/01_Tools/index.html#whats-a-posit",
    "title": "Introducing your Tools",
    "section": "What’s a Posit?",
    "text": "What’s a Posit?\n\n\n\n\nIn mid-2022 RStudio (the company) changed their name to Posit to reflect a wider data science space than just R\nIn particular, the work very well with other programming languages like Python and Julia (which we won’t cover here)\n.e.g. RStudio integrates very will with Python code via the reticulate() package\nThey still refer to the local desktop IDE as “RStudio” although many other tools go by “Posit” now\nI will often refer to both of them interchangeably",
    "crumbs": [
      "Home",
      "Lecture HTML",
      "01 - Introducing Your Tools"
    ]
  },
  {
    "objectID": "Lectures/01_Tools/index.html#what-is-posit-cloud",
    "href": "Lectures/01_Tools/index.html#what-is-posit-cloud",
    "title": "Introducing your Tools",
    "section": "What is Posit Cloud?",
    "text": "What is Posit Cloud?\n\n\n\n\n\n\nA hosted version of RStudio Desktop in the cloud that makes it easy to collaborate using Posit’s supported languages, primarily R and Python\nThis makes it an excellent way to teach and learn about data science using R, which is what we’ll be doing",
    "crumbs": [
      "Home",
      "Lecture HTML",
      "01 - Introducing Your Tools"
    ]
  },
  {
    "objectID": "Lectures/01_Tools/index.html#lets-take-a-tour---rstudio-basics",
    "href": "Lectures/01_Tools/index.html#lets-take-a-tour---rstudio-basics",
    "title": "Introducing your Tools",
    "section": "Let’s Take a Tour - RStudio Basics",
    "text": "Let’s Take a Tour - RStudio Basics\nConcepts introduced:\n\nThe Panes - Console, Source, Environments, Output\nWorking in the console (like a barbarian)\nThe Environment - Projects and objects and files\nEngaging with data objects outside the console\nSource - R functions and working with them\nPersonalizing your RStudio experience\nMuch of this can be found in the RStudio User Guide",
    "crumbs": [
      "Home",
      "Lecture HTML",
      "01 - Introducing Your Tools"
    ]
  },
  {
    "objectID": "Lectures/01_Tools/index.html#rstudio---the-panes",
    "href": "Lectures/01_Tools/index.html#rstudio---the-panes",
    "title": "Introducing your Tools",
    "section": "RStudio - The Panes",
    "text": "RStudio - The Panes\n\nVisual display is comprised of four panes\n\nSource: Edit and save your scripts or other IDE documents like Quarto .qmd files\nConsole: Execute codes, directly or from the Source; access a Unix-esque Terminal for CLI tasks like git or quarto commands\nEnvironment: Controlling local R objects and other low-level session aspects\nOutput: Display created R outputs like plots/tables/HTML or other high-level controls (packages, files)",
    "crumbs": [
      "Home",
      "Lecture HTML",
      "01 - Introducing Your Tools"
    ]
  },
  {
    "objectID": "Lectures/01_Tools/index.html#rstudio---the-panes-1",
    "href": "Lectures/01_Tools/index.html#rstudio---the-panes-1",
    "title": "Introducing your Tools",
    "section": "RStudio - The Panes",
    "text": "RStudio - The Panes\n\n\n\n\n\n\nhttps://docs.posit.co/ide/user/ide/get-started/#rstudio-panes",
    "crumbs": [
      "Home",
      "Lecture HTML",
      "01 - Introducing Your Tools"
    ]
  },
  {
    "objectID": "Lectures/01_Tools/index.html#rstudio---the-console",
    "href": "Lectures/01_Tools/index.html#rstudio---the-console",
    "title": "Introducing your Tools",
    "section": "RStudio - The Console",
    "text": "RStudio - The Console\n\nThe console allows for interactivity with R code and code execution\nIncludes several QoL improvements like code completion, fuzzy matching for functions, and linking to help documentation\nCan easily navigate previous commands from the console using the up arrow Up for single commands Ctrl+Up or Cmd+Up to access a list of prior commands\nAlso includes tabs for the Terminal (which we’ll discuss with Git)\nAlso displays your current working directory",
    "crumbs": [
      "Home",
      "Lecture HTML",
      "01 - Introducing Your Tools"
    ]
  },
  {
    "objectID": "Lectures/01_Tools/index.html#rstudio---the-environment",
    "href": "Lectures/01_Tools/index.html#rstudio---the-environment",
    "title": "Introducing your Tools",
    "section": "RStudio - The Environment",
    "text": "RStudio - The Environment\n\nThe environment powers “scoping” i.e. where and how data is stored locally for the current session\n\n\n\n\nFor our purposes, we’ll be a bit broader and think about the environment for…\n\nObjects - data structures made in the current session\nProjects - an organized association of files specific to a context\nFiles - R objects saved to files",
    "crumbs": [
      "Home",
      "Lecture HTML",
      "01 - Introducing Your Tools"
    ]
  },
  {
    "objectID": "Lectures/01_Tools/index.html#rstudio---the-environment---objects",
    "href": "Lectures/01_Tools/index.html#rstudio---the-environment---objects",
    "title": "Introducing your Tools",
    "section": "RStudio - The Environment - Objects",
    "text": "RStudio - The Environment - Objects\n\nAn Object is any locally created “thing” saved within the current session\nYou can see (most) objects listed in the Environment tab which provide a lot of additional information",
    "crumbs": [
      "Home",
      "Lecture HTML",
      "01 - Introducing Your Tools"
    ]
  },
  {
    "objectID": "Lectures/01_Tools/index.html#rstudio---the-environment---projects",
    "href": "Lectures/01_Tools/index.html#rstudio---the-environment---projects",
    "title": "Introducing your Tools",
    "section": "RStudio - The Environment - Projects",
    "text": "RStudio - The Environment - Projects\n\nProjects let you associate everything related to a single contextual task together:\n\nInput data\nScripts\nSaved outputs like results, figures, or R objects\nFolder structures\n\nThis also lets you divide your work so each task has it’s own working directory, workspace, history, and source documentation\nFor example, each of these lectures is it’s own project",
    "crumbs": [
      "Home",
      "Lecture HTML",
      "01 - Introducing Your Tools"
    ]
  },
  {
    "objectID": "Lectures/01_Tools/index.html#rstudio---the-environment---projects-1",
    "href": "Lectures/01_Tools/index.html#rstudio---the-environment---projects-1",
    "title": "Introducing your Tools",
    "section": "RStudio - The Environment - Projects",
    "text": "RStudio - The Environment - Projects\n\nProjects are controlled by .RProj files and contain all project-specific options, metadata and temporary files\nProject can be easily created/navigated and you can overwrite global options in RStudio based on project specific needs",
    "crumbs": [
      "Home",
      "Lecture HTML",
      "01 - Introducing Your Tools"
    ]
  },
  {
    "objectID": "Lectures/01_Tools/index.html#rstudio---the-environment---files",
    "href": "Lectures/01_Tools/index.html#rstudio---the-environment---files",
    "title": "Introducing your Tools",
    "section": "RStudio - The Environment - Files",
    "text": "RStudio - The Environment - Files\n\nWithin a project, you can have many indivdual Files\nThis can be raw input data in common file formats like delimited files (.csv, .tsv, .txt, etc) or something more elaborate like Excel workbooks\n\nThese are designed to be read into the current local environment for the current session\n\nSimilar output formats can be saved as those file types, individual image files in many formats, or compiled reports generation from Quarto or R Markdown\n\nFolder structure in your project helps with organizing input/output",
    "crumbs": [
      "Home",
      "Lecture HTML",
      "01 - Introducing Your Tools"
    ]
  },
  {
    "objectID": "Lectures/01_Tools/index.html#rstudio---the-environment---files-1",
    "href": "Lectures/01_Tools/index.html#rstudio---the-environment---files-1",
    "title": "Introducing your Tools",
    "section": "RStudio - The Environment - Files",
    "text": "RStudio - The Environment - Files\nThere are also R and RStudio specific files we can use\n\n.R - source scripts, ways to store the code you write\n.rds - individual data objects written to and read from file\n\n\n#Make something\ni_made_an_object &lt;- c(\"it\", \"has\", \"stuff\")\n\n#Save it to file\nsaveRDS(i_made_an_object, file = \"and_i_want_to_save_it.rds\")\n\n#And get it back as needed\nnow_i_need_it_back &lt;- readRDS(\"and_i_want_to_save_it.rds\")\n\n\n.RData - An entire workspace consisting of multiple objects / .rds files\n.qmd / .rmd - Markdown files used to generate sharable formats",
    "crumbs": [
      "Home",
      "Lecture HTML",
      "01 - Introducing Your Tools"
    ]
  },
  {
    "objectID": "Lectures/01_Tools/index.html#rstudio---the-environment---files-2",
    "href": "Lectures/01_Tools/index.html#rstudio---the-environment---files-2",
    "title": "Introducing your Tools",
    "section": "RStudio - The Environment - Files",
    "text": "RStudio - The Environment - Files\n\nYou can easily navigate your files and folder structures (as well as other things) in the Output pane",
    "crumbs": [
      "Home",
      "Lecture HTML",
      "01 - Introducing Your Tools"
    ]
  },
  {
    "objectID": "Lectures/01_Tools/index.html#rstudio---viewing-objects",
    "href": "Lectures/01_Tools/index.html#rstudio---viewing-objects",
    "title": "Introducing your Tools",
    "section": "RStudio - Viewing Objects",
    "text": "RStudio - Viewing Objects\n\n\n\nWe’ll spend a lot of time engaging with objects programatically, but sometimes you want to just play with a data object\nFor this we can use the Data Viewer using either the View() command or from the Environment tab\nIt does have some limitations, you can learn more from the RStudio User’s Guide",
    "crumbs": [
      "Home",
      "Lecture HTML",
      "01 - Introducing Your Tools"
    ]
  },
  {
    "objectID": "Lectures/01_Tools/index.html#rstudio---the-source-panel",
    "href": "Lectures/01_Tools/index.html#rstudio---the-source-panel",
    "title": "Introducing your Tools",
    "section": "RStudio - The Source Panel",
    "text": "RStudio - The Source Panel\n\nMost of what your active engagement will take place in the source panel where you will write and execute code\nMuch of what you see and do is context dependent according to the type of file you’re working on e.g. .R scripts vs .qmd Markdown",
    "crumbs": [
      "Home",
      "Lecture HTML",
      "01 - Introducing Your Tools"
    ]
  },
  {
    "objectID": "Lectures/01_Tools/index.html#rstudio---the-source-panel-1",
    "href": "Lectures/01_Tools/index.html#rstudio---the-source-panel-1",
    "title": "Introducing your Tools",
    "section": "RStudio - The Source Panel",
    "text": "RStudio - The Source Panel\n\nExecuting code from the Source can be done in a myriad of ways\n\nOne line a time using Ctrl+Enter or the Run button on the toolbar\nMultiple lines at once by highlighting several lines before using Ctrl+Enter or Run\nRunning the whole document via Ctrl+Shift+Enter or the Source toolbar button\n\n\n\n\nRunning code is similar for Quarto markdown or other computational documents although we work with code chunks instead",
    "crumbs": [
      "Home",
      "Lecture HTML",
      "01 - Introducing Your Tools"
    ]
  },
  {
    "objectID": "Lectures/01_Tools/index.html#rstudio---personalizing-the-experience",
    "href": "Lectures/01_Tools/index.html#rstudio---personalizing-the-experience",
    "title": "Introducing your Tools",
    "section": "RStudio - Personalizing the Experience",
    "text": "RStudio - Personalizing the Experience\n\nMany aspects of RStudio and Posit Cloud can be modified by going to Tools &gt; Options menu or RStudio &gt; Peferences on a Mac",
    "crumbs": [
      "Home",
      "Lecture HTML",
      "01 - Introducing Your Tools"
    ]
  },
  {
    "objectID": "Lectures/01_Tools/index.html#rstudio---personalizing-the-experience-1",
    "href": "Lectures/01_Tools/index.html#rstudio---personalizing-the-experience-1",
    "title": "Introducing your Tools",
    "section": "RStudio - Personalizing the Experience",
    "text": "RStudio - Personalizing the Experience\n\n\n\nAn older (September 2023) guide can be found on the Posit website\nSome additional components not discussed there include options for the Console, R Markdown, Python, and Git’s Copilot\nYou can do very well with the defaults but play around a bit to see what works for you; most aesthetic choices are in the Pane Layout and Appearance tabs",
    "crumbs": [
      "Home",
      "Lecture HTML",
      "01 - Introducing Your Tools"
    ]
  },
  {
    "objectID": "Lectures/01_Tools/index.html#rstudio---personalizing-the-experience-2",
    "href": "Lectures/01_Tools/index.html#rstudio---personalizing-the-experience-2",
    "title": "Introducing your Tools",
    "section": "RStudio - Personalizing the Experience",
    "text": "RStudio - Personalizing the Experience\n\nSo set it up as you’d like but I have some quick recommendations\n\nUnder General R Options uncheck the first two options for R Sessions so you don’t automatically open the previous project or source documentation each time\nFor Workspace, uncheck the restoration of .RData into your workspace and set Save Workspace to “Never”\nUnder Code enable the native pipe operator |&gt; which we’ll use in place of the previous pipe of magrittr (%&gt;%)\nSpend some time with the Pane Layout as well as relative positioning\n\n1 and 2 in particular are best practice for memory considerations",
    "crumbs": [
      "Home",
      "Lecture HTML",
      "01 - Introducing Your Tools"
    ]
  },
  {
    "objectID": "Lectures/01_Tools/index.html#rstudio---some-final-tips",
    "href": "Lectures/01_Tools/index.html#rstudio---some-final-tips",
    "title": "Introducing your Tools",
    "section": "RStudio - Some Final Tips",
    "text": "RStudio - Some Final Tips\n\nKeyboard Shortcuts!! Alt+Shift+K or Alt+Shift+K or Tools menu\n\n. . .\n\nCheatsheets!! Posit has many, many cheat sheets you can find on their website including concise PDFs",
    "crumbs": [
      "Home",
      "Lecture HTML",
      "01 - Introducing Your Tools"
    ]
  },
  {
    "objectID": "Lectures/01_Tools/index.html#posit-cloud---key-points",
    "href": "Lectures/01_Tools/index.html#posit-cloud---key-points",
    "title": "Introducing your Tools",
    "section": "Posit Cloud - Key Points",
    "text": "Posit Cloud - Key Points\n\nThe Posit IDE is no different from what you see in RStudio Desktop, this includes customizations\nNavigation between workspaces and help is done via the sidebar\nSpend some time with the Learn section which includes\n\nGuide - basic user guide for Posit Cloud\nRecipes - vignettes and code snippets\nCheatsheets - another link to the Posit cheatsheets\n\nWe also add another layer of organization with Spaces",
    "crumbs": [
      "Home",
      "Lecture HTML",
      "01 - Introducing Your Tools"
    ]
  },
  {
    "objectID": "Lectures/01_Tools/index.html#posit-cloud---spaces",
    "href": "Lectures/01_Tools/index.html#posit-cloud---spaces",
    "title": "Introducing your Tools",
    "section": "Posit Cloud - Spaces",
    "text": "Posit Cloud - Spaces\n\nSpaces or Workspaces are essentially collections of Projects we share on the Cloud\nBST 680 has its own Space with each Project in the space containing everything needed for a lecture topic:\n\nLectures, exercises, tutorials, support files, etc\n\nSince this is a shared space, make sure you save a copy of each project to your own space\nOnly you and the instructors can access these saved projects\nYou can also export your projects to a local system for later use; although the Workspace shouldn’t be going away",
    "crumbs": [
      "Home",
      "Lecture HTML",
      "01 - Introducing Your Tools"
    ]
  },
  {
    "objectID": "Lectures/01_Tools/index.html#what-is-the-tidyverse",
    "href": "Lectures/01_Tools/index.html#what-is-the-tidyverse",
    "title": "Introducing your Tools",
    "section": "What is the Tidyverse?",
    "text": "What is the Tidyverse?\n\n\n\n\ntidyverse.org\n\n\nThe tidyverse is an opinionated collection of R packages designed for data science.\nAll packages share an underlying philosophy and a common syntax.\n\n\n\n\nThe tidyverse is central to our text and we will work with it extensively along with many base R functions",
    "crumbs": [
      "Home",
      "Lecture HTML",
      "01 - Introducing Your Tools"
    ]
  },
  {
    "objectID": "Lectures/01_Tools/index.html#the-tidyverse---a-quick-introduction",
    "href": "Lectures/01_Tools/index.html#the-tidyverse---a-quick-introduction",
    "title": "Introducing your Tools",
    "section": "The Tidyverse - a quick introduction",
    "text": "The Tidyverse - a quick introduction\n\nggplot2 - Creating visualizations using the “grammar of graphics”\ndplyr - Modifying and manipulating data\ntidyr - Making datasets consistent aka “tidy”\nstringr - Interacting with strings, including text matching\nforcats - Working with factor class variables\nlubridate - Making working with date data easier\npurrr - Simplifying iteration\nreadr - A high-level way to read (most) file types",
    "crumbs": [
      "Home",
      "Lecture HTML",
      "01 - Introducing Your Tools"
    ]
  },
  {
    "objectID": "Lectures/01_Tools/index.html#the-tidyverse---the-soapbox",
    "href": "Lectures/01_Tools/index.html#the-tidyverse---the-soapbox",
    "title": "Introducing your Tools",
    "section": "The Tidyverse - The Soapbox",
    "text": "The Tidyverse - The Soapbox",
    "crumbs": [
      "Home",
      "Lecture HTML",
      "01 - Introducing Your Tools"
    ]
  },
  {
    "objectID": "Lectures/01_Tools/index.html#quarto-as-markdown",
    "href": "Lectures/01_Tools/index.html#quarto-as-markdown",
    "title": "Introducing your Tools",
    "section": "Quarto as Markdown",
    "text": "Quarto as Markdown\n\nQuarto is a markdown implementation that helps you communicate results\n\nMarkdown simply is a way to “mark up” otherwise simple text\n\nProvides dynamically updated or reproducible reports - each time you knit the code base will be run de novo\nThe literate programming allows for formatting of simple text but also let’s you interact with code\nCode goes in chunks, defined by three backticks, narrative goes outside of chunks",
    "crumbs": [
      "Home",
      "Lecture HTML",
      "01 - Introducing Your Tools"
    ]
  },
  {
    "objectID": "Lectures/01_Tools/index.html#lets-take-a-tour---quarto",
    "href": "Lectures/01_Tools/index.html#lets-take-a-tour---quarto",
    "title": "Introducing your Tools",
    "section": "Let’s take a tour - Quarto",
    "text": "Let’s take a tour - Quarto\n\nCheckout the intro_to_Quarto.qmd (and rendered .html) file to get an introduction to:\n\nLiterate programming - ntergrating code, text and output\nRendering output\nHigh-level control via the YAML headers and themes\nTabulating data with gt",
    "crumbs": [
      "Home",
      "Lecture HTML",
      "01 - Introducing Your Tools"
    ]
  },
  {
    "objectID": "Lectures/01_Tools/index.html#quarto-tips",
    "href": "Lectures/01_Tools/index.html#quarto-tips",
    "title": "Introducing your Tools",
    "section": "Quarto tips",
    "text": "Quarto tips\n\nThe Quarto site (https://quarto.org) is a great place for getting started or getting other Guidance\nYou can check out the Quarto cheatsheet here\nYou can also check the Markdown Quick Reference in RStudio in the Help menu\n\n\n\n\n\n\n\nImportant\n\n\n\nThe workspace of your Quarto document is separate from whatever is loaded in your environment",
    "crumbs": [
      "Home",
      "Lecture HTML",
      "01 - Introducing Your Tools"
    ]
  },
  {
    "objectID": "Lectures/01_Tools/index.html#how-will-we-use-quarto",
    "href": "Lectures/01_Tools/index.html#how-will-we-use-quarto",
    "title": "Introducing your Tools",
    "section": "How will we use Quarto?",
    "text": "How will we use Quarto?\n\nEverything we do, exercise / assignment / project / etc., is a Quarto document.\nYou’ll always have a template Quarto document to start with\nMost of what you do early on, will simply be adding relevant code to get the desired output\nWe’ll do a deeper dive into Quarto customization at the end of the course",
    "crumbs": [
      "Home",
      "Lecture HTML",
      "01 - Introducing Your Tools"
    ]
  },
  {
    "objectID": "Lectures/01_Tools/index.html#r-markdown-vs-quarto",
    "href": "Lectures/01_Tools/index.html#r-markdown-vs-quarto",
    "title": "Introducing your Tools",
    "section": "R Markdown vs Quarto",
    "text": "R Markdown vs Quarto\n\nIf you’ve used R Markdown you’ll notice some similarities with Quarto, so why Quarto?\nQuarto provides a couple of benefits over what R Markdown down has done up to this point\n\nMuch of the functionality of the R Markdown ecosystem is now unified\nNative support has been extended to other programming languages\nBehavior of niche applications (e.g. xaringan) is now consistent\n\nStill, for R Markdown specifically, you can always check the R Markdown cheat sheet",
    "crumbs": [
      "Home",
      "Lecture HTML",
      "01 - Introducing Your Tools"
    ]
  },
  {
    "objectID": "Lectures/01_Tools/index.html#git-and-github---how-we-collaborate",
    "href": "Lectures/01_Tools/index.html#git-and-github---how-we-collaborate",
    "title": "Introducing your Tools",
    "section": "Git and GitHub - How we collaborate",
    "text": "Git and GitHub - How we collaborate\n\nThe statistical programming language we use is R\nThe software we use to interface with R is RStudio or Posit\n\nBut…\n. . .\n\nHow do I get you the materials for your assignments?\nWhat happens if I need to update those materials?\nHow do I pull my updates into Posit Cloud?",
    "crumbs": [
      "Home",
      "Lecture HTML",
      "01 - Introducing Your Tools"
    ]
  },
  {
    "objectID": "Lectures/01_Tools/index.html#git-and-github---version-control",
    "href": "Lectures/01_Tools/index.html#git-and-github---version-control",
    "title": "Introducing your Tools",
    "section": "Git and GitHub - Version control",
    "text": "Git and GitHub - Version control\n\nEarly on, we will only require GitHub use as a platform for collaboration\n\n. . .\n\nBut it’s actually designed for version control which we’ll discuss alongside support packages like renv and targets for supporting:\n\nRigor\nReproducibility\nData sharing",
    "crumbs": [
      "Home",
      "Lecture HTML",
      "01 - Introducing Your Tools"
    ]
  },
  {
    "objectID": "Lectures/01_Tools/index.html#versioning---bare-bones",
    "href": "Lectures/01_Tools/index.html#versioning---bare-bones",
    "title": "Introducing your Tools",
    "section": "Versioning - Bare Bones",
    "text": "Versioning - Bare Bones\nVersioning lets us track our progress (and go back!)",
    "crumbs": [
      "Home",
      "Lecture HTML",
      "01 - Introducing Your Tools"
    ]
  },
  {
    "objectID": "Lectures/01_Tools/index.html#versioning---with-commits",
    "href": "Lectures/01_Tools/index.html#versioning---with-commits",
    "title": "Introducing your Tools",
    "section": "Versioning - With Commits",
    "text": "Versioning - With Commits\nWe can go further by using “commit” messages to show our progress",
    "crumbs": [
      "Home",
      "Lecture HTML",
      "01 - Introducing Your Tools"
    ]
  },
  {
    "objectID": "Lectures/01_Tools/index.html#why-do-we-need-version-control",
    "href": "Lectures/01_Tools/index.html#why-do-we-need-version-control",
    "title": "Introducing your Tools",
    "section": "Why do we need version control?",
    "text": "Why do we need version control?\n\n\n\n\n\n\nPhD Comics - https://phdcomics.com/comics/archive.php?comicid=1531",
    "crumbs": [
      "Home",
      "Lecture HTML",
      "01 - Introducing Your Tools"
    ]
  },
  {
    "objectID": "Lectures/01_Tools/index.html#git-vs-github",
    "href": "Lectures/01_Tools/index.html#git-vs-github",
    "title": "Introducing your Tools",
    "section": "Git vs GitHub",
    "text": "Git vs GitHub\n\n\n\nGit is a version control system, like track changes but much, much better\nGitHub is the home for your git-based projects (a.k.a. repositories) online, like OneDrive but much, much better",
    "crumbs": [
      "Home",
      "Lecture HTML",
      "01 - Introducing Your Tools"
    ]
  },
  {
    "objectID": "Lectures/01_Tools/index.html#git-and-github---final-thoughts",
    "href": "Lectures/01_Tools/index.html#git-and-github---final-thoughts",
    "title": "Introducing your Tools",
    "section": "Git and GitHub - Final Thoughts",
    "text": "Git and GitHub - Final Thoughts\n\nThere are a tremendous number of git commands, most of which we will never use; instead, most of your utilization will be to use git to add, commit, push, and pull\nOur formal interaction will be limited, but we will be installing git locally and I encourage you to get used to using it in practice\nStill, if you’re feeling ambitious, everyone can benefit from learning more about git and engaging with GitHub\nThere is a great resource for working with git and R: happygitwithr.com",
    "crumbs": [
      "Home",
      "Lecture HTML",
      "01 - Introducing Your Tools"
    ]
  },
  {
    "objectID": "Lectures/01_Tools/index.html#recap-and-next-time",
    "href": "Lectures/01_Tools/index.html#recap-and-next-time",
    "title": "Introducing your Tools",
    "section": "Recap and Next Time",
    "text": "Recap and Next Time\n\nCan you answer these questions?\n\nWhat is R vs RStudio vs Posit?\nWhat is Quarto and why does it matter?\nWhat is git vs GitHub and do I need to care)?\nWhat is version control and why do we care?\n\n\n\nNext time\n\nSome actual coding and getting started with visualization",
    "crumbs": [
      "Home",
      "Lecture HTML",
      "01 - Introducing Your Tools"
    ]
  },
  {
    "objectID": "Lectures/03_Programming/index.html",
    "href": "Lectures/03_Programming/index.html",
    "title": "Programming Basics",
    "section": "",
    "text": "Any questions on basics of visualization from last time?\n\nFor review, see chapter 2 from R4DS\nFor recipes, you can check the first, second, and eighth recipes under Visualize Data on Posit Cloud\n\nAny questions on the reading / primer?\n\nYou’ve gotten some experience running R code with visualization but now we need to dive into the fundamentals",
    "crumbs": [
      "Home",
      "Lecture HTML",
      "03 - Programming Basics"
    ]
  },
  {
    "objectID": "Lectures/03_Programming/index.html#catch-up",
    "href": "Lectures/03_Programming/index.html#catch-up",
    "title": "Programming Basics",
    "section": "",
    "text": "Any questions on basics of visualization from last time?\n\nFor review, see chapter 2 from R4DS\nFor recipes, you can check the first, second, and eighth recipes under Visualize Data on Posit Cloud\n\nAny questions on the reading / primer?\n\nYou’ve gotten some experience running R code with visualization but now we need to dive into the fundamentals",
    "crumbs": [
      "Home",
      "Lecture HTML",
      "03 - Programming Basics"
    ]
  },
  {
    "objectID": "Lectures/03_Programming/index.html#agenda",
    "href": "Lectures/03_Programming/index.html#agenda",
    "title": "Programming Basics",
    "section": "Agenda",
    "text": "Agenda\n\n\n\n\nFunctions\nAccessing Data\nVectors\n\nFull disclosure:\n\nThese topics are extremely important\nThey will also seem boringly useless…",
    "crumbs": [
      "Home",
      "Lecture HTML",
      "03 - Programming Basics"
    ]
  },
  {
    "objectID": "Lectures/03_Programming/index.html#review---coding-basics",
    "href": "Lectures/03_Programming/index.html#review---coding-basics",
    "title": "Programming Basics",
    "section": "Review - Coding Basics",
    "text": "Review - Coding Basics\n\nWe already know R can serve as a calculator\n\n\n7 + 3 * 5\n#&gt; [1] 22\n\n\nWe also know we can take data and assign it to the R essentials using the assignment operator &lt;-\n\n\nxx &lt;- 7 + 3 * 5\nxx\n#&gt; [1] 22 \n\n\nFinally, we write comments using # to tell others about our code\n\n\n#I assigned a value to xx\nxx &lt;- 7 + 3 * 5",
    "crumbs": [
      "Home",
      "Lecture HTML",
      "03 - Programming Basics"
    ]
  },
  {
    "objectID": "Lectures/03_Programming/index.html#review---the-r-essentials-short-list",
    "href": "Lectures/03_Programming/index.html#review---the-r-essentials-short-list",
    "title": "Programming Basics",
    "section": "Review - The R Essentials Short List",
    "text": "Review - The R Essentials Short List\nWe’re already touched on the “nouns” and “verbs” as the R Essentials\n. . .\n\nThe nouns are objects which store some sort of data or information\n\nThese are the vectors, data frames, and lists\nBut most R processes make objects e.g. your plots from last time were also objects\n\n\n. . .\n\nThe verbs are functions which do work on objects using arguments\n\n\nfunction_name(argument1 = value1, argument2 = value2, ...)\n\n\nLet’s dive a bit deeper into functions",
    "crumbs": [
      "Home",
      "Lecture HTML",
      "03 - Programming Basics"
    ]
  },
  {
    "objectID": "Lectures/03_Programming/index.html#functions---a-basic-example",
    "href": "Lectures/03_Programming/index.html#functions---a-basic-example",
    "title": "Programming Basics",
    "section": "Functions - A Basic Example",
    "text": "Functions - A Basic Example\nBroadly, a function starts with inputs, applies a process, and finally returns one or more outputs\n\nFunctions are everywhere and not just in programming, for example…\n\ninputs: eggs, chocolate chips, flour, sugar, butter\nprocess: preheat oven, mix ingredients, bake, let cool\noutputs: delicious chocolate chip cookies\n\n\nIt’s worth mentioning an algorithm is the high-level “recipe” (a procedural series of steps) while the function is the actual implementation, whether in code or otherwise",
    "crumbs": [
      "Home",
      "Lecture HTML",
      "03 - Programming Basics"
    ]
  },
  {
    "objectID": "Lectures/03_Programming/index.html#functions---functions-in-r",
    "href": "Lectures/03_Programming/index.html#functions---functions-in-r",
    "title": "Programming Basics",
    "section": "Functions - Functions in R",
    "text": "Functions - Functions in R\nIn R, the function output is usually assigned to a new variable\n\ncookie_batch &lt;- make_cookies(batch_size = 12)\n\n\nWorking with our R Essentials list:\n\nmake_cookies() is the function\nbatch_size is the (only listed) argument\n12 is the value we provide for the batch_size argument\ncookie_batch is the object which we assign the output\nfrom make_cookies() to",
    "crumbs": [
      "Home",
      "Lecture HTML",
      "03 - Programming Basics"
    ]
  },
  {
    "objectID": "Lectures/03_Programming/index.html#functions---functions-in-r-1",
    "href": "Lectures/03_Programming/index.html#functions---functions-in-r-1",
    "title": "Programming Basics",
    "section": "Functions - Functions in R",
    "text": "Functions - Functions in R\nIn R, the function output is usually assigned to a new variable\n\ncookie_batch &lt;- make_cookies(batch_size = 12)\n\n\nA command like this creates a new object in the global environment that can now be accessed using subsequent commands\n\n\nfull_chad &lt;- shove_food_in_face(to = chad, what = cookie_batch)\n\n\nRather than create full_chad we can also modify the original chad\n\n\nchad &lt;- shove_food_in_face(to = chad, what = cookie_batch)\n\n\nNote, both the to argument and output of shove_food_in_face() operate on chad",
    "crumbs": [
      "Home",
      "Lecture HTML",
      "03 - Programming Basics"
    ]
  },
  {
    "objectID": "Lectures/03_Programming/index.html#functions---working-with-arguments",
    "href": "Lectures/03_Programming/index.html#functions---working-with-arguments",
    "title": "Programming Basics",
    "section": "Functions - Working with Arguments",
    "text": "Functions - Working with Arguments\n\nArguments are the parameters we pass to a function and all arguments must be specified\nHowever, many arguments have default values\n\nThese values are used when a value is not specified\nHowever, they can be changed if desired when calling the function\n\nArguments without default values MUST be specified\nFinally, all argument values that are specified must* exist in the global environment when the function is called",
    "crumbs": [
      "Home",
      "Lecture HTML",
      "03 - Programming Basics"
    ]
  },
  {
    "objectID": "Lectures/03_Programming/index.html#functions---winning-the-argument",
    "href": "Lectures/03_Programming/index.html#functions---winning-the-argument",
    "title": "Programming Basics",
    "section": "Functions - Winning the Argument",
    "text": "Functions - Winning the Argument\n\nLet’s look at the help page for mean() and check the default method\n\n\n\n\n\n\n\nWe see x does not have defaults but trim and na.rm do",
    "crumbs": [
      "Home",
      "Lecture HTML",
      "03 - Programming Basics"
    ]
  },
  {
    "objectID": "Lectures/03_Programming/index.html#functions---winning-the-argument-1",
    "href": "Lectures/03_Programming/index.html#functions---winning-the-argument-1",
    "title": "Programming Basics",
    "section": "Functions - Winning the argument",
    "text": "Functions - Winning the argument\n\nSo x must be specified and must exist otherwise we get an errors\n\n\n#Specify a vector\nxx &lt;- c(1,2,3,4,5)\n\n#Get the mean\nmean(xx)\n\n[1] 3\n\n#But if we don't specify a value for x we get an error\nmean()\n\nError in mean.default(): argument \"x\" is missing, with no default\n\n#Furthermore, it must exist\nmean(yy)\n\nError in eval(expr, envir, enclos): object 'yy' not found",
    "crumbs": [
      "Home",
      "Lecture HTML",
      "03 - Programming Basics"
    ]
  },
  {
    "objectID": "Lectures/03_Programming/index.html#functions---winning-the-argument-2",
    "href": "Lectures/03_Programming/index.html#functions---winning-the-argument-2",
    "title": "Programming Basics",
    "section": "Functions - Winning the argument",
    "text": "Functions - Winning the argument\n\nYou don’t have to specify defaults but you can modify them\n\n\n#Specify a vector with an NA\nxx &lt;- c(1,2,3,4,5,NA)\n\n#By default, na.rm is set to false so NA is returned\nmean(xx)\n\n[1] NA\n\n#But we can modify na.rm to TRUE to drop NA's from x\nmean(xx, na.rm = TRUE)\n\n[1] 3\n\n\n\nWhen reading the help menu for a function, be sure to check the arguments to see what they do and which ones have defaults you may (or may not) want to modify",
    "crumbs": [
      "Home",
      "Lecture HTML",
      "03 - Programming Basics"
    ]
  },
  {
    "objectID": "Lectures/03_Programming/index.html#functions---back-to-the-environment",
    "href": "Lectures/03_Programming/index.html#functions---back-to-the-environment",
    "title": "Programming Basics",
    "section": "Functions - Back to the Environment",
    "text": "Functions - Back to the Environment\n\nWe previously discussed environments as the container where things created in R are “stored”\n\n\n\n\nThe current local session / workspace is the global environment where objects we create are stored by default\nBut we also talked about “scoping” which dictates how we access the R essentials we make\n\n\nRStudio’s Environment Pane",
    "crumbs": [
      "Home",
      "Lecture HTML",
      "03 - Programming Basics"
    ]
  },
  {
    "objectID": "Lectures/03_Programming/index.html#functions---scoping-and-local-environments",
    "href": "Lectures/03_Programming/index.html#functions---scoping-and-local-environments",
    "title": "Programming Basics",
    "section": "Functions - Scoping and Local Environments",
    "text": "Functions - Scoping and Local Environments\n\nOur workspace is the global environment so when we make an assignment this is where things usually get accessed\n\n\nx &lt;- 1:5\n\n\nBut dataframes and lists also create their own internal environments\n\n\ndf &lt;- tibble(x = c('a','b','c','d','e'))\n\n\nImportantly, we now have two x’s\n\n\n\nThe vector of numbers in our global environment\nThe variable/column of letters which exists inside the df tibble",
    "crumbs": [
      "Home",
      "Lecture HTML",
      "03 - Programming Basics"
    ]
  },
  {
    "objectID": "Lectures/03_Programming/index.html#functions---scoping-and-local-environments-1",
    "href": "Lectures/03_Programming/index.html#functions---scoping-and-local-environments-1",
    "title": "Programming Basics",
    "section": "Functions - Scoping and Local Environments",
    "text": "Functions - Scoping and Local Environments\n\nGetting to the vector x is easy, it exists in the global environment\n\n\n\nx\n\n[1] 1 2 3 4 5\n\n\n\n\n\n\n\nBut what about the variable inside of df?\nIt exists within df but the tibble is what’s inside the global environment\n\n\n\ndf\n\n# A tibble: 5 × 1\n  x    \n  &lt;chr&gt;\n1 a    \n2 b    \n3 c    \n4 d    \n5 e    \n\n\nSo how do we access the x in df?",
    "crumbs": [
      "Home",
      "Lecture HTML",
      "03 - Programming Basics"
    ]
  },
  {
    "objectID": "Lectures/03_Programming/index.html#accessing-data---tibbles-and-data-frames",
    "href": "Lectures/03_Programming/index.html#accessing-data---tibbles-and-data-frames",
    "title": "Programming Basics",
    "section": "Accessing Data - Tibbles and Data Frames",
    "text": "Accessing Data - Tibbles and Data Frames\nLet’s build on df and call it dummy_data\n\ndummy_data &lt;- tibble(char_var = c(\"A\", \"B\", \"C\", \"D\", \"E\"),\n                     num_var = c(1, 2, 3, 4, 5))\ndummy_data\n\n# A tibble: 5 × 2\n  char_var num_var\n  &lt;chr&gt;      &lt;dbl&gt;\n1 A              1\n2 B              2\n3 C              3\n4 D              4\n5 E              5\n\n\n\nSo dummy_data exists in the global environment while char_var and num_var exist in dummy_data’s local environment",
    "crumbs": [
      "Home",
      "Lecture HTML",
      "03 - Programming Basics"
    ]
  },
  {
    "objectID": "Lectures/03_Programming/index.html#accessing-data---accessing-by-position",
    "href": "Lectures/03_Programming/index.html#accessing-data---accessing-by-position",
    "title": "Programming Basics",
    "section": "Accessing Data - Accessing by Position",
    "text": "Accessing Data - Accessing by Position\n\nAs mentioned previously, all data frames and tibbles are rectangular using rows and columns with well defined positions\nIn R, we can access data with elements in well defined positions by using bracket notation []; this is indexing\nIn the case of rectangular data sets, a value by the ith row and jth column position using square brackets dummy_data[i,j]\n\n\n#Getting the value at the 2nd row and 1st column\ndummy_data[2,1]\n\n#&gt; \"A\"",
    "crumbs": [
      "Home",
      "Lecture HTML",
      "03 - Programming Basics"
    ]
  },
  {
    "objectID": "Lectures/03_Programming/index.html#accessing-data---accessing-by-position-1",
    "href": "Lectures/03_Programming/index.html#accessing-data---accessing-by-position-1",
    "title": "Programming Basics",
    "section": "Accessing Data - Accessing by Position",
    "text": "Accessing Data - Accessing by Position\n\nWe can also extract entire ith row (whole observations) or a set of rows by leaving the column index blank\n\n\n\n#Getting the entire third observation\ndummy_data[3,]\n#&gt; # A tibble: 1 × 2\n#&gt;   Char_var Num_var\n#&gt;   &lt;chr&gt;      &lt;dbl&gt;\n#&gt; 1 C              3\n\n#Getting the 3rd and 5th observations \ndummy_data[c(3,5),]\n#&gt; # A tibble: 2 × 2\n#&gt;   Num_var Char_var\n#&gt; &lt;chr&gt;      &lt;dbl&gt;\n#&gt; 1 C              3\n#&gt; 2 E              5\n\n\n. . .\n\nColumns (whole sets of variable values) can be accessed similarly but…",
    "crumbs": [
      "Home",
      "Lecture HTML",
      "03 - Programming Basics"
    ]
  },
  {
    "objectID": "Lectures/03_Programming/index.html#accessing-data---accessing-variables",
    "href": "Lectures/03_Programming/index.html#accessing-data---accessing-variables",
    "title": "Programming Basics",
    "section": "Accessing Data - Accessing Variables",
    "text": "Accessing Data - Accessing Variables\n\nData frames can also have an individual column accessed by the column/variable name\nYou’ll frequently see this using the $ operator\n\n\n#Pulling num_var using a $\ndummy_data$num_var\n\n#&gt; [1] 1 2 3 4 5\n\n. . .\n\nDouble brackets [[]] can also pass the column name as a character\n\n\n#Getting char_var as a string\ndummy_data[[\"char_var\"]]\n\n#&gt; [1] \"A\" \"B\" \"C\" \"D\" \"E\"",
    "crumbs": [
      "Home",
      "Lecture HTML",
      "03 - Programming Basics"
    ]
  },
  {
    "objectID": "Lectures/03_Programming/index.html#use-caution-when-accessing-data-frame-variables",
    "href": "Lectures/03_Programming/index.html#use-caution-when-accessing-data-frame-variables",
    "title": "Programming Basics",
    "section": "Use Caution When Accessing Data Frame Variables",
    "text": "Use Caution When Accessing Data Frame Variables\n\n\n\n\n\n\nImportant\n\n\n\nWhen using $ or [[]] to access a data frame or tibble variable, you get back a vector NOT a data frame\n\n\n\nis.data.frame(dummy_data$num_var)\n#&gt; FALSE\n\nis.vector(dummy_data$num_var)\n#&gt; TRUE  \n\nclass(dummy_data$num_var)\n#&gt; [1] \"numeric\"\n\n. . .\n\nThe object class matter a lot as we’ll be discussing soon with vectors",
    "crumbs": [
      "Home",
      "Lecture HTML",
      "03 - Programming Basics"
    ]
  },
  {
    "objectID": "Lectures/03_Programming/index.html#accessing-data---scoping-in-the-tidyverse",
    "href": "Lectures/03_Programming/index.html#accessing-data---scoping-in-the-tidyverse",
    "title": "Programming Basics",
    "section": "Accessing Data - Scoping in the tidyverse",
    "text": "Accessing Data - Scoping in the tidyverse\n\nThe tidyverse has its own ways of accessing column variables called tidy evaluation\nFunctions in the tidyverse try to behave consistently and intuitively by letting you work with variable names directly and returning outputs similar to your inputs (e.g. get a tibble when you operate on a tibble)\nWe’ll see this in action next time when we start to work with functions in the dplyr package, for example\n\n\ndplyr::select(dummy_data, num_var)",
    "crumbs": [
      "Home",
      "Lecture HTML",
      "03 - Programming Basics"
    ]
  },
  {
    "objectID": "Lectures/03_Programming/index.html#vectors---the-basics",
    "href": "Lectures/03_Programming/index.html#vectors---the-basics",
    "title": "Programming Basics",
    "section": "Vectors - The Basics",
    "text": "Vectors - The Basics\n\nAlthough we mainly deal in data frames, the vector is the garden variety R object\nWe make vectors using the c() command which means combine,  concatonate, or coerce\nAny given vector will always be the same “type” of data, or class\ne.g. we saw num_var in dummy_data was the “numeric” class\n\n\nclass(dummy_data$num_var)\n\n[1] \"numeric\"\n\n\n\nData frames are just a set of equal length vectors as columns, each with their own class",
    "crumbs": [
      "Home",
      "Lecture HTML",
      "03 - Programming Basics"
    ]
  },
  {
    "objectID": "Lectures/03_Programming/index.html#vectors---back-to-class",
    "href": "Lectures/03_Programming/index.html#vectors---back-to-class",
    "title": "Programming Basics",
    "section": "Vectors - Back to Class",
    "text": "Vectors - Back to Class\n\nSome of the most common data classes include:\n\n\n\nClass\nExamples\n\n\n\n\nlogical\nTRUE, FALSE\n\n\ninteger\n1, 357, -25, 0, etc\n\n\nnumeric\n6, 1.24, 5.00001, pi, etc\n\n\ncharacter\n“a”, “words with spaces”, “1”, etc\n\n\ndate\n2024-06-15",
    "crumbs": [
      "Home",
      "Lecture HTML",
      "03 - Programming Basics"
    ]
  },
  {
    "objectID": "Lectures/03_Programming/index.html#vectors---back-to-class-1",
    "href": "Lectures/03_Programming/index.html#vectors---back-to-class-1",
    "title": "Programming Basics",
    "section": "Vectors - Back to Class",
    "text": "Vectors - Back to Class\n\nWe can create either atomic vectors in the global environment or as part of a data frame using c()\n\n\n# Atomic vector examples -- # full name - abbreviation\nlgl_var &lt;- c(TRUE, FALSE)   # logical   = lgl\nint_var &lt;- c(1L, 6L, 10L)   # integer   = int\ndbl_var &lt;- c(1, 2.5, 4.5)   # double    = dbl\nchr_var &lt;- c(\"a\", \"b\", \"c\") # character = chr\n\n#We also use c() when adding a vector to a dataframe\ndf &lt;- data.frame(xx = c(1,2,3),\n                 yy = c(\"a\",\"b\",\"c\"))",
    "crumbs": [
      "Home",
      "Lecture HTML",
      "03 - Programming Basics"
    ]
  },
  {
    "objectID": "Lectures/03_Programming/index.html#vectors---logicals",
    "href": "Lectures/03_Programming/index.html#vectors---logicals",
    "title": "Programming Basics",
    "section": "Vectors - Logicals",
    "text": "Vectors - Logicals\n\nLogical values must be either TRUE or FALSE although they have convenient properties\nTRUE is equivalent to 1 and FALSE is 0\n\n\n\nTRUE + TRUE\n\n[1] 2\n\n\n\n\nBut R can evaluate logicals with some convenient operators\n\n\n\n& - AND\n| - OR\n! - NOT\n\n\n\nWe’ll see these come up a lot along with the equality operator ==",
    "crumbs": [
      "Home",
      "Lecture HTML",
      "03 - Programming Basics"
    ]
  },
  {
    "objectID": "Lectures/03_Programming/index.html#vectors---logical-sets",
    "href": "Lectures/03_Programming/index.html#vectors---logical-sets",
    "title": "Programming Basics",
    "section": "Vectors - Logical Sets",
    "text": "Vectors - Logical Sets",
    "crumbs": [
      "Home",
      "Lecture HTML",
      "03 - Programming Basics"
    ]
  },
  {
    "objectID": "Lectures/03_Programming/index.html#vectors---logical-and",
    "href": "Lectures/03_Programming/index.html#vectors---logical-and",
    "title": "Programming Basics",
    "section": "Vectors - Logical AND",
    "text": "Vectors - Logical AND\n\nx &lt;- TRUE; y &lt;- FALSE\n\n# Both are true\nx & y\n\n[1] FALSE",
    "crumbs": [
      "Home",
      "Lecture HTML",
      "03 - Programming Basics"
    ]
  },
  {
    "objectID": "Lectures/03_Programming/index.html#vectors---logical-or",
    "href": "Lectures/03_Programming/index.html#vectors---logical-or",
    "title": "Programming Basics",
    "section": "Vectors - Logical OR",
    "text": "Vectors - Logical OR\n\nx &lt;- TRUE; y &lt;- FALSE\n\n# Either is true\nx | y\n\n[1] TRUE",
    "crumbs": [
      "Home",
      "Lecture HTML",
      "03 - Programming Basics"
    ]
  },
  {
    "objectID": "Lectures/03_Programming/index.html#vectors---logical-xor",
    "href": "Lectures/03_Programming/index.html#vectors---logical-xor",
    "title": "Programming Basics",
    "section": "Vectors - Logical XOR",
    "text": "Vectors - Logical XOR\n\nx &lt;- TRUE; y &lt;- FALSE\n\n# Exactly one is true\nxor(x, y)\n\n[1] TRUE\n\n\n\nYou’ll get lots of practice using these BOO-lean operators",
    "crumbs": [
      "Home",
      "Lecture HTML",
      "03 - Programming Basics"
    ]
  },
  {
    "objectID": "Lectures/03_Programming/index.html#vectors---integer-and-double-vectors",
    "href": "Lectures/03_Programming/index.html#vectors---integer-and-double-vectors",
    "title": "Programming Basics",
    "section": "Vectors - Integer and Double Vectors",
    "text": "Vectors - Integer and Double Vectors\n\nThese two types are collectively called numeric vectors; double means “double precision” and is important for programming\nWhen you attempt to combine different data types into a single vector R will attempt to coerce a vector to its most generalizable class\n\n\n#Make a vector with logicals, integers (2L), and doubles\nvec &lt;- c(TRUE, FALSE, 2L, pi)\n\n#This gives a numeric vector\nclass(vec)\n\n[1] \"numeric\"\n\n\n\nAll logicals are integers and all integers are numerics but not vice versa",
    "crumbs": [
      "Home",
      "Lecture HTML",
      "03 - Programming Basics"
    ]
  },
  {
    "objectID": "Lectures/03_Programming/index.html#vectors---characters-and-strings",
    "href": "Lectures/03_Programming/index.html#vectors---characters-and-strings",
    "title": "Programming Basics",
    "section": "Vectors - Characters and Strings",
    "text": "Vectors - Characters and Strings\n\nCharacter values in R represent strings and are the most general class\nAll characters are surrounded by quotes, either double \" (\"hi\") or single ' ('bye')\nBest practice recommends using \" to create strings and then using ' if you have a quote inside of the string\n\n\nstring1 &lt;- \"a string\"\nstring1\n\n[1] \"a string\"\n\n\n\nstring2 &lt;- \"a 'string' value\"\nstring2\n\n[1] \"a 'string' value\"",
    "crumbs": [
      "Home",
      "Lecture HTML",
      "03 - Programming Basics"
    ]
  },
  {
    "objectID": "Lectures/03_Programming/index.html#vectors---dates",
    "href": "Lectures/03_Programming/index.html#vectors---dates",
    "title": "Programming Basics",
    "section": "Vectors - Dates",
    "text": "Vectors - Dates\n\nWe’ll discuss these in depth later with the lubridate package\nCalendar and time math is tricky, for now it’s enough to know these special classes exist\n\n\n#Get today's date\ntoday &lt;- Sys.Date()\ntoday\n\n[1] \"2024-07-12\"\n\n\n\n#Get today's class\nclass(today)\n\n[1] \"Date\"\n\n\n\n#Today's date as a \"POSIX\"\nas.POSIXct(today)\n\n[1] \"2024-07-12 UTC\"",
    "crumbs": [
      "Home",
      "Lecture HTML",
      "03 - Programming Basics"
    ]
  },
  {
    "objectID": "Lectures/03_Programming/index.html#vectors---indexing",
    "href": "Lectures/03_Programming/index.html#vectors---indexing",
    "title": "Programming Basics",
    "section": "Vectors - Indexing",
    "text": "Vectors - Indexing\n\nJust like data frames, vectors can be indexed using square brackets []\n\n\n#Make a vector\nx &lt;- c(0, 5, 10)\n\n#Then get the first value\nx[1]\n\n[1] 0\n\n\n\nTo get more than one value, index a vector by another vector\n\n\n#Get the 2nd and 3rd values\nx[c(2,3)]\n\n[1]  5 10",
    "crumbs": [
      "Home",
      "Lecture HTML",
      "03 - Programming Basics"
    ]
  },
  {
    "objectID": "Lectures/03_Programming/index.html#vectors---indexing-1",
    "href": "Lectures/03_Programming/index.html#vectors---indexing-1",
    "title": "Programming Basics",
    "section": "Vectors - Indexing",
    "text": "Vectors - Indexing\n\nYou can even index by an object that’s had a vector assigned to it\n\n\n#Make a new vector y\ny &lt;- c(2,3)\n\n#Use y to get the 2nd and 3rd values\nx[y]\n\n[1]  5 10\n\n\n\nThis is exceptionally powerful in programming",
    "crumbs": [
      "Home",
      "Lecture HTML",
      "03 - Programming Basics"
    ]
  },
  {
    "objectID": "Lectures/03_Programming/index.html#vectors---indexing-with-logicals",
    "href": "Lectures/03_Programming/index.html#vectors---indexing-with-logicals",
    "title": "Programming Basics",
    "section": "Vectors - Indexing with Logicals",
    "text": "Vectors - Indexing with Logicals\n\nLogical values can also be used to subset vectors\n\n\n#This is the same as x[1]\nx[c(TRUE, FALSE, FALSE)]\n\n[1] 0\n\n#This is equivalent to x[c(2,3)]\nx[c(FALSE, TRUE, TRUE)]\n\n[1]  5 10\n\n\n\n\n\n\n\n\nImportant\n\n\n\nThese boolean vectors need to be the same length as the vector you’re subsetting",
    "crumbs": [
      "Home",
      "Lecture HTML",
      "03 - Programming Basics"
    ]
  },
  {
    "objectID": "Lectures/03_Programming/index.html#vectors---indexing-with-logicals-1",
    "href": "Lectures/03_Programming/index.html#vectors---indexing-with-logicals-1",
    "title": "Programming Basics",
    "section": "Vectors - Indexing with Logicals",
    "text": "Vectors - Indexing with Logicals\nSince logicals can subset vectors we can do some clever subsetting\n\n#First, see which values are less than 6\nx &lt; 6\n\n[1]  TRUE  TRUE FALSE\n\n#Since this is a logical vector, we can use it to index x\n#i.e. return all values of x &lt; 6\nx[x &lt; 6] \n\n[1] 0 5\n\n#As always, we can also assign the boolean vector to an object\ny &lt;- (x &gt;= 5)\n#Now y will return all values of x &gt;= 5\nx[y]\n\n[1]  5 10\n\n\n\nWe’ll see this in action when we isolate data frames next time as well",
    "crumbs": [
      "Home",
      "Lecture HTML",
      "03 - Programming Basics"
    ]
  },
  {
    "objectID": "Lectures/03_Programming/index.html#vectors---summarizing-functions",
    "href": "Lectures/03_Programming/index.html#vectors---summarizing-functions",
    "title": "Programming Basics",
    "section": "Vectors - Summarizing Functions",
    "text": "Vectors - Summarizing Functions\n\nmean(), median(), min(), max(), sum(), and table() are all useful summary functions for vectors\nmean and sum in particular can be useful for computing proportions and counts of TRUE conditions, for example:\n\n\n#The number of x values greater than 0\nsum(x &gt; 0)\n\n[1] 2\n\n#The proportion of x values greater than 0\nmean(x &gt; 0)\n\n[1] 0.6666667",
    "crumbs": [
      "Home",
      "Lecture HTML",
      "03 - Programming Basics"
    ]
  },
  {
    "objectID": "Lectures/03_Programming/index.html#next-time",
    "href": "Lectures/03_Programming/index.html#next-time",
    "title": "Programming Basics",
    "section": "Next Time",
    "text": "Next Time\n\nHow to use these programming fundamentals to manipulate data frames\nWorking with the dplyr package for isolation to filter rows and select columns\nMaking new variables with mutate() and building a workflow with pipes |&gt;\nBe familiar with chapter 4 in R4DS",
    "crumbs": [
      "Home",
      "Lecture HTML",
      "03 - Programming Basics"
    ]
  },
  {
    "objectID": "Lectures/05_Transform/index.html",
    "href": "Lectures/05_Transform/index.html",
    "title": "Transforming data with dplyr",
    "section": "",
    "text": "Brief Review\nTransformations with dplyr\nFactors in R\nGroups and Summarization",
    "crumbs": [
      "Home",
      "Lecture HTML",
      "05 - Data Transformation"
    ]
  },
  {
    "objectID": "Lectures/05_Transform/index.html#agenda",
    "href": "Lectures/05_Transform/index.html#agenda",
    "title": "Transforming data with dplyr",
    "section": "",
    "text": "Brief Review\nTransformations with dplyr\nFactors in R\nGroups and Summarization",
    "crumbs": [
      "Home",
      "Lecture HTML",
      "05 - Data Transformation"
    ]
  },
  {
    "objectID": "Lectures/05_Transform/index.html#brief-review---workflows-with-the-pipe",
    "href": "Lectures/05_Transform/index.html#brief-review---workflows-with-the-pipe",
    "title": "Transforming data with dplyr",
    "section": "Brief Review - Workflows with the Pipe",
    "text": "Brief Review - Workflows with the Pipe\n\nConsider the following sequence of actions\n\nFind key\nUnlock car\nStart car\nDrive to school\nPark",
    "crumbs": [
      "Home",
      "Lecture HTML",
      "05 - Data Transformation"
    ]
  },
  {
    "objectID": "Lectures/05_Transform/index.html#brief-review---workflows-with-the-pipe-1",
    "href": "Lectures/05_Transform/index.html#brief-review---workflows-with-the-pipe-1",
    "title": "Transforming data with dplyr",
    "section": "Brief Review - Workflows with the Pipe",
    "text": "Brief Review - Workflows with the Pipe\n\nExpressed as a set of nested functions in R:\n\n\npark(drive(start_car(find(\"keys\")), to = \"campus\"))\n\n\nWriting it out using pipes gives a human intuitive structure:\n\n\nfind(\"keys\") |&gt;\n  start_car() |&gt;\n  drive(to = \"campus\") |&gt;\n  park()\n\n\n\n\n\n\n\nTip\n\n\n\nWrite data for computers but write code for humans",
    "crumbs": [
      "Home",
      "Lecture HTML",
      "05 - Data Transformation"
    ]
  },
  {
    "objectID": "Lectures/05_Transform/index.html#brief-review---piping-to-other-arguments",
    "href": "Lectures/05_Transform/index.html#brief-review---piping-to-other-arguments",
    "title": "Transforming data with dplyr",
    "section": "Brief Review - Piping to Other Arguments",
    "text": "Brief Review - Piping to Other Arguments\n\nTo send results to a function argument other than first one or to use the previous result for multiple arguments use _\n\n\nnhanes |&gt;\n  filter(sex == \"Female\") |&gt;\n  lm(bp_sys_mmhg ~ age, data = _) #&lt;&lt;\n\n\nCall:\nlm(formula = bp_sys_mmhg ~ age, data = filter(nhanes, sex == \n    \"Female\"))\n\nCoefficients:\n(Intercept)          age  \n    92.7765       0.6337",
    "crumbs": [
      "Home",
      "Lecture HTML",
      "05 - Data Transformation"
    ]
  },
  {
    "objectID": "Lectures/05_Transform/index.html#brief-review---piping-to-other-arguments-1",
    "href": "Lectures/05_Transform/index.html#brief-review---piping-to-other-arguments-1",
    "title": "Transforming data with dplyr",
    "section": "Brief Review - Piping to Other Arguments",
    "text": "Brief Review - Piping to Other Arguments\n\nIf using %&gt;% from magrittr, you use .\n\n\nnhanes %&gt;%\n  filter(sex == \"Female\") %&gt;%\n  lm(bp_sys_mmhg ~ age, data = .) #&lt;&lt;\n\n\nCall:\nlm(formula = bp_sys_mmhg ~ age, data = .)\n\nCoefficients:\n(Intercept)          age  \n    92.7765       0.6337  \n\n\n\n. can be passed to multiple arguments in the same function unlike |&gt;\nFor more details on magrittr’s pipes check this 2021 blog and this post by Hadley comparing |&gt; and %&gt;%",
    "crumbs": [
      "Home",
      "Lecture HTML",
      "05 - Data Transformation"
    ]
  },
  {
    "objectID": "Lectures/05_Transform/index.html#brief-review---last-time-on-dplyr",
    "href": "Lectures/05_Transform/index.html#brief-review---last-time-on-dplyr",
    "title": "Transforming data with dplyr",
    "section": "Brief Review - Last Time on dplyr",
    "text": "Brief Review - Last Time on dplyr",
    "crumbs": [
      "Home",
      "Lecture HTML",
      "05 - Data Transformation"
    ]
  },
  {
    "objectID": "Lectures/05_Transform/index.html#brief-review---last-time-on-dplyr-1",
    "href": "Lectures/05_Transform/index.html#brief-review---last-time-on-dplyr-1",
    "title": "Transforming data with dplyr",
    "section": "Brief Review - Last Time on dplyr",
    "text": "Brief Review - Last Time on dplyr\n\nFirst was isolation to focus on data of interest\n\nfilter() keeps rows that match specified conditions by resolving the variable to a logical vector\nselect() extracts columns from a data set like $ but more consistent and verstatile (i.e. better)\narrange() will sort a data frame row-wise by a specified column / variable; can wrap the variable in desc() for descending order\nslice() and its relatives index rows by location; like [] but better\n\nOther dplyr utility includes transformation and summarization",
    "crumbs": [
      "Home",
      "Lecture HTML",
      "05 - Data Transformation"
    ]
  },
  {
    "objectID": "Lectures/05_Transform/index.html#transformation---nhanes-data",
    "href": "Lectures/05_Transform/index.html#transformation---nhanes-data",
    "title": "Transforming data with dplyr",
    "section": "Transformation - NHANES Data",
    "text": "Transformation - NHANES Data\nWith NHANES, today we have the full set of 51761 observations\n\nglimpse(nhanes, width = 60)\n\nRows: 51,761\nColumns: 14\n$ seqn            &lt;dbl&gt; 2, 5, 6, 7, 10, 12, 13, 14, 15, 16…\n$ exam            &lt;fct&gt; 1999, 1999, 1999, 1999, 1999, 1999…\n$ age             &lt;dbl&gt; 77, 49, 19, 59, 43, 37, 70, 81, 38…\n$ sex             &lt;fct&gt; Male, Male, Female, Female, Male, …\n$ race_ethnicity  &lt;fct&gt; Non-Hispanic White, Non-Hispanic W…\n$ education       &lt;fct&gt; College graduate, College graduate…\n$ bp_sys_mmhg     &lt;dbl&gt; 100.6667, 122.0000, 114.6667, 125.…\n$ bp_dia_mmhg     &lt;dbl&gt; 56.66667, 82.66667, 68.00000, 80.0…\n$ bp_controlled   &lt;chr&gt; \"Yes\", \"Yes\", \"Yes\", \"Yes\", \"No\", …\n$ bp_high_aware   &lt;dbl&gt; 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0…\n$ bp_meds         &lt;chr&gt; \"No\", \"Yes\", \"No\", \"No\", \"No\", \"Ye…\n$ acr_mgg         &lt;dbl&gt; 6.275862, 3.546512, 4.032258, 5.23…\n$ chol_hdl_mgdl   &lt;dbl&gt; 54, 42, 61, 105, 51, 38, 49, 40, 5…\n$ chol_total_mgdl &lt;dbl&gt; 215, 279, 153, 245, 140, 156, 314,…",
    "crumbs": [
      "Home",
      "Lecture HTML",
      "05 - Data Transformation"
    ]
  },
  {
    "objectID": "Lectures/05_Transform/index.html#transformation---dplyrs-rules",
    "href": "Lectures/05_Transform/index.html#transformation---dplyrs-rules",
    "title": "Transforming data with dplyr",
    "section": "Transformation - dplyr’s rules",
    "text": "Transformation - dplyr’s rules\n\ndplyr has the usual tidyverse conventions\n\nFirst argument is always a data frame\nSubsequent arguments say what to do with that data frame\nAlways return a data frame\n\n\n. . .\n\nIt also follows standard R conventions (unlike some other packages)\n\nDoesntn’t modify in place i.e. makes copies when assigning\nConducts lazy evaluation i.e. objects are only evaluated when called",
    "crumbs": [
      "Home",
      "Lecture HTML",
      "05 - Data Transformation"
    ]
  },
  {
    "objectID": "Lectures/05_Transform/index.html#transformation---more-of-dplyrs-functions",
    "href": "Lectures/05_Transform/index.html#transformation---more-of-dplyrs-functions",
    "title": "Transforming data with dplyr",
    "section": "Transformation - More of dplyr’s Functions",
    "text": "Transformation - More of dplyr’s Functions\n\nA non-comprehensive list of dplyr’s single-table functions\n\nselect, rename: select / rename specific columns by name\npull: extract a data frame column as a vector\nfilter: pick rows matching criteria\nslice: pick rows using location indexing\narrange: reorder rows by variables\nmutate: add new variables based on existing variables\nsummarise: reduce variables to aggregate measures\ncount: special case of summarise that computes frequencies.\nMany more!",
    "crumbs": [
      "Home",
      "Lecture HTML",
      "05 - Data Transformation"
    ]
  },
  {
    "objectID": "Lectures/05_Transform/index.html#transformation---using-mutate",
    "href": "Lectures/05_Transform/index.html#transformation---using-mutate",
    "title": "Transforming data with dplyr",
    "section": "Transformation - Using mutate()",
    "text": "Transformation - Using mutate()\n\nmutate() defines and inserts a new variable into a data frameor tibble\nThe new variable is derived from columns that already exist in the data frame via data masking\nOther arguments control includes where the new variable is inserted\nAn important optional argument is .by which we’ll discuss soon",
    "crumbs": [
      "Home",
      "Lecture HTML",
      "05 - Data Transformation"
    ]
  },
  {
    "objectID": "Lectures/05_Transform/index.html#transformation---mutate-for-numerics",
    "href": "Lectures/05_Transform/index.html#transformation---mutate-for-numerics",
    "title": "Transforming data with dplyr",
    "section": "Transformation - mutate() for Numerics",
    "text": "Transformation - mutate() for Numerics\n\nmutate() is useful for algebraic manipulation\nFor example, let’s make LDL cholesterol from total andHDL cholesterol\n\n\nnhanes &lt;- \n  nhanes |&gt;\n    mutate(chol_ldl_mgdl = chol_total_mgdl - chol_hdl_mgdl,\n           .before = chol_total_mgdl\n    )\n\n\nNote the use of data masking",
    "crumbs": [
      "Home",
      "Lecture HTML",
      "05 - Data Transformation"
    ]
  },
  {
    "objectID": "Lectures/05_Transform/index.html#transformation---always-check-your-work",
    "href": "Lectures/05_Transform/index.html#transformation---always-check-your-work",
    "title": "Transforming data with dplyr",
    "section": "Transformation - Always Check Your Work",
    "text": "Transformation - Always Check Your Work\n\nglimpse(nhanes, width = 60)\n\nRows: 51,761\nColumns: 15\n$ seqn            &lt;dbl&gt; 2, 5, 6, 7, 10, 12, 13, 14, 15, 16…\n$ exam            &lt;fct&gt; 1999, 1999, 1999, 1999, 1999, 1999…\n$ age             &lt;dbl&gt; 77, 49, 19, 59, 43, 37, 70, 81, 38…\n$ sex             &lt;fct&gt; Male, Male, Female, Female, Male, …\n$ race_ethnicity  &lt;fct&gt; Non-Hispanic White, Non-Hispanic W…\n$ education       &lt;fct&gt; College graduate, College graduate…\n$ bp_sys_mmhg     &lt;dbl&gt; 100.6667, 122.0000, 114.6667, 125.…\n$ bp_dia_mmhg     &lt;dbl&gt; 56.66667, 82.66667, 68.00000, 80.0…\n$ bp_controlled   &lt;chr&gt; \"Yes\", \"Yes\", \"Yes\", \"Yes\", \"No\", …\n$ bp_high_aware   &lt;dbl&gt; 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0…\n$ bp_meds         &lt;chr&gt; \"No\", \"Yes\", \"No\", \"No\", \"No\", \"Ye…\n$ acr_mgg         &lt;dbl&gt; 6.275862, 3.546512, 4.032258, 5.23…\n$ chol_hdl_mgdl   &lt;dbl&gt; 54, 42, 61, 105, 51, 38, 49, 40, 5…\n$ chol_ldl_mgdl   &lt;dbl&gt; 161, 237, 92, 140, 89, 118, 265, 1…\n$ chol_total_mgdl &lt;dbl&gt; 215, 279, 153, 245, 140, 156, 314,…",
    "crumbs": [
      "Home",
      "Lecture HTML",
      "05 - Data Transformation"
    ]
  },
  {
    "objectID": "Lectures/05_Transform/index.html#transformation---conditional-variables",
    "href": "Lectures/05_Transform/index.html#transformation---conditional-variables",
    "title": "Transforming data with dplyr",
    "section": "Transformation - Conditional Variables",
    "text": "Transformation - Conditional Variables\n\nBut what about non-numeric outputs e.g. these in NHANES\n\n\nalbuminuria:\n\n‘Yes’ if ACR &gt; 30 mg / g\n‘No’ otherwise.\n\nbp_cat:\n\n‘Normotensive’ if SBP &lt; 130 and DBP &lt; 80 mm Hg\n‘Hypertension’ if SBP is 130 to &lt; 140 or DBP is 80 to &lt; 90 mm Hg\n‘Uncontrolled’ if SBP is &gt; 140 or DBP is &gt; 90 mm Hg",
    "crumbs": [
      "Home",
      "Lecture HTML",
      "05 - Data Transformation"
    ]
  },
  {
    "objectID": "Lectures/05_Transform/index.html#transformation---mutate-conditionally",
    "href": "Lectures/05_Transform/index.html#transformation---mutate-conditionally",
    "title": "Transforming data with dplyr",
    "section": "Transformation - mutate() Conditionally",
    "text": "Transformation - mutate() Conditionally\n\n\nmutate() can also be used to create conditional variableswhere one state is for condition x and another is for condition y\nInstead of numeric expressions, we can generate vectors of logicals which inform how the new variables are created\ndplyr provides two main functions for making conditional changes driven by logical vectors\n\nif_else() for variables with 2 categories where one condition evaluates to TRUE and the other evaluates to FALSE\ncase_when() for variables with &gt;2 categories which is more flexible but more complex to code",
    "crumbs": [
      "Home",
      "Lecture HTML",
      "05 - Data Transformation"
    ]
  },
  {
    "objectID": "Lectures/05_Transform/index.html#transformation---mutate-with-if_else",
    "href": "Lectures/05_Transform/index.html#transformation---mutate-with-if_else",
    "title": "Transforming data with dplyr",
    "section": "Transformation - mutate() with if_else()",
    "text": "Transformation - mutate() with if_else()\n\nalbuminuria using if_else():\n\n‘Yes’ if ACR &gt; 30 mg / g\n‘No’ otherwise.\n\n\n\nnhanes &lt;- nhanes |&gt; \n  mutate(\n    albuminuria = if_else(\n      condition = acr_mgg &gt; 30,\n      true = 'Yes', \n      false = 'No'\n    )\n  )\n\n\nif_else() relies on the boolean vector from condition followed by the true and false results",
    "crumbs": [
      "Home",
      "Lecture HTML",
      "05 - Data Transformation"
    ]
  },
  {
    "objectID": "Lectures/05_Transform/index.html#transformation---always-check-your-work-1",
    "href": "Lectures/05_Transform/index.html#transformation---always-check-your-work-1",
    "title": "Transforming data with dplyr",
    "section": "Transformation - Always Check Your Work",
    "text": "Transformation - Always Check Your Work\n\n\n\nYes, this will slow you down in the short term\nYes, it is very much worth it.\n\n\ntable(nhanes$albuminuria, nhanes$acr_mgg &gt; 30)\n\n     \n      FALSE  TRUE\n  No  44460     0\n  Yes     0  6263",
    "crumbs": [
      "Home",
      "Lecture HTML",
      "05 - Data Transformation"
    ]
  },
  {
    "objectID": "Lectures/05_Transform/index.html#transformation---using-case_when",
    "href": "Lectures/05_Transform/index.html#transformation---using-case_when",
    "title": "Transforming data with dplyr",
    "section": "Transformation - Using case_when()",
    "text": "Transformation - Using case_when()\n\nbp_cat using case_when():\n\n‘Normotensive’ if SBP &lt; 130 and DBP &lt; 80 mm Hg\n‘Hypertension’ if SBP is 130 to &lt; 140 or DBP is 80 to &lt; 90 mm Hg\n‘Uncontrolled’ if SBP is &gt; 140 or DBP is &gt; 90 mm Hg\n\n\n\nnhanes &lt;- nhanes |&gt; \n  mutate(\n    bp_cat = case_when(\n      bp_sys_mmhg  &lt; 130 & bp_dia_mmhg  &lt; 80 ~ \"Normotensive\",\n      bp_sys_mmhg  &lt; 140 & bp_dia_mmhg  &lt; 90 ~ \"Hypertension\",\n      bp_sys_mmhg &gt;= 140 | bp_dia_mmhg &gt;= 90 ~ \"Uncontrolled\",\n      TRUE ~ NA_character_ # added for clarity\n    )\n  )",
    "crumbs": [
      "Home",
      "Lecture HTML",
      "05 - Data Transformation"
    ]
  },
  {
    "objectID": "Lectures/05_Transform/index.html#transformation---always-check-your-work-2",
    "href": "Lectures/05_Transform/index.html#transformation---always-check-your-work-2",
    "title": "Transforming data with dplyr",
    "section": "Transformation - Always Check your Work!",
    "text": "Transformation - Always Check your Work!\n\nGet creative depending on what your output is\n\n\nggplot(nhanes) + \n  aes(x = bp_sys_mmhg, y = bp_dia_mmhg, col = bp_cat) + \n  geom_point()",
    "crumbs": [
      "Home",
      "Lecture HTML",
      "05 - Data Transformation"
    ]
  },
  {
    "objectID": "Lectures/05_Transform/index.html#transformation---question",
    "href": "Lectures/05_Transform/index.html#transformation---question",
    "title": "Transforming data with dplyr",
    "section": "Transformation - Question",
    "text": "Transformation - Question\n\nWhat kind of variables do you think albuminura and bp_cat are?\n\n. . .\n\nnhanes |&gt; select(c(albuminuria, bp_cat))\n\n# A tibble: 51,761 × 2\n   albuminuria bp_cat      \n   &lt;chr&gt;       &lt;chr&gt;       \n 1 No          Normotensive\n 2 No          Hypertension\n 3 No          Normotensive\n 4 No          Hypertension\n 5 No          Uncontrolled\n 6 Yes         Uncontrolled\n 7 Yes         Hypertension\n 8 No          Hypertension\n 9 No          Normotensive\n10 No          Uncontrolled\n# ℹ 51,751 more rows\n\n\n\nThey’re characters but we want them as categorical variables",
    "crumbs": [
      "Home",
      "Lecture HTML",
      "05 - Data Transformation"
    ]
  },
  {
    "objectID": "Lectures/05_Transform/index.html#factors---under-the-hood-in-r",
    "href": "Lectures/05_Transform/index.html#factors---under-the-hood-in-r",
    "title": "Transforming data with dplyr",
    "section": "Factors - Under the Hood in R",
    "text": "Factors - Under the Hood in R\n\nFactors are how we store true categorical information\nCategorical variables have a fixed set of finite and pre-definedvalues called levels\n\n\nfctr &lt;- factor(\n  x = c(1, 2, 2, 3),\n  levels = c(1,2,3),\n  labels = c(\"A\", \"B\", \"C\")\n)\n\nfctr\n\n[1] A B B C\nLevels: A B C\n\n\n\nBut under the hood, R is really storing these as integers 1, 2, 3, etc.",
    "crumbs": [
      "Home",
      "Lecture HTML",
      "05 - Data Transformation"
    ]
  },
  {
    "objectID": "Lectures/05_Transform/index.html#factors---their-behavior-can-beconfusing",
    "href": "Lectures/05_Transform/index.html#factors---their-behavior-can-beconfusing",
    "title": "Transforming data with dplyr",
    "section": "Factors - Their Behavior Can Be…Confusing",
    "text": "Factors - Their Behavior Can Be…Confusing\n\n\n\n#Make a factor\nx1 &lt;- factor(c(\"Dec\", \"Apr\", \"May\", \"Jan\"))\nx1\n\n[1] Dec Apr May Jan\nLevels: Apr Dec Jan May\n\n#Now sort it\nsort(x1)\n\n[1] Apr Dec Jan May\nLevels: Apr Dec Jan May\n\n#Now let's add \"Mar\" to it\nc(x1, \"Mar\")\n\n[1] \"2\"   \"1\"   \"4\"   \"3\"   \"Mar\"\n\n#Instead lets replace May with Mar\nx1[3] &lt;- \"Mar\"\nx1\n\n[1] Dec  Apr  &lt;NA&gt; Jan \nLevels: Apr Dec Jan May",
    "crumbs": [
      "Home",
      "Lecture HTML",
      "05 - Data Transformation"
    ]
  },
  {
    "objectID": "Lectures/05_Transform/index.html#factors---when-to-convert-to-a-factor",
    "href": "Lectures/05_Transform/index.html#factors---when-to-convert-to-a-factor",
    "title": "Transforming data with dplyr",
    "section": "Factors - When to Convert to a Factor",
    "text": "Factors - When to Convert to a Factor\n\nConvert character/numeric vectors to factors if:\n\nYou want to impose an ordering that is not alphabetical\n\n\n\ncount(nhanes, bp_cat)\n\n# A tibble: 3 × 2\n  bp_cat           n\n  &lt;chr&gt;        &lt;int&gt;\n1 Hypertension 10325\n2 Normotensive 31075\n3 Uncontrolled 10361",
    "crumbs": [
      "Home",
      "Lecture HTML",
      "05 - Data Transformation"
    ]
  },
  {
    "objectID": "Lectures/05_Transform/index.html#factors---when-to-convert-to-a-factor-1",
    "href": "Lectures/05_Transform/index.html#factors---when-to-convert-to-a-factor-1",
    "title": "Transforming data with dplyr",
    "section": "Factors - When to Convert to a Factor",
    "text": "Factors - When to Convert to a Factor\n\nConvert character/numeric vectors to factors if:\n\nYou want to impose an ordering that is not alphabetical\n\n\n\nnhanes &lt;- nhanes |&gt; \n  mutate(\n    bp_cat = factor(\n      x = bp_cat, \n      levels = c('Normotensive', 'Hypertension', 'Uncontrolled')\n    )\n  )\n\ncount(nhanes, bp_cat)\n\n# A tibble: 3 × 2\n  bp_cat           n\n  &lt;fct&gt;        &lt;int&gt;\n1 Normotensive 31075\n2 Hypertension 10325\n3 Uncontrolled 10361",
    "crumbs": [
      "Home",
      "Lecture HTML",
      "05 - Data Transformation"
    ]
  },
  {
    "objectID": "Lectures/05_Transform/index.html#factors---when-to-convert-to-a-factor-2",
    "href": "Lectures/05_Transform/index.html#factors---when-to-convert-to-a-factor-2",
    "title": "Transforming data with dplyr",
    "section": "Factors - When to Convert to a Factor",
    "text": "Factors - When to Convert to a Factor\n\nConvert character/numeric vectors to factors if:\n\nYou have a numeric variable that should be categorical or groups\n\n\n\ncount(nhanes, bp_high_aware)\n\n# A tibble: 2 × 2\n  bp_high_aware     n\n          &lt;dbl&gt; &lt;int&gt;\n1             0 34514\n2             1 17247",
    "crumbs": [
      "Home",
      "Lecture HTML",
      "05 - Data Transformation"
    ]
  },
  {
    "objectID": "Lectures/05_Transform/index.html#factors---when-to-convert-to-a-factor-3",
    "href": "Lectures/05_Transform/index.html#factors---when-to-convert-to-a-factor-3",
    "title": "Transforming data with dplyr",
    "section": "Factors - When to Convert to a Factor",
    "text": "Factors - When to Convert to a Factor\n\nConvert character/numeric vectors to factors if:\n\nYou have a numeric variable that should be categorical or groups\n\n\n\nnhanes &lt;- nhanes |&gt; \n  mutate(\n    bp_high_aware = factor(\n      x = bp_high_aware, \n      levels = c(0, 1),\n      labels = c(\"No\", \"Yes\")\n    )\n  )\n\ncount(nhanes, bp_high_aware)\n\n# A tibble: 2 × 2\n  bp_high_aware     n\n  &lt;fct&gt;         &lt;int&gt;\n1 No            34514\n2 Yes           17247",
    "crumbs": [
      "Home",
      "Lecture HTML",
      "05 - Data Transformation"
    ]
  },
  {
    "objectID": "Lectures/05_Transform/index.html#factors---additional-utility-with-forcats",
    "href": "Lectures/05_Transform/index.html#factors---additional-utility-with-forcats",
    "title": "Transforming data with dplyr",
    "section": "Factors - Additional Utility with forcats",
    "text": "Factors - Additional Utility with forcats\n\nBase R has very few functions to meaningfully engage withfactors, instead we’ll use the forcats package\nNearly every function begins with fct_\nMuch of the confusing factor behavior with factors we discussed can be avoided by using forcats",
    "crumbs": [
      "Home",
      "Lecture HTML",
      "05 - Data Transformation"
    ]
  },
  {
    "objectID": "Lectures/05_Transform/index.html#factors---relevel-factors",
    "href": "Lectures/05_Transform/index.html#factors---relevel-factors",
    "title": "Transforming data with dplyr",
    "section": "Factors - Relevel Factors",
    "text": "Factors - Relevel Factors\n\nRelevel factors (change their order) with fct_relevel\n\n\nlibrary(forcats)\n\nnhanes |&gt; \n  mutate(\n    bp_cat = fct_relevel(\n      bp_cat, 'Uncontrolled', 'Hypertension'\n    )\n  ) |&gt; \n  count(bp_cat)\n\n# A tibble: 3 × 2\n  bp_cat           n\n  &lt;fct&gt;        &lt;int&gt;\n1 Uncontrolled 10361\n2 Hypertension 10325\n3 Normotensive 31075\n\n\n\nfct_reorder() uses numeric/variable reordering e.g. by frequency",
    "crumbs": [
      "Home",
      "Lecture HTML",
      "05 - Data Transformation"
    ]
  },
  {
    "objectID": "Lectures/05_Transform/index.html#factors---coding-na-to-its-own-level",
    "href": "Lectures/05_Transform/index.html#factors---coding-na-to-its-own-level",
    "title": "Transforming data with dplyr",
    "section": "Factors - Coding NA to its Own Level",
    "text": "Factors - Coding NA to its Own Level\n\nfct_na_value_to_level() sets factors with missing values (i.e. NA) levels to their own category\n\n\ncount(nhanes, education)\n\n# A tibble: 4 × 2\n  education                    n\n  &lt;fct&gt;                    &lt;int&gt;\n1 Less than high school    14389\n2 High school/some college 26076\n3 College graduate         10344\n4 &lt;NA&gt;                       952",
    "crumbs": [
      "Home",
      "Lecture HTML",
      "05 - Data Transformation"
    ]
  },
  {
    "objectID": "Lectures/05_Transform/index.html#factors---coding-na-to-its-own-level-1",
    "href": "Lectures/05_Transform/index.html#factors---coding-na-to-its-own-level-1",
    "title": "Transforming data with dplyr",
    "section": "Factors - Coding NA to its Own Level",
    "text": "Factors - Coding NA to its Own Level\n\n\nnhanes &lt;- nhanes |&gt; \n  mutate(\n    education = fct_na_value_to_level(\n      f = education,\n      level = 'Missing' \n    )\n  )\n\ncount(nhanes, education)\n\n# A tibble: 4 × 2\n  education                    n\n  &lt;fct&gt;                    &lt;int&gt;\n1 Less than high school    14389\n2 High school/some college 26076\n3 College graduate         10344\n4 Missing                    952\n\n\n\n\nCan do the reverse and convert levels to NA with fct_na_level_value()",
    "crumbs": [
      "Home",
      "Lecture HTML",
      "05 - Data Transformation"
    ]
  },
  {
    "objectID": "Lectures/05_Transform/index.html#factors---add-additional-levels",
    "href": "Lectures/05_Transform/index.html#factors---add-additional-levels",
    "title": "Transforming data with dplyr",
    "section": "Factors - Add Additional Levels",
    "text": "Factors - Add Additional Levels\n\nAdd levels to a factor with fct_expand()\n\n\nnhanes &lt;- nhanes |&gt;\n  mutate(\n    education = fct_expand(\n      f = education,\n      \"Graduate Degree\"\n    )\n  )\n\ncount(nhanes, education, .drop = FALSE)\n\n# A tibble: 5 × 2\n  education                    n\n  &lt;fct&gt;                    &lt;int&gt;\n1 Less than high school    14389\n2 High school/some college 26076\n3 College graduate         10344\n4 Missing                    952\n5 Graduate Degree              0",
    "crumbs": [
      "Home",
      "Lecture HTML",
      "05 - Data Transformation"
    ]
  },
  {
    "objectID": "Lectures/05_Transform/index.html#factors---dropping-unused-levels",
    "href": "Lectures/05_Transform/index.html#factors---dropping-unused-levels",
    "title": "Transforming data with dplyr",
    "section": "Factors - Dropping Unused Levels",
    "text": "Factors - Dropping Unused Levels\n\nDrop unused levels with fct_drop()\n\n\nnhanes &lt;- nhanes |&gt;\n  mutate(\n    education = fct_drop(\n      f = education\n    )\n  )\n\ncount(nhanes, education, .drop = FALSE)\n\n# A tibble: 4 × 2\n  education                    n\n  &lt;fct&gt;                    &lt;int&gt;\n1 Less than high school    14389\n2 High school/some college 26076\n3 College graduate         10344\n4 Missing                    952",
    "crumbs": [
      "Home",
      "Lecture HTML",
      "05 - Data Transformation"
    ]
  },
  {
    "objectID": "Lectures/05_Transform/index.html#factors---collaps-levels-together",
    "href": "Lectures/05_Transform/index.html#factors---collaps-levels-together",
    "title": "Transforming data with dplyr",
    "section": "Factors - Collaps Levels Together",
    "text": "Factors - Collaps Levels Together\n\nCollapse factors (lump categories) with fct_collapse()\n\n\nnhanes |&gt; \n  mutate(\n    bp_cat = fct_collapse(\n      bp_cat, \n      \"Hypertensive\" = c(\"Hypertension\", \"Uncontrolled\")\n    )\n  ) |&gt; \n  count(bp_cat)\n\n# A tibble: 2 × 2\n  bp_cat           n\n  &lt;fct&gt;        &lt;int&gt;\n1 Normotensive 31075\n2 Hypertensive 20686\n\n\n\nfct_recode() is a more explicit but more powerful recoding tool",
    "crumbs": [
      "Home",
      "Lecture HTML",
      "05 - Data Transformation"
    ]
  },
  {
    "objectID": "Lectures/05_Transform/index.html#factors---collaps-levels-together-1",
    "href": "Lectures/05_Transform/index.html#factors---collaps-levels-together-1",
    "title": "Transforming data with dplyr",
    "section": "Factors - Collaps Levels Together",
    "text": "Factors - Collaps Levels Together\n\nExplicitly recode levels manually with fct_recode()\n\n\nnhanes |&gt; \n  mutate(\n    education = fct_recode(\n      education,\n      # new level = old level\n      'less_than_hs' = 'Less than high school',\n      'hs_some_college' = 'High school/some college',\n      'college_grad' = 'College graduate'        \n    )\n  ) |&gt; \n  count(education)\n\n# A tibble: 4 × 2\n  education           n\n  &lt;fct&gt;           &lt;int&gt;\n1 less_than_hs    14389\n2 hs_some_college 26076\n3 college_grad    10344\n4 Missing           952",
    "crumbs": [
      "Home",
      "Lecture HTML",
      "05 - Data Transformation"
    ]
  },
  {
    "objectID": "Lectures/05_Transform/index.html#summarization---aggregation-with-dplyr",
    "href": "Lectures/05_Transform/index.html#summarization---aggregation-with-dplyr",
    "title": "Transforming data with dplyr",
    "section": "Summarization - Aggregation with dplyr",
    "text": "Summarization - Aggregation with dplyr\n\nIn dplyr you can use summarise() to summarize your data\nAs expected, using summarise() on a data frame returns a data frame\n\n\nnhanes |&gt;\n  summarise(\n    mean_sbp = mean(bp_sys_mmhg),\n    mean_dbp = mean(bp_dia_mmhg),\n    prevalence_alb = mean(albuminuria == 'Yes', na.rm = TRUE)\n  )\n\n# A tibble: 1 × 3\n  mean_sbp mean_dbp prevalence_alb\n     &lt;dbl&gt;    &lt;dbl&gt;          &lt;dbl&gt;\n1     124.     70.5          0.123\n\n\n\nOther aggregations like sum(), count(), n(), etc work as well",
    "crumbs": [
      "Home",
      "Lecture HTML",
      "05 - Data Transformation"
    ]
  },
  {
    "objectID": "Lectures/05_Transform/index.html#summarization---using-.by",
    "href": "Lectures/05_Transform/index.html#summarization---using-.by",
    "title": "Transforming data with dplyr",
    "section": "Summarization - Using .by",
    "text": "Summarization - Using .by\n\nA very powerful argument is .by which lets you select columns to group by for the summarise operations\n\n\nnhanes |&gt;\n  summarise(\n    mean_sbp = mean(bp_sys_mmhg),\n    prevalence_alb = mean(albuminuria == 'Yes', na.rm = TRUE),\n    .by = sex)\n\n# A tibble: 2 × 3\n  sex    mean_sbp prevalence_alb\n  &lt;fct&gt;     &lt;dbl&gt;          &lt;dbl&gt;\n1 Male       126.          0.121\n2 Female     123.          0.126",
    "crumbs": [
      "Home",
      "Lecture HTML",
      "05 - Data Transformation"
    ]
  },
  {
    "objectID": "Lectures/05_Transform/index.html#grouping---using-group_by",
    "href": "Lectures/05_Transform/index.html#grouping---using-group_by",
    "title": "Transforming data with dplyr",
    "section": "Grouping - Using group_by()",
    "text": "Grouping - Using group_by()\n\nThe group_by() function gives the same functionality\n\n\nnhanes |&gt;\n  group_by(sex) |&gt; \n  summarise(mean_sbp = mean(bp_sys_mmhg),\n    prevalence_alb = mean(albuminuria == 'Yes', na.rm = TRUE))\n\n# A tibble: 2 × 3\n  sex    mean_sbp prevalence_alb\n  &lt;fct&gt;     &lt;dbl&gt;          &lt;dbl&gt;\n1 Female     123.          0.126\n2 Male       126.          0.121\n\n\n\nBoth mutate() and summarise() honor groups; mutate() on groups is useful when applying values such as the first() observation or summary measures",
    "crumbs": [
      "Home",
      "Lecture HTML",
      "05 - Data Transformation"
    ]
  },
  {
    "objectID": "Lectures/05_Transform/index.html#grouping---using-group_by-1",
    "href": "Lectures/05_Transform/index.html#grouping---using-group_by-1",
    "title": "Transforming data with dplyr",
    "section": "Grouping - Using group_by()",
    "text": "Grouping - Using group_by()\n\ngroup_by() can accept multiple variables for functions applied to categorical combinations\n\n\nnhanes |&gt;\n  group_by(sex, education) |&gt; \n  summarise(mean_sbp = mean(bp_sys_mmhg),\n    prevalence_alb = mean(albuminuria == 'Yes', na.rm = TRUE))\n\n# A tibble: 8 × 4\n# Groups:   sex [2]\n  sex    education                mean_sbp prevalence_alb\n  &lt;fct&gt;  &lt;fct&gt;                       &lt;dbl&gt;          &lt;dbl&gt;\n1 Female Less than high school        127.         0.172 \n2 Female High school/some college     123.         0.120 \n3 Female College graduate             119.         0.0797\n4 Female Missing                      111.         0.126 \n5 Male   Less than high school        127.         0.156 \n6 Male   High school/some college     126.         0.114 \n7 Male   College graduate             124.         0.0919\n8 Male   Missing                      117.         0.0633",
    "crumbs": [
      "Home",
      "Lecture HTML",
      "05 - Data Transformation"
    ]
  },
  {
    "objectID": "Lectures/05_Transform/index.html#grouping---using-ungroup",
    "href": "Lectures/05_Transform/index.html#grouping---using-ungroup",
    "title": "Transforming data with dplyr",
    "section": "Grouping - Using ungroup()",
    "text": "Grouping - Using ungroup()\n\nNote, sex was still applied as a group to the NHANES summary\nA grouped data frame or tibble is structurally the same as an ungrouped, the distinction is how downstream functions are applied\ngroup_by() “unwraps” as functions are applied to the grouped data frame, eventually returning you to your original ungrouped dataframe\nWhen using nested grouping, you may need to use ungroup() to get back to your original data frame or tibble\nAlways check your work!!",
    "crumbs": [
      "Home",
      "Lecture HTML",
      "05 - Data Transformation"
    ]
  },
  {
    "objectID": "Lectures/05_Transform/index.html#learning-more",
    "href": "Lectures/05_Transform/index.html#learning-more",
    "title": "Transforming data with dplyr",
    "section": "Learning More",
    "text": "Learning More\n\nAs always, cheatsheets available on the tidyverse website(https://rstudio.cloud/learn/cheat-sheets){.external target=“_blank”}\nPackage websites:\n\ndplyr: https://dplyr.tidyverse.org/index.html\nforcats: https://forcats.tidyverse.org/\n\ndplyr has MANY functions we didn’t discuss that can be very useful for isolation, transformation, and summarization",
    "crumbs": [
      "Home",
      "Lecture HTML",
      "05 - Data Transformation"
    ]
  },
  {
    "objectID": "html_files/01_Intro/exercise_solutions.html",
    "href": "html_files/01_Intro/exercise_solutions.html",
    "title": "Table Exercise",
    "section": "",
    "text": "Get some practice working with gt\nUse what you learned in the intro to markdown file to create the table below:\n\nHints:\n\nNote, we’re using rows 1, 2, 3, 51, 52, 53, 101, 102, and 103 of the iris dataset\nThe iris dataset is already loaded in your R environment, no need to import it\n\n\nlibrary(gt)\n\n#Pull the rows\nirisx &lt;- iris[c(1:3,51:53,101:103),]\n\n#Set the species to sentence case\nirisx$Species &lt;- stringr::str_to_sentence(irisx$Species)\n\n#Initialize gt and define the grouping column\ngt_tbl_1 &lt;- gt(data = irisx, groupname_col = \"Species\")\n\n#Make the group stubhead\ngt_tbl_2 &lt;- tab_stubhead(gt_tbl_1, label=\"Species\")\n\n#Define the title and subtitle with md()\ngt_tbl_3 &lt;- tab_header(\n  data = gt_tbl_2,\n  title = md(\"__Iris dataset__\"),\n  subtitle = \"The first three rows for each species are presented\"\n)\n\n#Add the footer source notation\ngt_tbl_4 &lt;- tab_source_note(\n  data = gt_tbl_3,\n  source_note = md(\"__Fisher, R. A__. (1936) The use of multiple measurements in taxonomic problems _Annals of Eugenics_, 7, Part II, 179–188.\")\n) |&gt;\n  tab_source_note(\n    source_note = md(\"The data were collected by Anderson, Edgar (1935). The irises of the Gaspe Peninsula, _Bulletin of the American Iris Society_, 59, 2–5.\")\n  ) |&gt;\n  tab_source_note(\n    source_note = md(\"All table values are in __centimeters__.\"))\n\n#Make the species bold\ngt_tbl_5 &lt;- tab_style(\n  data = gt_tbl_4,\n  locations = cells_row_groups(), \n  style = cell_text(weight = 'bold')\n)\n\n#Use a regex to clean up the colnames for proper labels\nlabels_curr &lt;- gsub(\"\\\\.\", \" \", colnames(iris)[1:4])\nnames(labels_curr) &lt;- colnames(iris)[1:4]\n\n#Use labels_curr to add table labels\ngt_tbl_6 &lt;- cols_label(\n  .data = gt_tbl_5,\n  .list = as.list(labels_curr)\n)\n\n#cols_align centers everything\ngt_tbl_7 &lt;- cols_align(\n  data = gt_tbl_6,\n  align = \"center\"\n)\n\n#Set the font to Georgia (common for manuscripts)\ngt_tbl_8 &lt;- opt_table_font(\n  data=gt_tbl_7,\n  font = c(\"Georgia\")\n)\n\n#Quarto makes strips by default so suppress them here\ngt_tbl_9 &lt;- tab_options(\n  data=gt_tbl_8,\n  quarto.disable_processing = TRUE\n)\n\n\ngt_tbl_9\n\n\n\n\n  \n    \n      Iris dataset\n    \n    \n      The first three rows for each species are presented\n    \n    \n      Sepal Length\n      Sepal Width\n      Petal Length\n      Petal Width\n    \n  \n  \n    \n      Setosa\n    \n    5.1\n3.5\n1.4\n0.2\n    4.9\n3.0\n1.4\n0.2\n    4.7\n3.2\n1.3\n0.2\n    \n      Versicolor\n    \n    7.0\n3.2\n4.7\n1.4\n    6.4\n3.2\n4.5\n1.5\n    6.9\n3.1\n4.9\n1.5\n    \n      Virginica\n    \n    6.3\n3.3\n6.0\n2.5\n    5.8\n2.7\n5.1\n1.9\n    7.1\n3.0\n5.9\n2.1\n  \n  \n    \n      Fisher, R. A. (1936) The use of multiple measurements in taxonomic problems Annals of Eugenics, 7, Part II, 179–188.\n    \n    \n      The data were collected by Anderson, Edgar (1935). The irises of the Gaspe Peninsula, Bulletin of the American Iris Society, 59, 2–5.\n    \n    \n      All table values are in centimeters.\n    \n  \n  \n\n\n\n\n\n\nThere are a couple of things not discussed in the vignette that are applied here, not necessary but if you’re feeling ambitious…\n\nProper case on the species names\nHint - Not a gt function, do this early\nCenter aligning the columns\nHint - Use the col_align() function\nUsing Georgia as the table font\nHint - There are many opt_ functions in gt, maybe there’s one for table fonts?\nRemoving bootstrap striping\n\n\n\n\n\n\n\nCaution\n\n\n\n#4 will take some digging in Quarto, good luck!",
    "crumbs": [
      "Home",
      "Assignment Solutions",
      "01 - Working with Tables"
    ]
  },
  {
    "objectID": "html_files/01_Intro/exercise_solutions.html#problem-1",
    "href": "html_files/01_Intro/exercise_solutions.html#problem-1",
    "title": "Table Exercise",
    "section": "",
    "text": "Get some practice working with gt\nUse what you learned in the intro to markdown file to create the table below:\n\nHints:\n\nNote, we’re using rows 1, 2, 3, 51, 52, 53, 101, 102, and 103 of the iris dataset\nThe iris dataset is already loaded in your R environment, no need to import it\n\n\nlibrary(gt)\n\n#Pull the rows\nirisx &lt;- iris[c(1:3,51:53,101:103),]\n\n#Set the species to sentence case\nirisx$Species &lt;- stringr::str_to_sentence(irisx$Species)\n\n#Initialize gt and define the grouping column\ngt_tbl_1 &lt;- gt(data = irisx, groupname_col = \"Species\")\n\n#Make the group stubhead\ngt_tbl_2 &lt;- tab_stubhead(gt_tbl_1, label=\"Species\")\n\n#Define the title and subtitle with md()\ngt_tbl_3 &lt;- tab_header(\n  data = gt_tbl_2,\n  title = md(\"__Iris dataset__\"),\n  subtitle = \"The first three rows for each species are presented\"\n)\n\n#Add the footer source notation\ngt_tbl_4 &lt;- tab_source_note(\n  data = gt_tbl_3,\n  source_note = md(\"__Fisher, R. A__. (1936) The use of multiple measurements in taxonomic problems _Annals of Eugenics_, 7, Part II, 179–188.\")\n) |&gt;\n  tab_source_note(\n    source_note = md(\"The data were collected by Anderson, Edgar (1935). The irises of the Gaspe Peninsula, _Bulletin of the American Iris Society_, 59, 2–5.\")\n  ) |&gt;\n  tab_source_note(\n    source_note = md(\"All table values are in __centimeters__.\"))\n\n#Make the species bold\ngt_tbl_5 &lt;- tab_style(\n  data = gt_tbl_4,\n  locations = cells_row_groups(), \n  style = cell_text(weight = 'bold')\n)\n\n#Use a regex to clean up the colnames for proper labels\nlabels_curr &lt;- gsub(\"\\\\.\", \" \", colnames(iris)[1:4])\nnames(labels_curr) &lt;- colnames(iris)[1:4]\n\n#Use labels_curr to add table labels\ngt_tbl_6 &lt;- cols_label(\n  .data = gt_tbl_5,\n  .list = as.list(labels_curr)\n)\n\n#cols_align centers everything\ngt_tbl_7 &lt;- cols_align(\n  data = gt_tbl_6,\n  align = \"center\"\n)\n\n#Set the font to Georgia (common for manuscripts)\ngt_tbl_8 &lt;- opt_table_font(\n  data=gt_tbl_7,\n  font = c(\"Georgia\")\n)\n\n#Quarto makes strips by default so suppress them here\ngt_tbl_9 &lt;- tab_options(\n  data=gt_tbl_8,\n  quarto.disable_processing = TRUE\n)\n\n\ngt_tbl_9\n\n\n\n\n  \n    \n      Iris dataset\n    \n    \n      The first three rows for each species are presented\n    \n    \n      Sepal Length\n      Sepal Width\n      Petal Length\n      Petal Width\n    \n  \n  \n    \n      Setosa\n    \n    5.1\n3.5\n1.4\n0.2\n    4.9\n3.0\n1.4\n0.2\n    4.7\n3.2\n1.3\n0.2\n    \n      Versicolor\n    \n    7.0\n3.2\n4.7\n1.4\n    6.4\n3.2\n4.5\n1.5\n    6.9\n3.1\n4.9\n1.5\n    \n      Virginica\n    \n    6.3\n3.3\n6.0\n2.5\n    5.8\n2.7\n5.1\n1.9\n    7.1\n3.0\n5.9\n2.1\n  \n  \n    \n      Fisher, R. A. (1936) The use of multiple measurements in taxonomic problems Annals of Eugenics, 7, Part II, 179–188.\n    \n    \n      The data were collected by Anderson, Edgar (1935). The irises of the Gaspe Peninsula, Bulletin of the American Iris Society, 59, 2–5.\n    \n    \n      All table values are in centimeters.\n    \n  \n  \n\n\n\n\n\n\nThere are a couple of things not discussed in the vignette that are applied here, not necessary but if you’re feeling ambitious…\n\nProper case on the species names\nHint - Not a gt function, do this early\nCenter aligning the columns\nHint - Use the col_align() function\nUsing Georgia as the table font\nHint - There are many opt_ functions in gt, maybe there’s one for table fonts?\nRemoving bootstrap striping\n\n\n\n\n\n\n\nCaution\n\n\n\n#4 will take some digging in Quarto, good luck!",
    "crumbs": [
      "Home",
      "Assignment Solutions",
      "01 - Working with Tables"
    ]
  },
  {
    "objectID": "html_files/02_Visual/exercise_solutions.html",
    "href": "html_files/02_Visual/exercise_solutions.html",
    "title": "Data Visualization Basics",
    "section": "",
    "text": "Overview\nThe gapminder data are related to a famous TED talk given by Hans Rosling. In his talk, Dr. Rosling shows an animated visualization depicting the relationship between life expectancy and average income levels by country. Our goal in this module is to reproduce Dr. Rosling’s visualization.\nWe will access the gapminder data from the gapminder R package. This package contains a dataset (technically, a tibble) called gapminder with 6 variables:\n\n\n\nvariable\nmeaning\n\n\n\n\ncountry\ncountry\n\n\ncontinent\ncontinent\n\n\nyear\nyear\n\n\nlifeExp\nlife expectancy at birth\n\n\npop\ntotal population\n\n\ngdpPercap\nper-capita GDP\n\n\n\nPer-capita GDP (Gross domestic product) is given in units of international dollars, “a hypothetical unit of currency that has the same purchasing power parity that the U.S. dollar had in the United States at a given point in time” – 2005, in this case.\nNote: the gapminder R package exists for the purpose of teaching and making code examples. It is an excerpt of data found in specific spreadsheets on Gapminder.org circa 2010. It is not a definitive source of socioeconomic data.\n\n\nPackages\nLoad the tidyverse and gapminder packages. We are using tidyverse to access the ggplot2 package and using gapminder to access the data.\n\nlibrary(gapminder)\nlibrary(tidyverse)\n\n\n\nInspect your data\nIn gapminder, each country has 12 rows distinguished by year.\n\n# View gapminder data\n  # can also use View(gapminder)\n\n# to set a dataframe:\ngapminder\n\n\n  \n\n\n\n\n\nExercise 1\nCreate a scatter plot using gdpPercap as the x-variable and lifeExp as the y-variable:\nSolution for Exercise 1:\nWe will use the package ggplot2 and the ggplot function. We want to use the gdpPercap as the x-variable and lifeExp as the y-variable. We then want to add the points to the graph using geom_point.\n\nplot1 &lt;- ggplot(\n  data=gapminder,\n  aes(x=gdpPercap, y=lifeExp)) + \n  geom_point()\n\nplot1\n\n\n\n\n\n\n\n\n\n\nExercise 2\nModify your figure from exercise 1: transform the scale of your x-axis to be in log base 10 units. (See ?scale_x_log10)\nSolution for Exercise 2:\nNow we will change the x-sclare to log base 10 and remove the numeric labels from the x-axis. Thus we add scale_x_log10(labels=NULL).\n\nplot2 &lt;- plot1 + \n  scale_x_log10(labels=NULL) \n \nplot2\n\n\n\n\n\n\n\n\n\n\nExercise 3\nAdd x- and y-axis labels to your figure from exercise 2.\nSolution for Exercise 3: We now add the x-axis and y-axis labels using the labs() function.\n\nplot3 &lt;- plot2 +\n  labs(y=\"Life expectancy, years\", \n       x=\"Log income\")\n \nplot3\n\n\n\n\n\n\n\n\n\n\nExercise 4\nAdd a smoothed curve to your plot, showing the overall population trend. (See ?geom_smooth)\nSolution for Exercise 4: Now we add a fitted line to our plot given the provided information, method = ‘gam’ and formula ‘y ~ s(x, bs = “cs”)’geom_smooth() using method = ‘gam’ and formula ‘y ~ s(x, bs = “cs”)’.\n\nplot4 &lt;- plot3 +\n  geom_smooth(method='gam', formula = y ~ s(x, bs = \"cs\")) \n\nplot4\n\n\n\n\n\n\n\n# notes on geom_smooth\n# using gam to fit the non-linear trend line\n# s function stands for spline\n# bs basis-spline\n\n\n\nExercise 5\nAdjust the points in your graph:\n\nSet their shape to be 21\nSet their color to be 'black'\nSet their fill to be 'grey'\n\nAdjust the overall population trend as well:\n\nSet the line’s color to be 'red'\nRemove the standard errors (shaded region around the line) from the plot.\n\nSolution for Exercise 5:\n\nAdding (shape=21, color=“black”, fill=“grey”) to geom_point().\nWe also add color=“red”, se= FALSE to geom_smooth(). se=FALSE indicates to remove the standard errors on the plot.\n\n\nplot5 &lt;- ggplot(\n  data=gapminder,\n    aes(x=gdpPercap, \n        y=lifeExp)) + \n  geom_point(shape=21,  \n             color=\"black\", \n             fill=\"grey\") +\n  scale_x_log10(labels=NULL ) +\n  labs(y=\"Life expectancy, years\", \n       x=\"Log income\") +\n  geom_smooth(method='gam', \n              formula = y ~ s(x, bs = \"cs\"), \n              color=\"red\", \n              se= FALSE) \n\nplot5\n\n\n\n\n\n\n\n\n\n\nExercise 6\nGo to the ggplot2 theme() reference page and scroll through the pictures that show some of the built-in ggplot2 themes. Pick a theme that you like and add it to the figure you created in exercise 5.\nSolution for Exercise 6: We add the theme theme_classic() to change the plot background appearance.\n\nplot6 &lt;- plot5 +\n  theme_classic()\n\nplot6\n\n\n\n\n\n\n\n\n\n\nExercise 7\nThere is something happening in the upper levels of income. The population trend between income and life expectancy changes direction. There is an R package called plotly that can help you explore ggplot figures interactively. Converting a ggplot2 figure into a plotly figure is straightforward:\nYou can tell by hovering your mouse over the far right points in the figure that the higher income but lower life expectancy country is Kuwait. Now, re-create this figure, but use year as a label instead of country, and identify the years that account for these points.\nOnce you’ve seen the year values associated with the points in the upper-income but lower than expected life expectancy, formulate a hypothesis explaining your data. After you’ve written your hypothesis down, go to Wikipedia’s Kuwait page and read about their modern history. Was your hypothesis correct?\nSolution for Exercise 7:\n\nlibrary(plotly, warn.conflicts = FALSE)\n\n# first create the primary data set ggFigureEx7\nggfigure7 &lt;- ggplot(data=gapminder, \n                    aes(x=gdpPercap, y=lifeExp)) +\n  geom_point(shape=21,  \n             color=\"black\", \n             fill=\"grey\") +\n  scale_x_log10(labels=NULL) +\n  labs(y=\"Life expectancy, years\", \n       x=\"Log income\") +\n  geom_smooth(method='gam', \n              formula = y ~ s(x, bs = \"cs\"), \n              color=\"red\", \n              se= FALSE) +\n  theme_classic()\n\nggplotly(ggfigure7)\n\n\n\n\n#now create ggfigure7Yr with added label=year\nggfigureYr &lt;- ggfigure7 +  aes(label = year)\n\nggplotly(ggfigureYr)\n\n\n\n\n#create ggfigure7C with added label=country\nggfigureC &lt;- ggfigure7 +  aes(label = country)\n\nggplotly(ggfigureC)\n\n\n\n\n#an altertive method by adding group=country in the geom_point statement\n#allows to have labels for both country and year in plotyly\nggfigureAlt &lt;- ggplot(data=gapminder,\n                      aes(x=gdpPercap, y=lifeExp)) +\n  geom_point(aes(group = country), \n             shape=21,  color=\"black\", \n             fill=\"grey\") +\n  scale_x_log10(labels=NULL) +\n  labs (y=\"Life expectancy, years\", \n        x=\"Log income\") +\n  geom_smooth(method='gam', \n              formula = y ~ s(x, bs = \"cs\"), \n              color=\"red\", \n              se= FALSE) +\n  theme_classic() +\n  aes(label = year)\n\n\nggplotly(ggfigureAlt)\n\n\n\n\n\nAll of the points are in the range of the years 1952 and 1977. There appears to be upper-income but lower than expected life expectancy in Kuwait during these years.\nHypothesis: wealth was concentrated in a smaller group of people as compared to the general population.\nFrom Wikipedia: “90 per cent Of the capital generated from oil for investment abroad was concentrated in the hands of eighteen families.”\nSo there was an uneven distribution of weath in Kuwait during the span of years 1952 to 1977 that explain what the general life expectancy was lower as compared to the GDP.",
    "crumbs": [
      "Home",
      "Assignment Solutions",
      "02 - Visualization Basics"
    ]
  },
  {
    "objectID": "html_files/03_Program/exercise_solutions.html",
    "href": "html_files/03_Program/exercise_solutions.html",
    "title": "Programming basics - Solutions",
    "section": "",
    "text": "These exercises will help you practice what you have learned about functions and vectors.",
    "crumbs": [
      "Home",
      "Assignment Solutions",
      "03 - Programming Basics"
    ]
  },
  {
    "objectID": "html_files/03_Program/exercise_solutions.html#overview",
    "href": "html_files/03_Program/exercise_solutions.html#overview",
    "title": "Programming basics - Solutions",
    "section": "",
    "text": "These exercises will help you practice what you have learned about functions and vectors.",
    "crumbs": [
      "Home",
      "Assignment Solutions",
      "03 - Programming Basics"
    ]
  },
  {
    "objectID": "html_files/04_Isolate/exercise_solutions.html",
    "href": "html_files/04_Isolate/exercise_solutions.html",
    "title": "Isolating data with dplyr",
    "section": "",
    "text": "NHANES (The National Health and Nutrition Examination Survey) was designed to assess the health and nutritional status of the US population and is conducted by the National Center for Health Statistics of the Centers for Disease Control and Prevention. Since 1999-2000, NHANES has been conducted in two-year cycles. For each cycle, potential participants are identified through stratified, multistage probability sampling of the non-institutionalized US population. In this set of exercises, we will use the ten cycles conducted from 1999-2000 through 2017-2018.\n\n\n\n\n── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ──\n✔ dplyr     1.1.4     ✔ readr     2.1.5\n✔ forcats   1.0.0     ✔ stringr   1.5.1\n✔ ggplot2   3.5.1     ✔ tibble    3.2.1\n✔ lubridate 1.9.3     ✔ tidyr     1.3.1\n✔ purrr     1.0.2     \n── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──\n✖ dplyr::filter() masks stats::filter()\n✖ dplyr::lag()    masks stats::lag()\nℹ Use the conflicted package (&lt;http://conflicted.r-lib.org/&gt;) to force all conflicts to become errors\n\n\n\n  \n\n\n\n\n\n\nReview this briefly and use it as a reference to engage with the exercises below.\n\n\n\n\n\n\n\n\nDescription of NHANES data\n\n\nVariable name\nVariable description\n\n\n\n\nseqn\nSP identifier\n\n\nexam\nNHANES exam year\n\n\npsu\nprimary sampling unit\n\n\nstrata\nsurvey strata\n\n\nwts_mec_2yr\nsurvey weights\n\n\nexam_status\nHow did SP engage with exam?\n\n\nage\nSP age, years\n\n\nage_group\nSP age group, years\n\n\nsex\nSP sex\n\n\nrace_ethnicity\nSP race and/or ethnicity\n\n\neducation\nSP education\n\n\nincome_hh\nSP household income\n\n\npregnant\nwas SP pregnant at time of exam?\n\n\nbp_sys_mmhg\nSP systolic blood pressure, mm Hg\n\n\nbp_dia_mmhg\nSP diastolic blood pressure, mm Hg\n\n\nn_msr_sbp\nNumber of valid systolic BP readings\n\n\nn_msr_dbp\nNumber of valid diastolic BP readings\n\n\nbp_controlled\nDid SP have controlled BP? (&lt;140/90 mm Hg)\n\n\nacr_mgg\nSP albumin-to-creatinine ratio, mg/g\n\n\nalbuminuria\nDid SP have albuminuria? (ACR &gt; 30 mg/g)\n\n\nchol_hdl_mgdl\nSP HDL-cholesterol, mg/dl\n\n\nchol_total_mgdl\nSP total cholesterol, mg/dl\n\n\nhealth_insurance\nSP health insurance status\n\n\nbp_high_aware\nSP ever told by Dr: 'you have high blood pressure'?\n\n\nbp_meds\nSP currently using antihypertensive medication?\n\n\nhc_usual_facility\nSP has a usual healthcare facility?\n\n\nhc_visit_1yr\nSP visited their healthcare facility last year?\n\n\n\nSP = survey participant; BP = blood pressure; HDL = high density lipoprotein",
    "crumbs": [
      "Home",
      "Assignment Solutions",
      "04 - Isolation with dplyr"
    ]
  },
  {
    "objectID": "html_files/04_Isolate/exercise_solutions.html#import",
    "href": "html_files/04_Isolate/exercise_solutions.html#import",
    "title": "Isolating data with dplyr",
    "section": "",
    "text": "── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ──\n✔ dplyr     1.1.4     ✔ readr     2.1.5\n✔ forcats   1.0.0     ✔ stringr   1.5.1\n✔ ggplot2   3.5.1     ✔ tibble    3.2.1\n✔ lubridate 1.9.3     ✔ tidyr     1.3.1\n✔ purrr     1.0.2     \n── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──\n✖ dplyr::filter() masks stats::filter()\n✖ dplyr::lag()    masks stats::lag()\nℹ Use the conflicted package (&lt;http://conflicted.r-lib.org/&gt;) to force all conflicts to become errors",
    "crumbs": [
      "Home",
      "Assignment Solutions",
      "04 - Isolation with dplyr"
    ]
  },
  {
    "objectID": "html_files/04_Isolate/exercise_solutions.html#data-dictionary",
    "href": "html_files/04_Isolate/exercise_solutions.html#data-dictionary",
    "title": "Isolating data with dplyr",
    "section": "",
    "text": "Review this briefly and use it as a reference to engage with the exercises below.\n\n\n\n\n\n\n\n\nDescription of NHANES data\n\n\nVariable name\nVariable description\n\n\n\n\nseqn\nSP identifier\n\n\nexam\nNHANES exam year\n\n\npsu\nprimary sampling unit\n\n\nstrata\nsurvey strata\n\n\nwts_mec_2yr\nsurvey weights\n\n\nexam_status\nHow did SP engage with exam?\n\n\nage\nSP age, years\n\n\nage_group\nSP age group, years\n\n\nsex\nSP sex\n\n\nrace_ethnicity\nSP race and/or ethnicity\n\n\neducation\nSP education\n\n\nincome_hh\nSP household income\n\n\npregnant\nwas SP pregnant at time of exam?\n\n\nbp_sys_mmhg\nSP systolic blood pressure, mm Hg\n\n\nbp_dia_mmhg\nSP diastolic blood pressure, mm Hg\n\n\nn_msr_sbp\nNumber of valid systolic BP readings\n\n\nn_msr_dbp\nNumber of valid diastolic BP readings\n\n\nbp_controlled\nDid SP have controlled BP? (&lt;140/90 mm Hg)\n\n\nacr_mgg\nSP albumin-to-creatinine ratio, mg/g\n\n\nalbuminuria\nDid SP have albuminuria? (ACR &gt; 30 mg/g)\n\n\nchol_hdl_mgdl\nSP HDL-cholesterol, mg/dl\n\n\nchol_total_mgdl\nSP total cholesterol, mg/dl\n\n\nhealth_insurance\nSP health insurance status\n\n\nbp_high_aware\nSP ever told by Dr: 'you have high blood pressure'?\n\n\nbp_meds\nSP currently using antihypertensive medication?\n\n\nhc_usual_facility\nSP has a usual healthcare facility?\n\n\nhc_visit_1yr\nSP visited their healthcare facility last year?\n\n\n\nSP = survey participant; BP = blood pressure; HDL = high density lipoprotein",
    "crumbs": [
      "Home",
      "Assignment Solutions",
      "04 - Isolation with dplyr"
    ]
  }
]